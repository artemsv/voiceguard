
VG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000522  00800100  0000a0ee  0000a182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a0ee  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005f0  00800622  00800622  0000a6a4  2**0
                  ALLOC
  3 .noinit       00000000  00800c12  00800c12  0000a6a4  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000a6a4  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  0000a6a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  0000aaac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  0000ab30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bbe  00000000  00000000  0000ac5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005d33  00000000  00000000  0000c81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e66  00000000  00000000  0001254d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000054ce  00000000  00000000  000133b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000144  00000000  00000000  00018881  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      14:	0c 94 ba 04 	jmp	0x974 <__vector_5>
      18:	0c 94 11 05 	jmp	0xa22 <__vector_6>
      1c:	0c 94 43 05 	jmp	0xa86 <__vector_7>
      20:	0c 94 b7 05 	jmp	0xb6e <__vector_8>
      24:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      38:	0c 94 7e 02 	jmp	0x4fc <__vector_14>
      3c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      40:	0c 94 76 03 	jmp	0x6ec <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      48:	0c 94 00 01 	jmp	0x200 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      54:	0c 94 49 48 	jmp	0x9092 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      74:	0c 94 bf 03 	jmp	0x77e <__vector_29>
      78:	0c 94 d4 00 	jmp	0x1a8 <__vector_30>
      7c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	16 e0       	ldi	r17, 0x06	; 6
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	f0 ea       	ldi	r31, 0xA0	; 160
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 32       	cpi	r26, 0x22	; 34
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1c e0       	ldi	r17, 0x0C	; 12
      b4:	a2 e2       	ldi	r26, 0x22	; 34
      b6:	b6 e0       	ldi	r27, 0x06	; 6
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 31       	cpi	r26, 0x12	; 18
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0c 94 28 18 	jmp	0x3050 <main>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0x0 <__vectors>

000000ca <StartRecord>:

//  запускает запись с микрофонного входа трубки во
//  флешку по адресу: страница zvPage, после записи zvPages страниц запись прекратить
void StartRecord()
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
	record = 1;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	80 93 36 06 	sts	0x0636, r24
	zvukpos = 0;
      d8:	10 92 39 06 	sts	0x0639, r1
      dc:	10 92 38 06 	sts	0x0638, r1
	TCCR1B = _BV(CS11) | _BV(CS11);		// коэф. Пересчёта счётчика 1 = 1
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	80 93 4e 00 	sts	0x004E, r24
	AT45SetWriteBufferPos(0, 0);
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <StartPlay>:
}

//  проиграть zvPages страниц звука, начиная со страницы zvPage
void StartPlay(unsigned short startPage, unsigned char speacAction)
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	23 97       	sbiw	r28, 0x03	; 3
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	9a 83       	std	Y+2, r25	; 0x02
     10c:	89 83       	std	Y+1, r24	; 0x01
     10e:	6b 83       	std	Y+3, r22	; 0x03
	OCR1B = 0;
     110:	10 92 49 00 	sts	0x0049, r1
     114:	10 92 48 00 	sts	0x0048, r1
	ring = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	80 93 37 06 	sts	0x0637, r24
	zvukpos = 0;
     11e:	10 92 39 06 	sts	0x0639, r1
     122:	10 92 38 06 	sts	0x0638, r1
	if (0xFFFF != startPage)			//  параметр
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	9a 81       	ldd	r25, Y+2	; 0x02
     12a:	2f ef       	ldi	r18, 0xFF	; 255
     12c:	8f 3f       	cpi	r24, 0xFF	; 255
     12e:	92 07       	cpc	r25, r18
     130:	31 f0       	breq	.+12     	; 0x13e <StartPlay+0x48>
		zvukpage = startPage;
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	9a 81       	ldd	r25, Y+2	; 0x02
     136:	90 93 74 07 	sts	0x0774, r25
     13a:	80 93 73 07 	sts	0x0773, r24
	TCCR1B = _BV(CS11) | _BV(CS11);		// коэф. Пересчёта счётчика 1 = 1
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	80 93 4e 00 	sts	0x004E, r24
	TCNT1 = 0;
     144:	10 92 4d 00 	sts	0x004D, r1
     148:	10 92 4c 00 	sts	0x004C, r1
	activeBuf = 0;
     14c:	10 92 3a 06 	sts	0x063A, r1
	AT45ReadPageToBuffer(0, zvukpage);
     150:	60 91 73 07 	lds	r22, 0x0773
     154:	70 91 74 07 	lds	r23, 0x0774
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 8b 3c 	call	0x7916 <AT45ReadPageToBuffer>
	AT45ReadPageToBuffer(1, zvukpage + 1);
     15e:	80 91 73 07 	lds	r24, 0x0773
     162:	90 91 74 07 	lds	r25, 0x0774
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	bc 01       	movw	r22, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	0e 94 8b 3c 	call	0x7916 <AT45ReadPageToBuffer>
	zvukpage++;
     170:	80 91 73 07 	lds	r24, 0x0773
     174:	90 91 74 07 	lds	r25, 0x0774
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	90 93 74 07 	sts	0x0774, r25
     17e:	80 93 73 07 	sts	0x0773, r24
	AT45SetReadBufferPos(0, 0);
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 fa 3a 	call	0x75f4 <AT45SetReadBufferPos>

	if (speacAction)
     18c:	8b 81       	ldd	r24, Y+3	; 0x03
     18e:	88 23       	and	r24, r24
     190:	11 f0       	breq	.+4      	; 0x196 <StartPlay+0xa0>
		SpeakerOn();
     192:	0e 94 2a 01 	call	0x254 <SpeakerOn>
     196:	23 96       	adiw	r28, 0x03	; 3
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	cd bf       	out	0x3d, r28	; 61
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <__vector_30>:
}

SIGNAL(SIG_UART1_RECV)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	5f 93       	push	r21
     1ba:	6f 93       	push	r22
     1bc:	7f 93       	push	r23
     1be:	8f 93       	push	r24
     1c0:	9f 93       	push	r25
     1c2:	af 93       	push	r26
     1c4:	bf 93       	push	r27
     1c6:	ef 93       	push	r30
     1c8:	ff 93       	push	r31
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	USART_Transmit(UDR1);
     1d2:	80 91 9c 00 	lds	r24, 0x009C
     1d6:	0e 94 60 2b 	call	0x56c0 <USART_Transmit>
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	ff 91       	pop	r31
     1e0:	ef 91       	pop	r30
     1e2:	bf 91       	pop	r27
     1e4:	af 91       	pop	r26
     1e6:	9f 91       	pop	r25
     1e8:	8f 91       	pop	r24
     1ea:	7f 91       	pop	r23
     1ec:	6f 91       	pop	r22
     1ee:	5f 91       	pop	r21
     1f0:	4f 91       	pop	r20
     1f2:	3f 91       	pop	r19
     1f4:	2f 91       	pop	r18
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <__vector_18>:
}

SIGNAL(SIG_UART0_RECV)
{
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	ef 93       	push	r30
     220:	ff 93       	push	r31
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	HandleReply();
     22a:	0e 94 c6 30 	call	0x618c <HandleReply>
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	ff 91       	pop	r31
     234:	ef 91       	pop	r30
     236:	bf 91       	pop	r27
     238:	af 91       	pop	r26
     23a:	9f 91       	pop	r25
     23c:	8f 91       	pop	r24
     23e:	7f 91       	pop	r23
     240:	6f 91       	pop	r22
     242:	5f 91       	pop	r21
     244:	4f 91       	pop	r20
     246:	3f 91       	pop	r19
     248:	2f 91       	pop	r18
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <SpeakerOn>:
}

void SpeakerOn(void)
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	if (g_speakerVolume)
     25c:	80 91 f1 06 	lds	r24, 0x06F1
     260:	88 23       	and	r24, r24
     262:	29 f0       	breq	.+10     	; 0x26e <SpeakerOn+0x1a>
		SPEAKERON;
     264:	80 91 32 00 	lds	r24, 0x0032
     268:	80 62       	ori	r24, 0x20	; 32
     26a:	80 93 32 00 	sts	0x0032, r24
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <AnalizeInterval>:
}

//  анализирует 100-сэмпловый интервал и определяет мгновенное состояние линии
//  зная мгновенное состояние и предысторию, пытается вычислить текущее состояние
void AnalizeInterval(void)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
	adc_1 = adcCur;						//  предыдущее значение
     27c:	80 91 3f 06 	lds	r24, 0x063F
     280:	80 93 40 06 	sts	0x0640, r24
	adcCur = a2dConvert8bit(1);			//  текущее значение
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 2d 48 	call	0x905a <a2dConvert8bit>
     28a:	80 93 3f 06 	sts	0x063F, r24

	g_sampleCount++;					//  счетчик отсчетов
     28e:	80 91 3d 06 	lds	r24, 0x063D
     292:	90 91 3e 06 	lds	r25, 0x063E
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	90 93 3e 06 	sts	0x063E, r25
     29c:	80 93 3d 06 	sts	0x063D, r24

	if (g_sampleCount > 3)
     2a0:	80 91 3d 06 	lds	r24, 0x063D
     2a4:	90 91 3e 06 	lds	r25, 0x063E
     2a8:	84 30       	cpi	r24, 0x04	; 4
     2aa:	91 05       	cpc	r25, r1
     2ac:	58 f1       	brcs	.+86     	; 0x304 <AnalizeInterval+0x90>
	{
		g_sampleDiff = adcCur - adc_1;
     2ae:	90 91 3f 06 	lds	r25, 0x063F
     2b2:	80 91 40 06 	lds	r24, 0x0640
     2b6:	98 1b       	sub	r25, r24
     2b8:	89 2f       	mov	r24, r25
     2ba:	80 93 a7 06 	sts	0x06A7, r24

		if (g_sampleDiff < 0)
     2be:	80 91 a7 06 	lds	r24, 0x06A7
     2c2:	88 23       	and	r24, r24
     2c4:	1c f4       	brge	.+6      	; 0x2cc <AnalizeInterval+0x58>
			g_sampleDiff = 0;
     2c6:	10 92 a7 06 	sts	0x06A7, r1
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <AnalizeInterval+0x5e>
		else
			g_sampleDiff = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 a7 06 	sts	0x06A7, r24

		if (g_sampleDiff != g_oldSampleDiff)
     2d2:	80 91 a7 06 	lds	r24, 0x06A7
     2d6:	28 2f       	mov	r18, r24
     2d8:	33 27       	eor	r19, r19
     2da:	27 fd       	sbrc	r18, 7
     2dc:	30 95       	com	r19
     2de:	80 91 a9 06 	lds	r24, 0x06A9
     2e2:	99 27       	eor	r25, r25
     2e4:	28 17       	cp	r18, r24
     2e6:	39 07       	cpc	r19, r25
     2e8:	69 f0       	breq	.+26     	; 0x304 <AnalizeInterval+0x90>
		{	//  если произошла смена знака
			g_oldSampleDiff = g_sampleDiff;
     2ea:	80 91 a7 06 	lds	r24, 0x06A7
     2ee:	80 93 a9 06 	sts	0x06A9, r24
			if (!g_oldSampleDiff)
     2f2:	80 91 a9 06 	lds	r24, 0x06A9
     2f6:	88 23       	and	r24, r24
     2f8:	29 f4       	brne	.+10     	; 0x304 <AnalizeInterval+0x90>
				//  если не просто смена знака, а спад
				g_fallCounter++;		//  счетчик спадов
     2fa:	80 91 f6 06 	lds	r24, 0x06F6
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	80 93 f6 06 	sts	0x06F6, r24
		}
	}

	if (g_sampleCount > 103)
     304:	80 91 3d 06 	lds	r24, 0x063D
     308:	90 91 3e 06 	lds	r25, 0x063E
     30c:	88 36       	cpi	r24, 0x68	; 104
     30e:	91 05       	cpc	r25, r1
     310:	08 f4       	brcc	.+2      	; 0x314 <AnalizeInterval+0xa0>
     312:	f1 c0       	rjmp	.+482    	; 0x4f6 <AnalizeInterval+0x282>
	{	//  набрался целый интервал пичков - анализируем его

		g_IntervalCount++;					//  счетчик интервалов
     314:	80 91 5b 07 	lds	r24, 0x075B
     318:	90 91 5c 07 	lds	r25, 0x075C
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	90 93 5c 07 	sts	0x075C, r25
     322:	80 93 5b 07 	sts	0x075B, r24

		//  g_fallCounter - количество пичков, для 425 Гц оно должно быть 11-13
		if ((g_fallCounter > 10) && (g_fallCounter < 14))
     326:	80 91 f6 06 	lds	r24, 0x06F6
     32a:	8b 30       	cpi	r24, 0x0B	; 11
     32c:	40 f0       	brcs	.+16     	; 0x33e <AnalizeInterval+0xca>
     32e:	80 91 f6 06 	lds	r24, 0x06F6
     332:	8e 30       	cpi	r24, 0x0E	; 14
     334:	20 f4       	brcc	.+8      	; 0x33e <AnalizeInterval+0xca>
			g_fallCounter = 1;				//	интервал сигнала 425 Гц
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 f6 06 	sts	0x06F6, r24
     33c:	02 c0       	rjmp	.+4      	; 0x342 <AnalizeInterval+0xce>
		else
			g_fallCounter = 0;				//	интервал молчания, голоса или шума
     33e:	10 92 f6 06 	sts	0x06F6, r1

		if (g_fallCounter == g_prevIntervalType)
     342:	90 91 f6 06 	lds	r25, 0x06F6
     346:	80 91 db 06 	lds	r24, 0x06DB
     34a:	98 17       	cp	r25, r24
     34c:	51 f4       	brne	.+20     	; 0x362 <AnalizeInterval+0xee>
			g_sameIntervalCounter++;					//  еще один такой интервал
     34e:	80 91 ee 06 	lds	r24, 0x06EE
     352:	90 91 ef 06 	lds	r25, 0x06EF
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	90 93 ef 06 	sts	0x06EF, r25
     35c:	80 93 ee 06 	sts	0x06EE, r24
     360:	13 c0       	rjmp	.+38     	; 0x388 <AnalizeInterval+0x114>
		else
		{	//  этот интервал не таков, как предыдущий
			if (g_sameIntervalCounter > 0)
     362:	80 91 ee 06 	lds	r24, 0x06EE
     366:	90 91 ef 06 	lds	r25, 0x06EF
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	49 f0       	breq	.+18     	; 0x380 <AnalizeInterval+0x10c>
				g_sameIntervalCounter--;
     36e:	80 91 ee 06 	lds	r24, 0x06EE
     372:	90 91 ef 06 	lds	r25, 0x06EF
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	90 93 ef 06 	sts	0x06EF, r25
     37c:	80 93 ee 06 	sts	0x06EE, r24

			g_prevIntervalType = g_fallCounter;
     380:	80 91 f6 06 	lds	r24, 0x06F6
     384:	80 93 db 06 	sts	0x06DB, r24
		}

		if (g_sameIntervalCounter > g_params[PARAM_SAME_INTERVAL_CNT])
     388:	20 91 10 04 	lds	r18, 0x0410
     38c:	30 91 11 04 	lds	r19, 0x0411
     390:	80 91 ee 06 	lds	r24, 0x06EE
     394:	90 91 ef 06 	lds	r25, 0x06EF
     398:	28 17       	cp	r18, r24
     39a:	39 07       	cpc	r19, r25
     39c:	08 f0       	brcs	.+2      	; 0x3a0 <AnalizeInterval+0x12c>
     39e:	a5 c0       	rjmp	.+330    	; 0x4ea <AnalizeInterval+0x276>
		{	//  если количество однотипных интервалов более нормы

			if (voicePresent != g_fallCounter)
     3a0:	90 91 7d 06 	lds	r25, 0x067D
     3a4:	80 91 f6 06 	lds	r24, 0x06F6
     3a8:	98 17       	cp	r25, r24
     3aa:	09 f4       	brne	.+2      	; 0x3ae <AnalizeInterval+0x13a>
     3ac:	5c c0       	rjmp	.+184    	; 0x466 <AnalizeInterval+0x1f2>
			{	//  если это количество интервалов не такое,як предыдущее состояние
				//  или просто это первое зафиксированное изменение состояния линии...

				voicePresent = g_fallCounter;
     3ae:	80 91 f6 06 	lds	r24, 0x06F6
     3b2:	80 93 7d 06 	sts	0x067D, r24
//#ifdef DEBUG
				SetCaret(LINE_1_START_POS + 10);
     3b6:	8a e0       	ldi	r24, 0x0A	; 10
     3b8:	0e 94 47 29 	call	0x528e <SetCaret>
				OutData(0x30 + voicePresent);
     3bc:	80 91 7d 06 	lds	r24, 0x067D
     3c0:	80 5d       	subi	r24, 0xD0	; 208
     3c2:	0e 94 e7 28 	call	0x51ce <OutData>
				OutData(32);
     3c6:	80 e2       	ldi	r24, 0x20	; 32
     3c8:	0e 94 e7 28 	call	0x51ce <OutData>
				OutStr(itoa(g_IntervalCount, g_szInput, 10));
     3cc:	4a e0       	ldi	r20, 0x0A	; 10
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	62 e2       	ldi	r22, 0x22	; 34
     3d2:	76 e0       	ldi	r23, 0x06	; 6
     3d4:	80 91 5b 07 	lds	r24, 0x075B
     3d8:	90 91 5c 07 	lds	r25, 0x075C
     3dc:	0e 94 6a 4f 	call	0x9ed4 <itoa>
     3e0:	0e 94 24 29 	call	0x5248 <OutStr>
				OutData(32);
     3e4:	80 e2       	ldi	r24, 0x20	; 32
     3e6:	0e 94 e7 28 	call	0x51ce <OutData>
				SetCaret(LINE_2_START_POS);
     3ea:	80 e4       	ldi	r24, 0x40	; 64
     3ec:	0e 94 47 29 	call	0x528e <SetCaret>
//#endif
				if (1 == voicePresent)
     3f0:	80 91 7d 06 	lds	r24, 0x067D
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	19 f4       	brne	.+6      	; 0x3fe <AnalizeInterval+0x18a>
					g_wasOne = 1;		//  пришла первая единица в текущем сеансе
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 c1 06 	sts	0x06C1, r24

				if (g_wasOne)
     3fe:	80 91 c1 06 	lds	r24, 0x06C1
     402:	88 23       	and	r24, r24
     404:	19 f1       	breq	.+70     	; 0x44c <AnalizeInterval+0x1d8>
				{
					if (!g_fallCounter)
     406:	80 91 f6 06 	lds	r24, 0x06F6
     40a:	88 23       	and	r24, r24
     40c:	f9 f4       	brne	.+62     	; 0x44c <AnalizeInterval+0x1d8>
					{	//  если сейчас закончился нулевой интервал(пауза)
						// 	и, значит, предыдущий был единичный интервал

						if ((g_IntervalCount << 1) < g_lastIntervalCount)
     40e:	80 91 5b 07 	lds	r24, 0x075B
     412:	90 91 5c 07 	lds	r25, 0x075C
     416:	9c 01       	movw	r18, r24
     418:	22 0f       	add	r18, r18
     41a:	33 1f       	adc	r19, r19
     41c:	80 91 80 06 	lds	r24, 0x0680
     420:	90 91 81 06 	lds	r25, 0x0681
     424:	28 17       	cp	r18, r24
     426:	39 07       	cpc	r19, r25
     428:	30 f4       	brcc	.+12     	; 0x436 <AnalizeInterval+0x1c2>
						//  если предыдущий единичный более чем в два раза меньше
						//	текущего нулевого
						{
							linemode = LM_KPV;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 f4 06 	sts	0x06F4, r24
							lastLinemode = 0;
     430:	10 92 58 07 	sts	0x0758, r1
     434:	0b c0       	rjmp	.+22     	; 0x44c <AnalizeInterval+0x1d8>
						}
						else
						{	//  "Занято" - хитрый сигнал, надо удостоверится, что
							//	это настоящее "Занято" - для этого ждем два раза подряд
							//  (вообще-то достаточно одного,но это для нашей мини-АТС)
							if (LM_BUSY == lastLinemode)
     436:	80 91 58 07 	lds	r24, 0x0758
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	21 f4       	brne	.+8      	; 0x446 <AnalizeInterval+0x1d2>
							{
								linemode = LM_BUSY;
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	80 93 f4 06 	sts	0x06F4, r24
     444:	03 c0       	rjmp	.+6      	; 0x44c <AnalizeInterval+0x1d8>
							}else
								lastLinemode = LM_BUSY;
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	80 93 58 07 	sts	0x0758, r24
						}
					}
				}

				g_lastIntervalCount = g_IntervalCount;
     44c:	80 91 5b 07 	lds	r24, 0x075B
     450:	90 91 5c 07 	lds	r25, 0x075C
     454:	90 93 81 06 	sts	0x0681, r25
     458:	80 93 80 06 	sts	0x0680, r24
				g_IntervalCount = 0;
     45c:	10 92 5c 07 	sts	0x075C, r1
     460:	10 92 5b 07 	sts	0x075B, r1
     464:	3a c0       	rjmp	.+116    	; 0x4da <AnalizeInterval+0x266>
			}else
			{	//  если однотипные интервалы все продолжаются и продолжаются

				if ((g_IntervalCount > g_params[PARAM_GUDOK_LEN]) &&
     466:	20 91 0e 04 	lds	r18, 0x040E
     46a:	30 91 0f 04 	lds	r19, 0x040F
     46e:	80 91 5b 07 	lds	r24, 0x075B
     472:	90 91 5c 07 	lds	r25, 0x075C
     476:	28 17       	cp	r18, r24
     478:	39 07       	cpc	r19, r25
     47a:	80 f4       	brcc	.+32     	; 0x49c <AnalizeInterval+0x228>
     47c:	80 91 c1 06 	lds	r24, 0x06C1
     480:	88 23       	and	r24, r24
     482:	61 f0       	breq	.+24     	; 0x49c <AnalizeInterval+0x228>
     484:	80 91 7d 06 	lds	r24, 0x067D
     488:	88 23       	and	r24, r24
     48a:	41 f0       	breq	.+16     	; 0x49c <AnalizeInterval+0x228>
						g_wasOne &&	voicePresent)
				{ 	//	механизм ускоренного определения  сигнала "Ответ станции"

					linemode = LM_OS_OR_DOWN;
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	80 93 f4 06 	sts	0x06F4, r24
					g_IntervalCount = 0;
     492:	10 92 5c 07 	sts	0x075C, r1
     496:	10 92 5b 07 	sts	0x075B, r1
     49a:	1f c0       	rjmp	.+62     	; 0x4da <AnalizeInterval+0x266>
				}else

				if (g_IntervalCount > g_params[PARAM_MAXPAUSE_LEN])
     49c:	20 91 12 04 	lds	r18, 0x0412
     4a0:	30 91 13 04 	lds	r19, 0x0413
     4a4:	80 91 5b 07 	lds	r24, 0x075B
     4a8:	90 91 5c 07 	lds	r25, 0x075C
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	a0 f4       	brcc	.+40     	; 0x4da <AnalizeInterval+0x266>
				{	//  если ну очень долгое молчание или гудок

					//  но нельзя реагировать на длинную паузу перед первым гудком

					if (g_wasOne)
     4b2:	80 91 c1 06 	lds	r24, 0x06C1
     4b6:	88 23       	and	r24, r24
     4b8:	81 f0       	breq	.+32     	; 0x4da <AnalizeInterval+0x266>
					{	//  если первый гудок все-таки был
						//	(то есть это не начальная пауза перед первым гудком)

						lastLinemode = 0;
     4ba:	10 92 58 07 	sts	0x0758, r1

						linemode = LM_OS_OR_DOWN;
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	80 93 f4 06 	sts	0x06F4, r24
						if (!voicePresent)
     4c4:	80 91 7d 06 	lds	r24, 0x067D
     4c8:	88 23       	and	r24, r24
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <AnalizeInterval+0x25e>
							linemode = LM_UP;
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	80 93 f4 06 	sts	0x06F4, r24

						g_IntervalCount = 0;
     4d2:	10 92 5c 07 	sts	0x075C, r1
     4d6:	10 92 5b 07 	sts	0x075B, r1
					}
				}
			}

			g_sameIntervalCounter = 0;
     4da:	10 92 ef 06 	sts	0x06EF, r1
     4de:	10 92 ee 06 	sts	0x06EE, r1
			g_prevIntervalType = g_fallCounter;
     4e2:	80 91 f6 06 	lds	r24, 0x06F6
     4e6:	80 93 db 06 	sts	0x06DB, r24
		}

		g_fallCounter = 0;
     4ea:	10 92 f6 06 	sts	0x06F6, r1
		g_sampleCount = 0;
     4ee:	10 92 3e 06 	sts	0x063E, r1
     4f2:	10 92 3d 06 	sts	0x063D, r1
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <__vector_14>:
	}
}

SIGNAL(SIG_OVERFLOW1)
{
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	2f 93       	push	r18
     508:	3f 93       	push	r19
     50a:	4f 93       	push	r20
     50c:	5f 93       	push	r21
     50e:	6f 93       	push	r22
     510:	7f 93       	push	r23
     512:	8f 93       	push	r24
     514:	9f 93       	push	r25
     516:	af 93       	push	r26
     518:	bf 93       	push	r27
     51a:	ef 93       	push	r30
     51c:	ff 93       	push	r31
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	21 97       	sbiw	r28, 0x01	; 1
     528:	de bf       	out	0x3e, r29	; 62
     52a:	cd bf       	out	0x3d, r28	; 61
	unsigned char byte;
/*
	if (g_genDTMF)
	{
		TCNT1 = 0x7F + 64;
		ISR_T1_Overflow();
		g_cntDTMF++;
		if (g_cntDTMF == 2000)
		{
			TCCR1B = 0;
			g_genDTMF = 0;
			OCR1B = 0;
		}
	}
*/
/*
	if (record)
	{	//  если сейчас записываем звук
		TCNT1 = g_params[PARAM_TCNT1];

		if (zvukpage < g_params[PARAM_zvPage] + g_params[PARAM_zvPages])
		{
			AT45WriteByteToBuffer(activeBuf, a2dConvert8bit(0));

			zvukpos++;
			if (zvukpos == 512)
			{
				AT45WriteBufferToPage(activeBuf, zvukpage);
				zvukpage++;
				zvukpos = 0;
				if (activeBuf)
					activeBuf = 0;
				else
					activeBuf = 1;
				AT45SetWriteBufferPos(activeBuf, 0);
			}
		} else
		{
			TCCR1B = 0;
			record = 0;
		}
	}
*/
/*	if (dtmfRing)
	{
	}
	*/
	if (ring)
     52c:	80 91 37 06 	lds	r24, 0x0637
     530:	88 23       	and	r24, r24
     532:	09 f4       	brne	.+2      	; 0x536 <__vector_14+0x3a>
     534:	9b c0       	rjmp	.+310    	; 0x66c <__vector_14+0x170>
	{	//  если сейчас проигрываем звук
		TCNT1 = g_params[PARAM_TCNT1];
     536:	80 91 18 04 	lds	r24, 0x0418
     53a:	90 91 19 04 	lds	r25, 0x0419
     53e:	90 93 4d 00 	sts	0x004D, r25
     542:	80 93 4c 00 	sts	0x004C, r24

		byte = AT45ReadByteFromBuffer(activeBuf);
     546:	80 91 3a 06 	lds	r24, 0x063A
     54a:	0e 94 da 3c 	call	0x79b4 <AT45ReadByteFromBuffer>
     54e:	89 83       	std	Y+1, r24	; 0x01
		if (byte != 0xFF)
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	8f 3f       	cpi	r24, 0xFF	; 255
     554:	09 f4       	brne	.+2      	; 0x558 <__vector_14+0x5c>
     556:	3e c0       	rjmp	.+124    	; 0x5d4 <__vector_14+0xd8>
		{
			OCR1B = byte;
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	99 27       	eor	r25, r25
     55c:	90 93 49 00 	sts	0x0049, r25
     560:	80 93 48 00 	sts	0x0048, r24
			zvukpos++;
     564:	80 91 38 06 	lds	r24, 0x0638
     568:	90 91 39 06 	lds	r25, 0x0639
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	90 93 39 06 	sts	0x0639, r25
     572:	80 93 38 06 	sts	0x0638, r24
			if (zvukpos == 512)
     576:	80 91 38 06 	lds	r24, 0x0638
     57a:	90 91 39 06 	lds	r25, 0x0639
     57e:	22 e0       	ldi	r18, 0x02	; 2
     580:	80 30       	cpi	r24, 0x00	; 0
     582:	92 07       	cpc	r25, r18
     584:	09 f0       	breq	.+2      	; 0x588 <__vector_14+0x8c>
     586:	72 c0       	rjmp	.+228    	; 0x66c <__vector_14+0x170>
			{
				zvukpage++;
     588:	80 91 73 07 	lds	r24, 0x0773
     58c:	90 91 74 07 	lds	r25, 0x0774
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	90 93 74 07 	sts	0x0774, r25
     596:	80 93 73 07 	sts	0x0773, r24
				AT45ReadPageToBuffer(activeBuf, zvukpage);
     59a:	60 91 73 07 	lds	r22, 0x0773
     59e:	70 91 74 07 	lds	r23, 0x0774
     5a2:	80 91 3a 06 	lds	r24, 0x063A
     5a6:	0e 94 8b 3c 	call	0x7916 <AT45ReadPageToBuffer>
				zvukpos = 0;
     5aa:	10 92 39 06 	sts	0x0639, r1
     5ae:	10 92 38 06 	sts	0x0638, r1
				if (activeBuf)
     5b2:	80 91 3a 06 	lds	r24, 0x063A
     5b6:	88 23       	and	r24, r24
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <__vector_14+0xc4>
					activeBuf = 0;
     5ba:	10 92 3a 06 	sts	0x063A, r1
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <__vector_14+0xca>
				else
					activeBuf = 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 3a 06 	sts	0x063A, r24

				AT45SetReadBufferPos(activeBuf, 0);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 91 3a 06 	lds	r24, 0x063A
     5ce:	0e 94 fa 3a 	call	0x75f4 <AT45SetReadBufferPos>
     5d2:	4c c0       	rjmp	.+152    	; 0x66c <__vector_14+0x170>
			}
		}else
		{
			//OCR1B = 0;
			if (!analizeTELIN)
     5d4:	80 91 d8 06 	lds	r24, 0x06D8
     5d8:	88 23       	and	r24, r24
     5da:	11 f4       	brne	.+4      	; 0x5e0 <__vector_14+0xe4>
				TCCR1B = 0;		//  отключать таймер только при отсутствии измерения
     5dc:	10 92 4e 00 	sts	0x004E, r1
			ring = 0;
     5e0:	10 92 37 06 	sts	0x0637, r1
			//TCNT1 = 0;

			if (g_nextVoice < MAX_VOICE_QUEUE)
     5e4:	80 91 13 07 	lds	r24, 0x0713
     5e8:	80 32       	cpi	r24, 0x20	; 32
     5ea:	78 f5       	brcc	.+94     	; 0x64a <__vector_14+0x14e>
			{	//  не достигнут ли физический конец очереди звуков?

				if (g_VoiceQueue[g_nextVoice])
     5ec:	80 91 13 07 	lds	r24, 0x0713
     5f0:	28 2f       	mov	r18, r24
     5f2:	33 27       	eor	r19, r19
     5f4:	c9 01       	movw	r24, r18
     5f6:	82 0f       	add	r24, r18
     5f8:	93 1f       	adc	r25, r19
     5fa:	fc 01       	movw	r30, r24
     5fc:	e9 5e       	subi	r30, 0xE9	; 233
     5fe:	f8 4f       	sbci	r31, 0xF8	; 248
     600:	80 81       	ld	r24, Z
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	09 f1       	breq	.+66     	; 0x64a <__vector_14+0x14e>
				{	//  а есть ли задание в очереди?

					SendVoice(g_VoiceQueue[g_nextVoice], 0);
     608:	80 91 13 07 	lds	r24, 0x0713
     60c:	28 2f       	mov	r18, r24
     60e:	33 27       	eor	r19, r19
     610:	c9 01       	movw	r24, r18
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	fc 01       	movw	r30, r24
     618:	e9 5e       	subi	r30, 0xE9	; 233
     61a:	f8 4f       	sbci	r31, 0xF8	; 248
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	91 81       	ldd	r25, Z+1	; 0x01
     622:	0e 94 61 1c 	call	0x38c2 <SendVoice>
					g_VoiceQueue[g_nextVoice] = 0;
     626:	80 91 13 07 	lds	r24, 0x0713
     62a:	28 2f       	mov	r18, r24
     62c:	33 27       	eor	r19, r19
     62e:	c9 01       	movw	r24, r18
     630:	82 0f       	add	r24, r18
     632:	93 1f       	adc	r25, r19
     634:	fc 01       	movw	r30, r24
     636:	e9 5e       	subi	r30, 0xE9	; 233
     638:	f8 4f       	sbci	r31, 0xF8	; 248
     63a:	11 82       	std	Z+1, r1	; 0x01
     63c:	10 82       	st	Z, r1
					g_nextVoice++;
     63e:	80 91 13 07 	lds	r24, 0x0713
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 13 07 	sts	0x0713, r24
					return;
     648:	3a c0       	rjmp	.+116    	; 0x6be <__vector_14+0x1c2>
				}
			}

			timer0delay = 100;
     64a:	84 e6       	ldi	r24, 0x64	; 100
     64c:	80 93 6f 07 	sts	0x076F, r24
			SPEAKEROFF;
     650:	80 91 32 00 	lds	r24, 0x0032
     654:	8f 7d       	andi	r24, 0xDF	; 223
     656:	80 93 32 00 	sts	0x0032, r24
			if (!dontStartConfirmTimer)
     65a:	80 91 d0 06 	lds	r24, 0x06D0
     65e:	88 23       	and	r24, r24
     660:	19 f4       	brne	.+6      	; 0x668 <__vector_14+0x16c>
				confirmUp = MAX_RAZGOVOR_TIME;
     662:	84 e1       	ldi	r24, 0x14	; 20
     664:	80 93 42 06 	sts	0x0642, r24
			dontStartConfirmTimer = 0;
     668:	10 92 d0 06 	sts	0x06D0, r1
		}
	}

	if (analizeTELIN)
     66c:	80 91 d8 06 	lds	r24, 0x06D8
     670:	88 23       	and	r24, r24
     672:	29 f1       	breq	.+74     	; 0x6be <__vector_14+0x1c2>
	{	//  если сейчас измеряем звук

		AnalizeInterval();
     674:	0e 94 3a 01 	call	0x274 <AnalizeInterval>

		telinDivider++;
     678:	80 91 f8 06 	lds	r24, 0x06F8
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	80 93 f8 06 	sts	0x06F8, r24
		if (telinDivider == g_params[PARAM_TELIN_ANALIZE_RESOLUTION])
     682:	80 91 f8 06 	lds	r24, 0x06F8
     686:	28 2f       	mov	r18, r24
     688:	33 27       	eor	r19, r19
     68a:	80 91 08 04 	lds	r24, 0x0408
     68e:	90 91 09 04 	lds	r25, 0x0409
     692:	28 17       	cp	r18, r24
     694:	39 07       	cpc	r19, r25
     696:	99 f4       	brne	.+38     	; 0x6be <__vector_14+0x1c2>
		{
			telinDivider = 0;
     698:	10 92 f8 06 	sts	0x06F8, r1
			if (g_LineModeAnalizeResultToSPI)
     69c:	80 91 83 06 	lds	r24, 0x0683
     6a0:	88 23       	and	r24, r24
     6a2:	69 f0       	breq	.+26     	; 0x6be <__vector_14+0x1c2>
				if (wBufPos[0] < 512)
     6a4:	80 91 69 06 	lds	r24, 0x0669
     6a8:	90 91 6a 06 	lds	r25, 0x066A
     6ac:	22 e0       	ldi	r18, 0x02	; 2
     6ae:	80 30       	cpi	r24, 0x00	; 0
     6b0:	92 07       	cpc	r25, r18
     6b2:	28 f4       	brcc	.+10     	; 0x6be <__vector_14+0x1c2>
					AT45WriteByteToBuffer(0, adcCur);
     6b4:	60 91 3f 06 	lds	r22, 0x063F
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>
     6be:	21 96       	adiw	r28, 0x01	; 1
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_16>:
		}
	}
}

//  защита от повторных нажатий кнопок
//  таймер инкрементируется с частотой 15625 (16Mhz / 1024)
//  переполняется 15625/256 = раз в секунду ( каждые 16.38 мс )
SIGNAL(SIG_OVERFLOW0)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 61;
     716:	8d e3       	ldi	r24, 0x3D	; 61
     718:	80 93 52 00 	sts	0x0052, r24
	if (timer0delay)
     71c:	80 91 6f 07 	lds	r24, 0x076F
     720:	88 23       	and	r24, r24
     722:	29 f0       	breq	.+10     	; 0x72e <__vector_16+0x42>
		timer0delay--;
     724:	80 91 6f 07 	lds	r24, 0x076F
     728:	81 50       	subi	r24, 0x01	; 1
     72a:	80 93 6f 07 	sts	0x076F, r24

	if (builtinSensorsPollInterval)
     72e:	80 91 70 07 	lds	r24, 0x0770
     732:	88 23       	and	r24, r24
     734:	89 f0       	breq	.+34     	; 0x758 <__vector_16+0x6c>
		if (!(--builtinSensorsPollInterval))
     736:	80 91 70 07 	lds	r24, 0x0770
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	80 93 70 07 	sts	0x0770, r24
     740:	88 23       	and	r24, r24
     742:	51 f4       	brne	.+20     	; 0x758 <__vector_16+0x6c>
		{	//  пришло время опрашивать внутренние датчики
			if (!ring)
     744:	80 91 37 06 	lds	r24, 0x0637
     748:	88 23       	and	r24, r24
     74a:	11 f4       	brne	.+4      	; 0x750 <__vector_16+0x64>
				PollBuiltinSensors2();
     74c:	0e 94 34 26 	call	0x4c68 <PollBuiltinSensors2>
			builtinSensorsPollInterval = g_BuiltSensorsPollInterval;
     750:	80 91 bf 06 	lds	r24, 0x06BF
     754:	80 93 70 07 	sts	0x0770, r24
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	ff 91       	pop	r31
     75e:	ef 91       	pop	r30
     760:	bf 91       	pop	r27
     762:	af 91       	pop	r26
     764:	9f 91       	pop	r25
     766:	8f 91       	pop	r24
     768:	7f 91       	pop	r23
     76a:	6f 91       	pop	r22
     76c:	5f 91       	pop	r21
     76e:	4f 91       	pop	r20
     770:	3f 91       	pop	r19
     772:	2f 91       	pop	r18
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	0f 90       	pop	r0
     77a:	1f 90       	pop	r1
     77c:	18 95       	reti

0000077e <__vector_29>:
		}
}

/*
char ew = 32, hhh, zvb, gotov;
//  прерывание обслуживания MC14LC5480
//  частота 16000000 делится на 32 и получается 512000 тиков в секунду
//  вывод MC_2048 устанавливается в единицу каждый второй тик => на MC_2048 256 kHz
//  MC_8K устанавливается в единицу каждый 64 вызов прерывания => там 8 kHz
SIGNAL(SIG_OVERFLOW0)
{
	if (!(PORTE & MC_2048))
	{	//  сейчас пока низкий уровень MCLK, BCLKT и BCLKR

		//  устанавливаем высокий уровень тактовой синхронизации
		PORTE |= MC_2048;
	}else
	{	//  сейчас высокий уровень MCLK, BCLKT и BCLKR

		//  устанавливаем низкий уровень тактовой синхронизации
		PORTE &= ~MC_2048;

		//ACSR = PIND & MC_8K;
		if ((unsigned char)(PIND & MC_8K))
		{	//  если стоит 8килогерцовый импульс

			//w = (PORTG & MC_DR);			//  читаем бит DT

			if (PING & MC_DR)
				zvb |= 1 << hhh;

			hhh++;								//  счетчик битов

			//if (hhh == 8)
			//{
			//	gotov = 1;
			//}
		}

		if (!--ew)
		{
			PORTD |= MC_8K;		//  фронт кадрового синхроимпульса

			ew = 32;			//  делитель частоты 256 kHz для выхода 8К
		//	hhh = 0;
		}
	}


	//PORTE ^= MC_2048;		//  инвертируем MCLK, BLCKT, BLCKR
}
*/

//  second interrupt
SIGNAL(SIG_OVERFLOW3)
{
     77e:	1f 92       	push	r1
     780:	0f 92       	push	r0
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	0f 92       	push	r0
     786:	11 24       	eor	r1, r1
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	ef 93       	push	r30
     79e:	ff 93       	push	r31
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	21 97       	sbiw	r28, 0x01	; 1
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;

   	TCNT3 = TIMER3_SECOND_VALUE;
     7ae:	87 ef       	ldi	r24, 0xF7	; 247
     7b0:	92 ec       	ldi	r25, 0xC2	; 194
     7b2:	90 93 89 00 	sts	0x0089, r25
     7b6:	80 93 88 00 	sts	0x0088, r24
	//TCNT3 = TIMER3_MAX_INTERVAL + (16 - g_x232Interval) * (TIMER3_200MS_VALUE/2);

	if (g_canShowTime && g_ShowTime && (!ring))		//  может мешать звуку
     7ba:	80 91 c0 06 	lds	r24, 0x06C0
     7be:	88 23       	and	r24, r24
     7c0:	51 f0       	breq	.+20     	; 0x7d6 <__vector_29+0x58>
     7c2:	80 91 f7 06 	lds	r24, 0x06F7
     7c6:	88 23       	and	r24, r24
     7c8:	31 f0       	breq	.+12     	; 0x7d6 <__vector_29+0x58>
     7ca:	80 91 37 06 	lds	r24, 0x0637
     7ce:	88 23       	and	r24, r24
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <__vector_29+0x58>
		UpdateTimePane();
     7d2:	0e 94 98 2c 	call	0x5930 <UpdateTimePane>

	//  обновляем показания АЦП-метров
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == g_Mode)
     7d6:	80 91 f0 06 	lds	r24, 0x06F0
     7da:	89 30       	cpi	r24, 0x09	; 9
     7dc:	19 f4       	brne	.+6      	; 0x7e4 <__vector_29+0x66>
		PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE);
     7de:	89 e0       	ldi	r24, 0x09	; 9
     7e0:	0e 94 78 09 	call	0x12f0 <PrepareToMode>

	if (confirmUp)
     7e4:	80 91 42 06 	lds	r24, 0x0642
     7e8:	88 23       	and	r24, r24
     7ea:	39 f1       	breq	.+78     	; 0x83a <__vector_29+0xbc>
	{
		if (!ring)
     7ec:	80 91 37 06 	lds	r24, 0x0637
     7f0:	88 23       	and	r24, r24
     7f2:	19 f5       	brne	.+70     	; 0x83a <__vector_29+0xbc>
		{
			SetCaret(LINE_1_START_POS + 14);
     7f4:	8e e0       	ldi	r24, 0x0E	; 14
     7f6:	0e 94 47 29 	call	0x528e <SetCaret>
			OutStr(itoa(confirmUp, g_szInput, 10));
     7fa:	80 91 42 06 	lds	r24, 0x0642
     7fe:	99 27       	eor	r25, r25
     800:	4a e0       	ldi	r20, 0x0A	; 10
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	62 e2       	ldi	r22, 0x22	; 34
     806:	76 e0       	ldi	r23, 0x06	; 6
     808:	0e 94 6a 4f 	call	0x9ed4 <itoa>
     80c:	0e 94 24 29 	call	0x5248 <OutStr>
			OutData(' ');
     810:	80 e2       	ldi	r24, 0x20	; 32
     812:	0e 94 e7 28 	call	0x51ce <OutData>

			if (!--confirmUp)
     816:	80 91 42 06 	lds	r24, 0x0642
     81a:	81 50       	subi	r24, 0x01	; 1
     81c:	80 93 42 06 	sts	0x0642, r24
     820:	88 23       	and	r24, r24
     822:	59 f4       	brne	.+22     	; 0x83a <__vector_29+0xbc>
			{	//  не подтвердил поднятие - отбой
				if ((advancedLineMode) || (g_wasEnteringCall))
     824:	80 91 d1 06 	lds	r24, 0x06D1
     828:	88 23       	and	r24, r24
     82a:	29 f4       	brne	.+10     	; 0x836 <__vector_29+0xb8>
     82c:	80 91 ff 06 	lds	r24, 0x06FF
     830:	88 23       	and	r24, r24
     832:	09 f4       	brne	.+2      	; 0x836 <__vector_29+0xb8>
     834:	02 c0       	rjmp	.+4      	; 0x83a <__vector_29+0xbc>
					RingOff();
     836:	0e 94 6b 20 	call	0x40d6 <RingOff>
			}
		}
	}

	//  простой счетчик секунд, используется при ожидании поднятия
	if (g_secCnt)
     83a:	80 91 41 06 	lds	r24, 0x0641
     83e:	88 23       	and	r24, r24
     840:	29 f0       	breq	.+10     	; 0x84c <__vector_29+0xce>
		g_secCnt--;
     842:	80 91 41 06 	lds	r24, 0x0641
     846:	81 50       	subi	r24, 0x01	; 1
     848:	80 93 41 06 	sts	0x0641, r24

	if (helloCounter)			//  ограничитель времени набора пароля
     84c:	80 91 a8 06 	lds	r24, 0x06A8
     850:	88 23       	and	r24, r24
     852:	51 f0       	breq	.+20     	; 0x868 <__vector_29+0xea>
	{
		if (!--helloCounter)
     854:	80 91 a8 06 	lds	r24, 0x06A8
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	80 93 a8 06 	sts	0x06A8, r24
     85e:	88 23       	and	r24, r24
     860:	19 f4       	brne	.+6      	; 0x868 <__vector_29+0xea>
		{
			PrepareToMode(MD_HELLO);
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
		}
	}

	//  прорисовка строки-прогресса
	if (progress)
     868:	80 91 fe 06 	lds	r24, 0x06FE
     86c:	88 23       	and	r24, r24
     86e:	a9 f0       	breq	.+42     	; 0x89a <__vector_29+0x11c>
	{
		if (progressPos == LINE_LEN)
     870:	80 91 e9 06 	lds	r24, 0x06E9
     874:	80 31       	cpi	r24, 0x10	; 16
     876:	21 f4       	brne	.+8      	; 0x880 <__vector_29+0x102>
		{
			ClearSecondLine();
     878:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>
			progressPos = 0;
     87c:	10 92 e9 06 	sts	0x06E9, r1
		};

		SetCaret(LINE_2_START_POS + progressPos);
     880:	80 91 e9 06 	lds	r24, 0x06E9
     884:	80 5c       	subi	r24, 0xC0	; 192
     886:	0e 94 47 29 	call	0x528e <SetCaret>
		OutData(ITEM_CHECKED);
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	0e 94 e7 28 	call	0x51ce <OutData>

		progressPos++;
     890:	80 91 e9 06 	lds	r24, 0x06E9
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	80 93 e9 06 	sts	0x06E9, r24
	}

	if (defferedOhranaEvent)
     89a:	80 91 0e 07 	lds	r24, 0x070E
     89e:	90 91 0f 07 	lds	r25, 0x070F
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	81 f0       	breq	.+32     	; 0x8c6 <__vector_29+0x148>
	{	//  отложенное событие о сработке датчиков
		if (!--defferedOhranaEvent)
     8a6:	80 91 0e 07 	lds	r24, 0x070E
     8aa:	90 91 0f 07 	lds	r25, 0x070F
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	90 93 0f 07 	sts	0x070F, r25
     8b4:	80 93 0e 07 	sts	0x070E, r24
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	29 f4       	brne	.+10     	; 0x8c6 <__vector_29+0x148>
		{	//  таймаут на повтор истек
			g_DefferedWork |= _BV(DW_SENDOHRANAEVENT);
     8bc:	80 91 5d 07 	lds	r24, 0x075D
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 93 5d 07 	sts	0x075D, r24
		}
	}

	if (delaySetOhrana)
     8c6:	80 91 d6 06 	lds	r24, 0x06D6
     8ca:	90 91 d7 06 	lds	r25, 0x06D7
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	69 f0       	breq	.+26     	; 0x8ec <__vector_29+0x16e>
	{
		if (!--delaySetOhrana)
     8d2:	80 91 d6 06 	lds	r24, 0x06D6
     8d6:	90 91 d7 06 	lds	r25, 0x06D7
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	90 93 d7 06 	sts	0x06D7, r25
     8e0:	80 93 d6 06 	sts	0x06D6, r24
     8e4:	00 97       	sbiw	r24, 0x00	; 0
     8e6:	11 f4       	brne	.+4      	; 0x8ec <__vector_29+0x16e>
		{
			ReduceOhrana();
     8e8:	0e 94 db 24 	call	0x49b6 <ReduceOhrana>
		}
	}

#ifndef NEWVG
	if(!ring)				//  мешает новому звуку(в старом звуке не было)
		HandleProtocol();	//  находит очередной пакет(если готов) и посылает его
#else
	for (k = 0; k < 8; k++)
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	48 f5       	brcc	.+82     	; 0x946 <__vector_29+0x1c8>
	{
		//  если таймаут еще не кончился, уменьшаем его на число циклов, которые
		//  это устройство пропустило из-за наличия других устройств
		//  так сделано из-за накладности уменьшения таймаутов всех устройств
		//  в одном цикле сразу, поэтому при каждом вызове - одно устройство
		if (g_devList[0].sensorTimeout[k])
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	28 2f       	mov	r18, r24
     8f8:	33 27       	eor	r19, r19
     8fa:	c9 01       	movw	r24, r18
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	fc 01       	movw	r30, r24
     902:	e6 54       	subi	r30, 0x46	; 70
     904:	f8 4f       	sbci	r31, 0xF8	; 248
     906:	80 81       	ld	r24, Z
     908:	91 81       	ldd	r25, Z+1	; 0x01
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	c1 f0       	breq	.+48     	; 0x93e <__vector_29+0x1c0>
			g_devList[0].sensorTimeout[k]--;
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	28 2f       	mov	r18, r24
     912:	33 27       	eor	r19, r19
     914:	c9 01       	movw	r24, r18
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	dc 01       	movw	r26, r24
     91c:	a6 54       	subi	r26, 0x46	; 70
     91e:	b8 4f       	sbci	r27, 0xF8	; 248
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	28 2f       	mov	r18, r24
     924:	33 27       	eor	r19, r19
     926:	c9 01       	movw	r24, r18
     928:	82 0f       	add	r24, r18
     92a:	93 1f       	adc	r25, r19
     92c:	fc 01       	movw	r30, r24
     92e:	e6 54       	subi	r30, 0x46	; 70
     930:	f8 4f       	sbci	r31, 0xF8	; 248
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	9c 93       	st	X, r25
     93c:	8e 93       	st	-X, r24
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	d4 cf       	rjmp	.-88     	; 0x8ee <__vector_29+0x170>
     946:	21 96       	adiw	r28, 0x01	; 1
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <__vector_5>:
	}
#endif
}

//  прерывание от DTMF - декодера MT8870
SIGNAL(SIG_INTERRUPT4)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
	OCR1B = 0;					//  когда DTMF посылка вклинивается в звук,
     99e:	10 92 49 00 	sts	0x0049, r1
     9a2:	10 92 48 00 	sts	0x0048, r1
									//  слышен писк(delay в SendVoice)

	//  если он поднял, и не дожидаясь приветствия, выдал команду
	linemode = LM_UP;
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	80 93 f4 06 	sts	0x06F4, r24
	g_needHello = 0;				//  приветствие тогда выдавать и не надо
     9ac:	10 92 00 07 	sts	0x0700, r1

	delayms(50);
     9b0:	82 e3       	ldi	r24, 0x32	; 50
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 ba 38 	call	0x7174 <delayms>
	DTMFCmdStorer((PINF & 0xF0) >> 4);
     9b8:	80 91 20 00 	lds	r24, 0x0020
     9bc:	99 27       	eor	r25, r25
     9be:	80 7f       	andi	r24, 0xF0	; 240
     9c0:	90 70       	andi	r25, 0x00	; 0
     9c2:	95 95       	asr	r25
     9c4:	87 95       	ror	r24
     9c6:	95 95       	asr	r25
     9c8:	87 95       	ror	r24
     9ca:	95 95       	asr	r25
     9cc:	87 95       	ror	r24
     9ce:	95 95       	asr	r25
     9d0:	87 95       	ror	r24
     9d2:	0e 94 85 1c 	call	0x390a <DTMFCmdStorer>
	SetCaret(LINE_1_START_POS + 12);
     9d6:	8c e0       	ldi	r24, 0x0C	; 12
     9d8:	0e 94 47 29 	call	0x528e <SetCaret>
	OutData(0x30 + ((PINF & 0xF0) >> 4));
     9dc:	80 91 20 00 	lds	r24, 0x0020
     9e0:	99 27       	eor	r25, r25
     9e2:	80 7f       	andi	r24, 0xF0	; 240
     9e4:	90 70       	andi	r25, 0x00	; 0
     9e6:	95 95       	asr	r25
     9e8:	87 95       	ror	r24
     9ea:	95 95       	asr	r25
     9ec:	87 95       	ror	r24
     9ee:	95 95       	asr	r25
     9f0:	87 95       	ror	r24
     9f2:	95 95       	asr	r25
     9f4:	87 95       	ror	r24
     9f6:	80 5d       	subi	r24, 0xD0	; 208
     9f8:	0e 94 e7 28 	call	0x51ce <OutData>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <__vector_6>:

//	OutStr(itoa((PINF & 0xF0) >> 4, g_szInput, 10));

}

//  от клавиатуры
SIGNAL(SIG_INTERRUPT5)
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
	//ClearScreen();
//	OutData('1');

	delayms(50);
     a4c:	82 e3       	ldi	r24, 0x32	; 50
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 ba 38 	call	0x7174 <delayms>
	ScanKbd();
     a54:	0e 94 41 2a 	call	0x5482 <ScanKbd>
	HandleKeys(getcha());
     a58:	0e 94 1d 2b 	call	0x563a <getcha>
     a5c:	0e 94 49 16 	call	0x2c92 <HandleKeys>
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <__vector_7>:
}

#ifndef REDUCE
//  прерывание поднятия трубки
/*
SIGNAL(SIG_INTERRUPT5)
{
	unsigned char e3, e4;

	g_dtmfPSWOk = 0;		//  кто-бы не поднял трубку, DTMF сеанс запрещен
#ifdef REDUCE
	g_dtmfPasswordPermission = 0;
#endif

	if ((MD_HELLO == g_Mode) || (MD_TEL == g_Mode))
	{	//  поднятие трубки обрабатывается только в режиме 0 и режиме набора номера
		EIMSK &= ~_BV(INT5); 		//  отключаем прерывание INT5

		//  задержка для устранения дребезга
		delay_loop_2(60663);

		e3 = PINE & _BV(PE5);
		e4 = EICRB & _BV(ISC50);

		if ((e3 && e4) || ((!e3) && (!e4)))
		{	//  подтвердилось
			EICRB ^= _BV(ISC50); 		//  инвертируем бит фронта или спада

			if (g_telon)
			{	//  положили трубку
				PORTF &= ~TELON;
				PrepareToMode(MD_HELLO);
				g_telon = 0;
				//SetSpeakerVolume(0);
				PORTD &= ~PWA;			//	выключаем усилитель
				g_hf = 0;
			}else
			{	//  подняли трубку - подключаемся к линии и зажигаем светодиод
				//  если же включен режим HandsFree, ничего не изменяется
				g_telon = 1;

				if (!g_hf)
				{
					PORTF |= TELON;
					if (!g_hf)
						Telephone();
				}
			}
		}

		EIMSK |= _BV(INT5); 		//	включаем прерывание INT5
	}
}
*/
#endif

//  прерывание от входящего звонка (телефонная линия)
SIGNAL(SIG_INTERRUPT6)
{
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
	if (g_StreamMode) 		//  потоковую запись прерывать никак нельзя
     ab0:	80 91 a2 07 	lds	r24, 0x07A2
     ab4:	88 23       	and	r24, r24
     ab6:	09 f0       	breq	.+2      	; 0xaba <__vector_7+0x34>
		return;
     ab8:	47 c0       	rjmp	.+142    	; 0xb48 <__vector_7+0xc2>

	g_DefferedSensorsState_ = 0;
     aba:	10 92 82 06 	sts	0x0682, r1
	g_dtmfPSWOk = 0;		//  кто-бы не поднял трубку, DTMF сеанс запрещен
     abe:	10 92 f5 06 	sts	0x06F5, r1
#ifdef REDUCE
	g_dtmfPasswordPermission = 0;
     ac2:	10 92 c4 06 	sts	0x06C4, r1
#endif

	if ((MD_HELLO != g_Mode) && (MD_OHRANA != g_Mode))
     ac6:	80 91 f0 06 	lds	r24, 0x06F0
     aca:	83 30       	cpi	r24, 0x03	; 3
     acc:	29 f0       	breq	.+10     	; 0xad8 <__vector_7+0x52>
     ace:	80 91 f0 06 	lds	r24, 0x06F0
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	09 f0       	breq	.+2      	; 0xad8 <__vector_7+0x52>
		return;
     ad6:	38 c0       	rjmp	.+112    	; 0xb48 <__vector_7+0xc2>

	TELUP;								//  подняли трубку
     ad8:	80 91 23 00 	lds	r24, 0x0023
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	80 93 23 00 	sts	0x0023, r24
	g_wasEnteringCall = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 ff 06 	sts	0x06FF, r24

	if (MD_HELLO == g_Mode)
     ae8:	80 91 f0 06 	lds	r24, 0x06F0
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	a9 f4       	brne	.+42     	; 0xb1a <__vector_7+0x94>
	{
		ClearScreen();
     af0:	0e 94 79 29 	call	0x52f2 <ClearScreen>

	//	SetSpeakerVolume(g_speakerVolume * 16);

		g_ShowTime = 0;
     af4:	10 92 f7 06 	sts	0x06F7, r1
		OutStr(szZvonok);				//  Звонок
     af8:	8a e1       	ldi	r24, 0x1A	; 26
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	0e 94 24 29 	call	0x5248 <OutStr>

		modeBeforeZvonok = MD_HELLO;	//  чтобы положив, оказались в 0-вом режиме
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	80 93 fd 06 	sts	0x06FD, r24
		delayms(500);
     b06:	84 ef       	ldi	r24, 0xF4	; 244
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 ba 38 	call	0x7174 <delayms>
		PlayVoice(VOICE_HELLO, 0);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	88 e7       	ldi	r24, 0x78	; 120
     b12:	95 e0       	ldi	r25, 0x05	; 5
     b14:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
     b18:	14 c0       	rjmp	.+40     	; 0xb42 <__vector_7+0xbc>
	}else
	if (MD_OHRANA == g_Mode)
     b1a:	80 91 f0 06 	lds	r24, 0x06F0
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	81 f4       	brne	.+32     	; 0xb42 <__vector_7+0xbc>
	{	//  автоподнятие в режиме охраны
		g_dtmfPSWOk = 0;				//  пароль не введен
     b22:	10 92 f5 06 	sts	0x06F5, r1
#ifdef REDUCE
		g_dtmfPasswordPermission = 0;
     b26:	10 92 c4 06 	sts	0x06C4, r1
#endif
		modeBeforeZvonok = MD_OHRANA;	//  чтобы положив, оказались в охране
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	80 93 fd 06 	sts	0x06FD, r24
		delayms(500);
     b30:	84 ef       	ldi	r24, 0xF4	; 244
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 ba 38 	call	0x7174 <delayms>
		PlayVoice(VOICE_SYSTEM_POD_OHRANOY, 0);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	8c ed       	ldi	r24, 0xDC	; 220
     b3c:	95 e0       	ldi	r25, 0x05	; 5
     b3e:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
	}
	//  в течении xx-ти секунд должен подтвердить командой
	confirmUp = MAX_RAZGOVOR_TIME;
     b42:	84 e1       	ldi	r24, 0x14	; 20
     b44:	80 93 42 06 	sts	0x0642, r24
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <__vector_8>:

//	delayms(1000);			//  чтобы успел до уха донести...
}

//  прерывание от входящего звонка (GSM)
SIGNAL(SIG_INTERRUPT7)
{
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <ReadEEPROMData>:
}

/*
//  возникает каждые 200 миллисекунд
SIGNAL(SIG_OUTPUT_COMPARE3A)
{
	OCR3A = TCNT3 + TIMER3_200MS_VALUE;
	if (4 == OCR3A)
		OCR3A = 0xFFFF;

	//HandleProtocol();
}
*/

void ReadEEPROMData(void)
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	28 97       	sbiw	r28, 0x08	; 8
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
	RTC_TIME rtc;

	g_canShowTime = eeprom_read_byte_1((void*)EADR_CAN_SHOW_TIME);
     ba2:	84 ee       	ldi	r24, 0xE4	; 228
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
     baa:	80 93 c0 06 	sts	0x06C0, r24
	advancedLineMode = eeprom_read_byte_1((unsigned char*)EADR_ADV_LINE_MODE);
     bae:	83 ee       	ldi	r24, 0xE3	; 227
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
     bb6:	80 93 d1 06 	sts	0x06D1, r24
	epmrbl(&g_szSetupPassword, (unsigned char*)EADR_SETUP_PSWD, MAX_PASSWORD_LEN);
     bba:	4a e0       	ldi	r20, 0x0A	; 10
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	62 ed       	ldi	r22, 0xD2	; 210
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	85 ec       	ldi	r24, 0xC5	; 197
     bc4:	96 e0       	ldi	r25, 0x06	; 6
     bc6:	0e 94 08 39 	call	0x7210 <epmrbl>
	if (g_szSetupPassword[0] == 0xFF)
     bca:	80 91 c5 06 	lds	r24, 0x06C5
     bce:	8f 3f       	cpi	r24, 0xFF	; 255
     bd0:	51 f4       	brne	.+20     	; 0xbe6 <ReadEEPROMData+0x58>
	{	//  та к бывает после прошивки - пароль по умолчанию - "0000"
		memset(&g_szSetupPassword, 0x30, 4);
     bd2:	44 e0       	ldi	r20, 0x04	; 4
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	60 e3       	ldi	r22, 0x30	; 48
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	85 ec       	ldi	r24, 0xC5	; 197
     bdc:	96 e0       	ldi	r25, 0x06	; 6
     bde:	0e 94 11 4f 	call	0x9e22 <memset>
		g_szSetupPassword[4] = 0;
     be2:	10 92 c9 06 	sts	0x06C9, r1
	}
	g_szSetupPassword[MAX_PASSWORD_LEN] = 0;	//  терминатор
     be6:	10 92 cf 06 	sts	0x06CF, r1

	//  сохраняем время старта системы
	ReadTime(&rtc);
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 ec 2b 	call	0x57d8 <ReadTime>
	//epmwbl(&rtc, (void*)EADR_START_TIME, sizeof(rtc));

	//  громкость динамика
	g_speakerVolume = eeprom_read_byte_1((unsigned char*)EADR_VOLUME_DINAMIC);
     bf2:	84 e1       	ldi	r24, 0x14	; 20
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
     bfa:	80 93 f1 06 	sts	0x06F1, r24

	//  читаем номера телефонов
	unsigned char k;
	for (k = 0; k < MAX_TEL_AUTO_DIAL_NUMBERS_ITEMS; k++)
     bfe:	18 86       	std	Y+8, r1	; 0x08
     c00:	88 85       	ldd	r24, Y+8	; 0x08
     c02:	86 30       	cpi	r24, 0x06	; 6
     c04:	08 f0       	brcs	.+2      	; 0xc08 <ReadEEPROMData+0x7a>
     c06:	6a c0       	rjmp	.+212    	; 0xcdc <ReadEEPROMData+0x14e>
	{
		epmrbl(&(g_szAutoDialNumbers[k][0]),
     c08:	88 85       	ldd	r24, Y+8	; 0x08
     c0a:	99 27       	eor	r25, r25
     c0c:	82 95       	swap	r24
     c0e:	92 95       	swap	r25
     c10:	90 7f       	andi	r25, 0xF0	; 240
     c12:	98 27       	eor	r25, r24
     c14:	80 7f       	andi	r24, 0xF0	; 240
     c16:	98 27       	eor	r25, r24
     c18:	bc 01       	movw	r22, r24
     c1a:	68 5e       	subi	r22, 0xE8	; 232
     c1c:	7f 4f       	sbci	r23, 0xFF	; 255
     c1e:	88 85       	ldd	r24, Y+8	; 0x08
     c20:	28 2f       	mov	r18, r24
     c22:	33 27       	eor	r19, r19
     c24:	c9 01       	movw	r24, r18
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	fc 01       	movw	r30, r24
     c2c:	e3 54       	subi	r30, 0x43	; 67
     c2e:	fc 4f       	sbci	r31, 0xFC	; 252
     c30:	40 e1       	ldi	r20, 0x10	; 16
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	0e 94 08 39 	call	0x7210 <epmrbl>
			(void*)EADR_AUTO_DIAL_NUMBERS + k*(INPUT_LEN_TEL + 1),
			(INPUT_LEN_TEL + 1));

		g_szAutoDialNumbers[k][15] = 0;
     c3c:	88 85       	ldd	r24, Y+8	; 0x08
     c3e:	28 2f       	mov	r18, r24
     c40:	33 27       	eor	r19, r19
     c42:	c9 01       	movw	r24, r18
     c44:	82 0f       	add	r24, r18
     c46:	93 1f       	adc	r25, r19
     c48:	fc 01       	movw	r30, r24
     c4a:	e3 54       	subi	r30, 0x43	; 67
     c4c:	fc 4f       	sbci	r31, 0xFC	; 252
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01
     c52:	fc 01       	movw	r30, r24
     c54:	3f 96       	adiw	r30, 0x0f	; 15
     c56:	10 82       	st	Z, r1

		if (0xFF == g_szAutoDialNumbers[k][0])
     c58:	88 85       	ldd	r24, Y+8	; 0x08
     c5a:	28 2f       	mov	r18, r24
     c5c:	33 27       	eor	r19, r19
     c5e:	c9 01       	movw	r24, r18
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	fc 01       	movw	r30, r24
     c66:	e3 54       	subi	r30, 0x43	; 67
     c68:	fc 4f       	sbci	r31, 0xFC	; 252
     c6a:	01 90       	ld	r0, Z+
     c6c:	f0 81       	ld	r31, Z
     c6e:	e0 2d       	mov	r30, r0
     c70:	80 81       	ld	r24, Z
     c72:	8f 3f       	cpi	r24, 0xFF	; 255
     c74:	79 f5       	brne	.+94     	; 0xcd4 <ReadEEPROMData+0x146>
		{
			g_szAutoDialNumbers[k][0] = 0x31 + k;
     c76:	88 85       	ldd	r24, Y+8	; 0x08
     c78:	28 2f       	mov	r18, r24
     c7a:	33 27       	eor	r19, r19
     c7c:	c9 01       	movw	r24, r18
     c7e:	82 0f       	add	r24, r18
     c80:	93 1f       	adc	r25, r19
     c82:	fc 01       	movw	r30, r24
     c84:	e3 54       	subi	r30, 0x43	; 67
     c86:	fc 4f       	sbci	r31, 0xFC	; 252
     c88:	01 90       	ld	r0, Z+
     c8a:	f0 81       	ld	r31, Z
     c8c:	e0 2d       	mov	r30, r0
     c8e:	88 85       	ldd	r24, Y+8	; 0x08
     c90:	8f 5c       	subi	r24, 0xCF	; 207
     c92:	80 83       	st	Z, r24
			memset(&g_szAutoDialNumbers[k][1], '.', 9);
     c94:	88 85       	ldd	r24, Y+8	; 0x08
     c96:	28 2f       	mov	r18, r24
     c98:	33 27       	eor	r19, r19
     c9a:	c9 01       	movw	r24, r18
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	fc 01       	movw	r30, r24
     ca2:	e3 54       	subi	r30, 0x43	; 67
     ca4:	fc 4f       	sbci	r31, 0xFC	; 252
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	49 e0       	ldi	r20, 0x09	; 9
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	6e e2       	ldi	r22, 0x2E	; 46
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	0e 94 11 4f 	call	0x9e22 <memset>

			g_szAutoDialNumbers[k][10] = 0;
     cb8:	88 85       	ldd	r24, Y+8	; 0x08
     cba:	28 2f       	mov	r18, r24
     cbc:	33 27       	eor	r19, r19
     cbe:	c9 01       	movw	r24, r18
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	fc 01       	movw	r30, r24
     cc6:	e3 54       	subi	r30, 0x43	; 67
     cc8:	fc 4f       	sbci	r31, 0xFC	; 252
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	fc 01       	movw	r30, r24
     cd0:	3a 96       	adiw	r30, 0x0a	; 10
     cd2:	10 82       	st	Z, r1
     cd4:	88 85       	ldd	r24, Y+8	; 0x08
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
     cd8:	88 87       	std	Y+8, r24	; 0x08
     cda:	92 cf       	rjmp	.-220    	; 0xc00 <ReadEEPROMData+0x72>
		}
	}
//#ifdef DEBUG
	memcpy(g_szAutoDialNumbers[0], "105\x0" , 4);
     cdc:	44 e0       	ldi	r20, 0x04	; 4
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	61 e2       	ldi	r22, 0x21	; 33
     ce2:	74 e0       	ldi	r23, 0x04	; 4
     ce4:	80 91 bd 03 	lds	r24, 0x03BD
     ce8:	90 91 be 03 	lds	r25, 0x03BE
     cec:	0e 94 04 4f 	call	0x9e08 <memcpy>
     cf0:	28 96       	adiw	r28, 0x08	; 8
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <Init>:
//#endif
}

void Init(void)
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	useLocalDTMF = 0;
     d0a:	10 92 01 07 	sts	0x0701, r1
	g_GalkaPunkt = 0xFF;
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	80 93 59 07 	sts	0x0759, r24
	g_ShowTime = FALSE;
     d14:	10 92 f7 06 	sts	0x06F7, r1
	g_wasEnteringCall = FALSE;
     d18:	10 92 ff 06 	sts	0x06FF, r1

	// disable analog comparator
	ACSR = ( ACSR & (uint8_t) ~( _BV( ACIE ) ) ) | _BV( ACD );
     d1c:	97 ef       	ldi	r25, 0xF7	; 247
     d1e:	80 91 28 00 	lds	r24, 0x0028
     d22:	98 23       	and	r25, r24
     d24:	80 e8       	ldi	r24, 0x80	; 128
     d26:	89 2b       	or	r24, r25
     d28:	80 93 28 00 	sts	0x0028, r24

	DDRA = 0xFF;
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	80 93 3a 00 	sts	0x003A, r24
	PORTA = 0xFF;
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	80 93 3b 00 	sts	0x003B, r24
	DDRC = 0xE0;
     d38:	80 ee       	ldi	r24, 0xE0	; 224
     d3a:	80 93 34 00 	sts	0x0034, r24
	DDRE = _BV(PE3);
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	80 93 22 00 	sts	0x0022, r24

	PORTF = 0xF0;
     d44:	80 ef       	ldi	r24, 0xF0	; 240
     d46:	80 93 62 00 	sts	0x0062, r24
	DDR_TELON = TELON;
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	80 93 22 00 	sts	0x0022, r24
	DDRG = LCD_RW | LCD_E | LCD_RS | MC_DT;
     d50:	8f e0       	ldi	r24, 0x0F	; 15
     d52:	80 93 64 00 	sts	0x0064, r24
	DDRB = 0xF6;					//  PB5 = CSR + PB6 - DIG
     d56:	86 ef       	ldi	r24, 0xF6	; 246
     d58:	80 93 37 00 	sts	0x0037, r24

	DDRD = PWR | PWA;		//  PD4, PD5 - OUT
     d5c:	80 e3       	ldi	r24, 0x30	; 48
     d5e:	80 93 31 00 	sts	0x0031, r24
	PORTD = PWR;					//  PD4 - для GSM
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	80 93 32 00 	sts	0x0032, r24

	PORTG = 0x00;
     d68:	10 92 65 00 	sts	0x0065, r1
	PORTB = 0x66;
     d6c:	86 e6       	ldi	r24, 0x66	; 102
     d6e:	80 93 38 00 	sts	0x0038, r24
	PORTE = 0x04;
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	80 93 23 00 	sts	0x0023, r24


	EIFR = 0;				//  очищаем на всякий
     d78:	10 92 58 00 	sts	0x0058, r1

	//  настройка внешних прерываний
	EICRB = _BV(ISC71)|_BV(ISC70)|
     d7c:	83 ef       	ldi	r24, 0xF3	; 243
     d7e:	80 93 5a 00 	sts	0x005A, r24
//#ifndef REDUCE
			//_BV(ISC51)|_BV(ISC50)|
//#endif
			_BV(ISC60)|
			_BV(ISC61)|

		 	_BV(ISC40)|
			_BV(ISC41);

	EIMSK = _BV(INT7) |
     d82:	80 ed       	ldi	r24, 0xD0	; 208
     d84:	80 93 59 00 	sts	0x0059, r24
	_BV(INT6)|
//#ifndef REDUCE
	//_BV(INT5)|
//#endif
	_BV(INT4);

	InitLCD();			//  экранчик
     d88:	0e 94 6c 29 	call	0x52d8 <InitLCD>

	InitRTC();			//  инициализация DS1307
     d8c:	0e 94 d8 2b 	call	0x57b0 <InitRTC>

	if (g_canShowTime)
     d90:	80 91 c0 06 	lds	r24, 0x06C0
     d94:	88 23       	and	r24, r24
     d96:	19 f0       	breq	.+6      	; 0xd9e <Init+0x9c>
		UpdateTimePane();
     d98:	0e 94 98 2c 	call	0x5930 <UpdateTimePane>
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <Init+0xa0>
	else
		HideCaret();
     d9e:	0e 94 91 29 	call	0x5322 <HideCaret>

	InitDevices();
     da2:	0e 94 6c 2e 	call	0x5cd8 <InitDevices>

	g_BuiltSensorsPollInterval = g_x232Interval;
     da6:	80 91 8d 07 	lds	r24, 0x078D
     daa:	80 93 bf 06 	sts	0x06BF, r24
	ReadEEPROMData();
     dae:	0e 94 c7 05 	call	0xb8e <ReadEEPROMData>

#ifndef PROTEUS

	spiInit();
     db2:	0e 94 6b 2d 	call	0x5ad6 <spiInit>

#endif
	uart_init();
     db6:	0e 94 9e 2b 	call	0x573c <uart_init>

	InitTimer3();
     dba:	0e 94 9e 28 	call	0x513c <InitTimer3>
	InitTimer0();
     dbe:	0e 94 8d 28 	call	0x511a <InitTimer0>

	sei();
     dc2:	78 94       	sei

#ifndef PROTEUS
	fatxInit();
     dc4:	0e 94 54 40 	call	0x80a8 <fatxInit>

	//initDTMF();
	InitPWM();
     dc8:	0e 94 b3 28 	call	0x5166 <InitPWM>
	//SetSpeakerVolume(0);

	a2dInit();
     dcc:	0e 94 3d 47 	call	0x8e7a <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV64);
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	0e 94 73 47 	call	0x8ee6 <a2dSetPrescaler>
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <ChangeMenuItems>:
#endif
}

//  меняет местами два пункта меню (используется в списке номеров автодозвона)
void ChangeMenuItems(signed char direction)
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	22 97       	sbiw	r28, 0x02	; 2
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	89 83       	std	Y+1, r24	; 0x01
	unsigned char newItem = g_SetupItem + direction;
     df2:	90 91 c2 06 	lds	r25, 0x06C2
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	89 0f       	add	r24, r25
     dfa:	8a 83       	std	Y+2, r24	; 0x02

	strcpy(g_szInput, g_szAutoDialNumbers[newItem]);
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	33 27       	eor	r19, r19
     e02:	c9 01       	movw	r24, r18
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	e3 54       	subi	r30, 0x43	; 67
     e0c:	fc 4f       	sbci	r31, 0xFC	; 252
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 e2       	ldi	r24, 0x22	; 34
     e14:	96 e0       	ldi	r25, 0x06	; 6
     e16:	0e 94 30 4f 	call	0x9e60 <strcpy>

	//  если этот пункт списка содержит пустой номер, то корректируем номер номера...
	if ('.' == g_szInput[1])
     e1a:	80 91 23 06 	lds	r24, 0x0623
     e1e:	8e 32       	cpi	r24, 0x2E	; 46
     e20:	29 f4       	brne	.+10     	; 0xe2c <ChangeMenuItems+0x50>
		g_szInput[0] = 0x31 + g_SetupItem;
     e22:	80 91 c2 06 	lds	r24, 0x06C2
     e26:	8f 5c       	subi	r24, 0xCF	; 207
     e28:	80 93 22 06 	sts	0x0622, r24

	strcpy(g_szAutoDialNumbers[newItem],
     e2c:	80 91 c2 06 	lds	r24, 0x06C2
     e30:	28 2f       	mov	r18, r24
     e32:	33 27       	eor	r19, r19
     e34:	c9 01       	movw	r24, r18
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	dc 01       	movw	r26, r24
     e3c:	a3 54       	subi	r26, 0x43	; 67
     e3e:	bc 4f       	sbci	r27, 0xFC	; 252
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	33 27       	eor	r19, r19
     e46:	c9 01       	movw	r24, r18
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	e3 54       	subi	r30, 0x43	; 67
     e50:	fc 4f       	sbci	r31, 0xFC	; 252
     e52:	6d 91       	ld	r22, X+
     e54:	7c 91       	ld	r23, X
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	0e 94 30 4f 	call	0x9e60 <strcpy>
		g_szAutoDialNumbers[g_SetupItem]);

	//  без этих двух ифов была возможна ситуация, когда путем передвига и
	//  редактирования номеров получались одинаковые строки 2..... и 2......,
	//  находящиеся в разных местах списка
	if ('.' == g_szAutoDialNumbers[newItem][1])
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	33 27       	eor	r19, r19
     e64:	c9 01       	movw	r24, r18
     e66:	82 0f       	add	r24, r18
     e68:	93 1f       	adc	r25, r19
     e6a:	fc 01       	movw	r30, r24
     e6c:	e3 54       	subi	r30, 0x43	; 67
     e6e:	fc 4f       	sbci	r31, 0xFC	; 252
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	fc 01       	movw	r30, r24
     e76:	31 96       	adiw	r30, 0x01	; 1
     e78:	80 81       	ld	r24, Z
     e7a:	8e 32       	cpi	r24, 0x2E	; 46
     e7c:	79 f4       	brne	.+30     	; 0xe9c <ChangeMenuItems+0xc0>
		g_szAutoDialNumbers[newItem][0] = 0x31 + newItem;
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	33 27       	eor	r19, r19
     e84:	c9 01       	movw	r24, r18
     e86:	82 0f       	add	r24, r18
     e88:	93 1f       	adc	r25, r19
     e8a:	fc 01       	movw	r30, r24
     e8c:	e3 54       	subi	r30, 0x43	; 67
     e8e:	fc 4f       	sbci	r31, 0xFC	; 252
     e90:	01 90       	ld	r0, Z+
     e92:	f0 81       	ld	r31, Z
     e94:	e0 2d       	mov	r30, r0
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	8f 5c       	subi	r24, 0xCF	; 207
     e9a:	80 83       	st	Z, r24

	strcpy(g_szAutoDialNumbers[g_SetupItem], g_szInput);
     e9c:	80 91 c2 06 	lds	r24, 0x06C2
     ea0:	28 2f       	mov	r18, r24
     ea2:	33 27       	eor	r19, r19
     ea4:	c9 01       	movw	r24, r18
     ea6:	82 0f       	add	r24, r18
     ea8:	93 1f       	adc	r25, r19
     eaa:	fc 01       	movw	r30, r24
     eac:	e3 54       	subi	r30, 0x43	; 67
     eae:	fc 4f       	sbci	r31, 0xFC	; 252
     eb0:	62 e2       	ldi	r22, 0x22	; 34
     eb2:	76 e0       	ldi	r23, 0x06	; 6
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	0e 94 30 4f 	call	0x9e60 <strcpy>

	MenuAutoDialNumbers(newItem);
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	0e 94 59 08 	call	0x10b2 <MenuAutoDialNumbers>
     ec2:	22 96       	adiw	r28, 0x02	; 2
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <Menu_>:
}

void Menu_(unsigned char mode, unsigned char maxMenuItems)
{
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	22 97       	sbiw	r28, 0x02	; 2
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
	g_Mode = mode;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	80 93 f0 06 	sts	0x06F0, r24
	g_CurMenuMaxItems = maxMenuItems;
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	80 93 72 07 	sts	0x0772, r24
	MenuItemsInitAndDraw(0, 0);
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 79 08 	call	0x10f2 <MenuItemsInitAndDraw>
     f00:	22 96       	adiw	r28, 0x02	; 2
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <MainMenu>:
}

void MainMenu(void)
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	helloCounter = 0;
     f1a:	10 92 a8 06 	sts	0x06A8, r1
	g_Mode = MD_SETUP;
     f1e:	8b e0       	ldi	r24, 0x0B	; 11
     f20:	80 93 f0 06 	sts	0x06F0, r24
	g_CurMenuMaxItems = MAX_MAIN_SETUP_ITEMS;
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	80 93 72 07 	sts	0x0772, r24
	MenuItemsInitAndDraw(g_oldSetupFirstLine, g_oldSetupCurItem);
     f2a:	60 91 96 06 	lds	r22, 0x0696
     f2e:	80 91 0d 07 	lds	r24, 0x070D
     f32:	0e 94 79 08 	call	0x10f2 <MenuItemsInitAndDraw>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <MenuSensors>:
}

void MenuSensors(unsigned char SetupFirstLine, unsigned char SetupCurItem)
{
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	22 97       	sbiw	r28, 0x02	; 2
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	6a 83       	std	Y+2, r22	; 0x02
	g_Mode = MD_SENSORS;
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	80 93 f0 06 	sts	0x06F0, r24
	g_CurMenuMaxItems = MAX_SENSORS_ITEMS;
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	80 93 72 07 	sts	0x0772, r24
	//g_GalkaPunkt = SEN_POLL;

	MenuItemsInitAndDraw(SetupFirstLine, SetupCurItem);
     f60:	6a 81       	ldd	r22, Y+2	; 0x02
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	0e 94 79 08 	call	0x10f2 <MenuItemsInitAndDraw>
     f68:	22 96       	adiw	r28, 0x02	; 2
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <MenuList>:
}

void MenuList(void)
{	//  список устройств( Устр 1, Устр 2) и т.д.
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	Menu_(MD_SETUP_SENSORS_LIST, MAX_DEVICE_COUNT);
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	8d e0       	ldi	r24, 0x0D	; 13
     f86:	0e 94 6a 07 	call	0xed4 <Menu_>
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <MenuSensor>:
}

void MenuSensor(void)
{	//  меню вход - один вход (или датчик) текущего устройства
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	Menu_(MD_SETUP_SENSORS_LIST_DEVICE_SENSOR, MAX_SENSOR_COUNT);
     f98:	62 e0       	ldi	r22, 0x02	; 2
     f9a:	8e e1       	ldi	r24, 0x1E	; 30
     f9c:	0e 94 6a 07 	call	0xed4 <Menu_>
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <MenuDevice>:
}

void MenuDevice(unsigned char b)
{
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	21 97       	sbiw	r28, 0x01	; 1
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	89 83       	std	Y+1, r24	; 0x01
	if (b)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	88 23       	and	r24, r24
     fc0:	f9 f0       	breq	.+62     	; 0x1000 <MenuDevice+0x5a>
	{
#ifndef 	NEWVG
		g_CurDev.adr = g_SetupItem + 3;						//  номер устройства(адрес)
#else
		g_CurDev.adr = 0;
     fc2:	10 92 dd 07 	sts	0x07DD, r1
#endif

		//  считываем из EEPROM (временно, надо получать от устройств)
		epmrbl(g_CurDev.sensorTimeout, (const char *)(EADR_DEVICE_LIST +
     fc6:	90 91 c2 06 	lds	r25, 0x06C2
     fca:	85 e1       	ldi	r24, 0x15	; 21
     fcc:	98 9f       	mul	r25, r24
     fce:	c0 01       	movw	r24, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	8d 5f       	subi	r24, 0xFD	; 253
     fd4:	9e 4f       	sbci	r25, 0xFE	; 254
     fd6:	40 e1       	ldi	r20, 0x10	; 16
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	bc 01       	movw	r22, r24
     fdc:	86 ee       	ldi	r24, 0xE6	; 230
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	0e 94 08 39 	call	0x7210 <epmrbl>
			g_SetupItem*sizeof(XDEVICE) + 3), 16);

		ClearScreen();
     fe4:	0e 94 79 29 	call	0x52f2 <ClearScreen>
#ifndef NEWVG
		if (!ConnectToDevice())
		{
			OutStr(szNetOtveta);
			OutData(0x31);
	#ifndef PROTEUS
			return;
	#endif
		}
#endif
		if (!GetCurDeviceInfo())
     fe8:	0e 94 94 32 	call	0x6528 <GetCurDeviceInfo>
     fec:	88 23       	and	r24, r24
     fee:	41 f4       	brne	.+16     	; 0x1000 <MenuDevice+0x5a>
		{
			OutStr(szNetOtveta);
     ff0:	86 e2       	ldi	r24, 0x26	; 38
     ff2:	94 e0       	ldi	r25, 0x04	; 4
     ff4:	0e 94 24 29 	call	0x5248 <OutStr>
			OutData(0x32);
     ff8:	82 e3       	ldi	r24, 0x32	; 50
     ffa:	0e 94 e7 28 	call	0x51ce <OutData>
#ifndef PROTEUS
			return;
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <MenuDevice+0x62>
#endif
		}

	}

	Menu_(MD_SETUP_SENSORS_LIST_DEVICE, MAX_DEVICE_ITEMS);
    1000:	64 e0       	ldi	r22, 0x04	; 4
    1002:	8e e0       	ldi	r24, 0x0E	; 14
    1004:	0e 94 6a 07 	call	0xed4 <Menu_>
    1008:	21 96       	adiw	r28, 0x01	; 1
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <MenuListPort>:
}

void MenuListPort(void)
{
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	//  список входов(датчиков) текущего утсройства - Вход 1, Вход 2 и т.д.
	Menu_(MD_SETUP_SENSORS_LIST_DEVICE_SENSLIST, MAX_SET_SENS_ITEMS);
    1022:	68 e0       	ldi	r22, 0x08	; 8
    1024:	84 e1       	ldi	r24, 0x14	; 20
    1026:	0e 94 6a 07 	call	0xed4 <Menu_>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <MenuTel>:
}

void MenuTel(void)
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	g_GalkaPunkt = STN_ADV_LINE_MODE;
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	80 93 59 07 	sts	0x0759, r24
	g_Galka = advancedLineMode;
    103e:	80 91 d1 06 	lds	r24, 0x06D1
    1042:	80 93 84 06 	sts	0x0684, r24
	Menu_(MD_SETUP_TEL, MAX_TELEFON_ITEMS);
    1046:	64 e0       	ldi	r22, 0x04	; 4
    1048:	8c e0       	ldi	r24, 0x0C	; 12
    104a:	0e 94 6a 07 	call	0xed4 <Menu_>
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <MenuSettings>:
}

void MenuSettings(void)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	Menu_(MD_SETUP_SETTINGS, MAX_SETTINGS_ITEMS);
    105c:	65 e0       	ldi	r22, 0x05	; 5
    105e:	8b e1       	ldi	r24, 0x1B	; 27
    1060:	0e 94 6a 07 	call	0xed4 <Menu_>
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <MenuVolume>:
}

void MenuVolume(void)
{
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	Menu_(MD_SETUP_VOLUME, MAX_VOLUME_ITEMS);
    1072:	62 e0       	ldi	r22, 0x02	; 2
    1074:	81 e1       	ldi	r24, 0x11	; 17
    1076:	0e 94 6a 07 	call	0xed4 <Menu_>
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <MenuX232>:
}

void MenuX232(unsigned char SetupFirstLine, unsigned char SetupCurItem)
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	22 97       	sbiw	r28, 0x02	; 2
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	Menu_(MD_SETUP_X232, MAX_X232_ITEMS);
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	85 e1       	ldi	r24, 0x15	; 21
    109c:	0e 94 6a 07 	call	0xed4 <Menu_>
    10a0:	22 96       	adiw	r28, 0x02	; 2
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <MenuAutoDialNumbers>:
}

void MenuAutoDialNumbers(unsigned char SetupFirstLine)
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	22 97       	sbiw	r28, 0x02	; 2
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	89 83       	std	Y+1, r24	; 0x01
	unsigned char item = 0;
    10c8:	1a 82       	std	Y+2, r1	; 0x02

	if (MAX_TEL_AUTO_DIAL_NUMBERS_ITEMS - 1 == SetupFirstLine)
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	85 30       	cpi	r24, 0x05	; 5
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <MenuAutoDialNumbers+0x26>
	{
		SetupFirstLine = MAX_TEL_AUTO_DIAL_NUMBERS_ITEMS - 2;
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	89 83       	std	Y+1, r24	; 0x01
		item = 1;				//  если получится так, что первым надо сделать последний
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	8a 83       	std	Y+2, r24	; 0x02
	}

	Menu_(MD_SETUP_TEL_AUTO_DIAL_NUMBERS, MAX_TEL_AUTO_DIAL_NUMBERS_ITEMS);
    10d8:	66 e0       	ldi	r22, 0x06	; 6
    10da:	89 e1       	ldi	r24, 0x19	; 25
    10dc:	0e 94 6a 07 	call	0xed4 <Menu_>
    10e0:	22 96       	adiw	r28, 0x02	; 2
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <MenuItemsInitAndDraw>:
}

void MenuItemsInitAndDraw(unsigned char SetupFirstLine, unsigned char SetupCurItem)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	22 97       	sbiw	r28, 0x02	; 2
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6a 83       	std	Y+2, r22	; 0x02
	g_SetupCurItem = SetupCurItem;
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 93 34 06 	sts	0x0634, r24
	g_SetupFirstLine = SetupFirstLine;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	80 93 35 06 	sts	0x0635, r24
	g_SetupItem = SetupFirstLine + SetupCurItem;
    1116:	99 81       	ldd	r25, Y+1	; 0x01
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	89 0f       	add	r24, r25
    111c:	80 93 c2 06 	sts	0x06C2, r24
	g_checkedItem = 0xFF;		//  нет отмеченых пунктов
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	80 93 09 01 	sts	0x0109, r24

	if (MD_SETUP_TEL_LINEMODE == g_Mode)
    1126:	80 91 f0 06 	lds	r24, 0x06F0
    112a:	80 31       	cpi	r24, 0x10	; 16
    112c:	31 f4       	brne	.+12     	; 0x113a <__stack+0x3b>
		g_checkedItem = eeprom_read_byte_1((void*)EADR_LINE_MODE);
    112e:	83 e1       	ldi	r24, 0x13	; 19
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    1136:	80 93 09 01 	sts	0x0109, r24

	DrawMenu();
    113a:	0e 94 35 0d 	call	0x1a6a <DrawMenu>
    113e:	22 96       	adiw	r28, 0x02	; 2
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <DrawBarInterface>:
}


void DrawBarInterface(void)
{
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
	ClearScreen();
    1158:	0e 94 79 29 	call	0x52f2 <ClearScreen>
	OutStr((char*)pMasItems[g_SetupCurItem]);	//TODO: потенциальная ошибка
    115c:	80 91 34 06 	lds	r24, 0x0634
    1160:	28 2f       	mov	r18, r24
    1162:	33 27       	eor	r19, r19
    1164:	c9 01       	movw	r24, r18
    1166:	28 0f       	add	r18, r24
    1168:	39 1f       	adc	r19, r25
    116a:	80 91 d9 06 	lds	r24, 0x06D9
    116e:	90 91 da 06 	lds	r25, 0x06DA
    1172:	f9 01       	movw	r30, r18
    1174:	e8 0f       	add	r30, r24
    1176:	f9 1f       	adc	r31, r25
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	0e 94 24 29 	call	0x5248 <OutStr>
	g_curBarValue = eeprom_read_byte_1((void*)(tmp + g_SetupCurItem));
    1180:	80 91 7e 06 	lds	r24, 0x067E
    1184:	28 2f       	mov	r18, r24
    1186:	33 27       	eor	r19, r19
    1188:	80 91 34 06 	lds	r24, 0x0634
    118c:	99 27       	eor	r25, r25
    118e:	82 0f       	add	r24, r18
    1190:	93 1f       	adc	r25, r19
    1192:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    1196:	80 93 10 07 	sts	0x0710, r24

	UpdateBarInterface();
    119a:	0e 94 00 09 	call	0x1200 <UpdateBarInterface>
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <DrawVolume>:
}

void DrawVolume(void)
{
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	g_Mode = MD_SETUP_VOLUME_DINAMIC + g_SetupCurItem;
    11ac:	80 91 34 06 	lds	r24, 0x0634
    11b0:	8e 5e       	subi	r24, 0xEE	; 238
    11b2:	80 93 f0 06 	sts	0x06F0, r24
	tmp = EADR_VOLUME_DINAMIC;
    11b6:	84 e1       	ldi	r24, 0x14	; 20
    11b8:	80 93 7e 06 	sts	0x067E, r24
	pMasItems = (unsigned char**)&g_szVolumeItems;
    11bc:	84 ee       	ldi	r24, 0xE4	; 228
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	90 93 da 06 	sts	0x06DA, r25
    11c4:	80 93 d9 06 	sts	0x06D9, r24

	DrawBarInterface();
    11c8:	0e 94 a8 08 	call	0x1150 <DrawBarInterface>
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <DrawInterval>:
}

void DrawInterval(void)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	g_Mode = MD_SETUP_X232_TIMEOUT + g_SetupCurItem;
    11da:	80 91 34 06 	lds	r24, 0x0634
    11de:	8a 5e       	subi	r24, 0xEA	; 234
    11e0:	80 93 f0 06 	sts	0x06F0, r24
	tmp = EADR_X232_TIMEOUT;
    11e4:	86 e1       	ldi	r24, 0x16	; 22
    11e6:	80 93 7e 06 	sts	0x067E, r24
	pMasItems = (unsigned char**)&g_szX232Items;
    11ea:	88 e0       	ldi	r24, 0x08	; 8
    11ec:	93 e0       	ldi	r25, 0x03	; 3
    11ee:	90 93 da 06 	sts	0x06DA, r25
    11f2:	80 93 d9 06 	sts	0x06D9, r24

	DrawBarInterface();
    11f6:	0e 94 a8 08 	call	0x1150 <DrawBarInterface>
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <UpdateBarInterface>:
}

void UpdateBarInterface(void)
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	21 97       	sbiw	r28, 0x01	; 1
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
	char k;

	ClearInput();
    1214:	0e 94 98 0b 	call	0x1730 <ClearInput>

	if (g_curBarValue > LINE_LEN)
    1218:	80 91 10 07 	lds	r24, 0x0710
    121c:	81 31       	cpi	r24, 0x11	; 17
    121e:	18 f0       	brcs	.+6      	; 0x1226 <UpdateBarInterface+0x26>
		g_curBarValue = LINE_LEN;
    1220:	80 e1       	ldi	r24, 0x10	; 16
    1222:	80 93 10 07 	sts	0x0710, r24

	if ((MD_SETUP_VOLUME_TELEFON == g_Mode) ||
    1226:	80 91 f0 06 	lds	r24, 0x06F0
    122a:	83 31       	cpi	r24, 0x13	; 19
    122c:	29 f0       	breq	.+10     	; 0x1238 <UpdateBarInterface+0x38>
    122e:	80 91 f0 06 	lds	r24, 0x06F0
    1232:	82 31       	cpi	r24, 0x12	; 18
    1234:	09 f0       	breq	.+2      	; 0x1238 <UpdateBarInterface+0x38>
    1236:	15 c0       	rjmp	.+42     	; 0x1262 <UpdateBarInterface+0x62>
		(MD_SETUP_VOLUME_DINAMIC == g_Mode))
	{
		SetCaret(LINE_1_START_POS + 11);
    1238:	8b e0       	ldi	r24, 0x0B	; 11
    123a:	0e 94 47 29 	call	0x528e <SetCaret>
		OutStr(itoa((100 / 16) * g_curBarValue, g_szInput, 10));
    123e:	90 91 10 07 	lds	r25, 0x0710
    1242:	86 e0       	ldi	r24, 0x06	; 6
    1244:	98 9f       	mul	r25, r24
    1246:	c0 01       	movw	r24, r0
    1248:	11 24       	eor	r1, r1
    124a:	4a e0       	ldi	r20, 0x0A	; 10
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	62 e2       	ldi	r22, 0x22	; 34
    1250:	76 e0       	ldi	r23, 0x06	; 6
    1252:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    1256:	0e 94 24 29 	call	0x5248 <OutStr>
		OutData('%');
    125a:	85 e2       	ldi	r24, 0x25	; 37
    125c:	0e 94 e7 28 	call	0x51ce <OutData>
    1260:	17 c0       	rjmp	.+46     	; 0x1290 <UpdateBarInterface+0x90>
	}else
	{
		SetCaret(LINE_1_START_POS + 10);
    1262:	8a e0       	ldi	r24, 0x0A	; 10
    1264:	0e 94 47 29 	call	0x528e <SetCaret>
		OutStr(itoa(g_curBarValue * 100, g_szInput, 10));
    1268:	90 91 10 07 	lds	r25, 0x0710
    126c:	84 e6       	ldi	r24, 0x64	; 100
    126e:	98 9f       	mul	r25, r24
    1270:	c0 01       	movw	r24, r0
    1272:	11 24       	eor	r1, r1
    1274:	4a e0       	ldi	r20, 0x0A	; 10
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	62 e2       	ldi	r22, 0x22	; 34
    127a:	76 e0       	ldi	r23, 0x06	; 6
    127c:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    1280:	0e 94 24 29 	call	0x5248 <OutStr>
		OutData(0xBC);
    1284:	8c eb       	ldi	r24, 0xBC	; 188
    1286:	0e 94 e7 28 	call	0x51ce <OutData>
		OutData(0x63);
    128a:	83 e6       	ldi	r24, 0x63	; 99
    128c:	0e 94 e7 28 	call	0x51ce <OutData>
	}

	OutData(' ');				//  стирает предыдущее значение
    1290:	80 e2       	ldi	r24, 0x20	; 32
    1292:	0e 94 e7 28 	call	0x51ce <OutData>
	if (!g_curBarValue)
    1296:	80 91 10 07 	lds	r24, 0x0710
    129a:	88 23       	and	r24, r24
    129c:	19 f4       	brne	.+6      	; 0x12a4 <UpdateBarInterface+0xa4>
		OutData(' ');			//  иначе остается буква 's' от 100ms
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	0e 94 e7 28 	call	0x51ce <OutData>

	SetCaret(LINE_2_START_POS);
    12a4:	80 e4       	ldi	r24, 0x40	; 64
    12a6:	0e 94 47 29 	call	0x528e <SetCaret>

	for (k = 0; k < LINE_LEN; k++)
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	80 31       	cpi	r24, 0x10	; 16
    12b0:	b4 f4       	brge	.+44     	; 0x12de <UpdateBarInterface+0xde>
	{
		if (k < g_curBarValue)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	33 27       	eor	r19, r19
    12b8:	27 fd       	sbrc	r18, 7
    12ba:	30 95       	com	r19
    12bc:	80 91 10 07 	lds	r24, 0x0710
    12c0:	99 27       	eor	r25, r25
    12c2:	28 17       	cp	r18, r24
    12c4:	39 07       	cpc	r19, r25
    12c6:	24 f4       	brge	.+8      	; 0x12d0 <UpdateBarInterface+0xd0>
			OutData(ITEM_CHECKED);
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	0e 94 e7 28 	call	0x51ce <OutData>
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <UpdateBarInterface+0xd6>
		else
			OutData(ITEM_UNCHECKED);
    12d0:	8f ee       	ldi	r24, 0xEF	; 239
    12d2:	0e 94 e7 28 	call	0x51ce <OutData>
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	e7 cf       	rjmp	.-50     	; 0x12ac <UpdateBarInterface+0xac>
    12de:	21 96       	adiw	r28, 0x01	; 1
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <PrepareToMode>:
	}
}

void PrepareToMode(unsigned char mode)
{
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	24 97       	sbiw	r28, 0x04	; 4
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	89 83       	std	Y+1, r24	; 0x01
	unsigned char br, br1, port;
	g_Mode = mode;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	80 93 f0 06 	sts	0x06F0, r24
	ClearScreen();
    130c:	0e 94 79 29 	call	0x52f2 <ClearScreen>

	if (mode < MAX_MODE_ITEMS)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	81 32       	cpi	r24, 0x21	; 33
    1314:	68 f4       	brcc	.+26     	; 0x1330 <PrepareToMode+0x40>
		OutStr((char*)g_szModes[mode]);		//TODO: потенциальная ошибка
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	33 27       	eor	r19, r19
    131c:	c9 01       	movw	r24, r18
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	fc 01       	movw	r30, r24
    1324:	ec 51       	subi	r30, 0x1C	; 28
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	0e 94 24 29 	call	0x5248 <OutStr>

	ClearInput();
    1330:	0e 94 98 0b 	call	0x1730 <ClearInput>

	if (MD_SETUP_TIME == mode)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	31 f4       	brne	.+12     	; 0x1346 <PrepareToMode+0x56>
	{	//  тут надо считать текущее значение времени, чтобы его редактировать
		UpdateTimePane();
    133a:	0e 94 98 2c 	call	0x5930 <UpdateTimePane>
		ReadStrFromScreen(g_szInput);
    133e:	82 e2       	ldi	r24, 0x22	; 34
    1340:	96 e0       	ldi	r25, 0x06	; 6
    1342:	0e 94 07 2a 	call	0x540e <ReadStrFromScreen>
	}
	if (MD_HELLO == mode)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	83 30       	cpi	r24, 0x03	; 3
    134a:	59 f4       	brne	.+22     	; 0x1362 <PrepareToMode+0x72>
	{
		HideCaret();
    134c:	0e 94 91 29 	call	0x5322 <HideCaret>
		g_ShowTime = TRUE;
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	80 93 f7 06 	sts	0x06F7, r24
		if (g_canShowTime)
    1356:	80 91 c0 06 	lds	r24, 0x06C0
    135a:	88 23       	and	r24, r24
    135c:	11 f0       	breq	.+4      	; 0x1362 <PrepareToMode+0x72>
			UpdateTimePane();
    135e:	0e 94 98 2c 	call	0x5930 <UpdateTimePane>
	}
	if (MD_SETUP_SENSORS_NEWBAUDRATE == mode)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	86 30       	cpi	r24, 0x06	; 6
    1366:	41 f5       	brne	.+80     	; 0x13b8 <PrepareToMode+0xc8>
	{
		br = eeprom_read_byte_1((unsigned char*)EADR_USART_BAUDRATE);
    1368:	81 e1       	ldi	r24, 0x11	; 17
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    1370:	8a 83       	std	Y+2, r24	; 0x02
		if (br >= 7)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	87 30       	cpi	r24, 0x07	; 7
    1376:	20 f0       	brcs	.+8      	; 0x1380 <PrepareToMode+0x90>
			OutData(0x30);
    1378:	80 e3       	ldi	r24, 0x30	; 48
    137a:	0e 94 e7 28 	call	0x51ce <OutData>
    137e:	19 c0       	rjmp	.+50     	; 0x13b2 <PrepareToMode+0xc2>
		else
			OutStr(strcat(itoa(BaudRates[br] << 3, g_szInput, 10), "00"));
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	99 27       	eor	r25, r25
    1384:	fc 01       	movw	r30, r24
    1386:	ef 5f       	subi	r30, 0xFF	; 255
    1388:	fb 4f       	sbci	r31, 0xFB	; 251
    138a:	80 81       	ld	r24, Z
    138c:	99 27       	eor	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	4a e0       	ldi	r20, 0x0A	; 10
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	62 e2       	ldi	r22, 0x22	; 34
    13a0:	76 e0       	ldi	r23, 0x06	; 6
    13a2:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    13a6:	61 e3       	ldi	r22, 0x31	; 49
    13a8:	74 e0       	ldi	r23, 0x04	; 4
    13aa:	0e 94 1b 4f 	call	0x9e36 <strcat>
    13ae:	0e 94 24 29 	call	0x5248 <OutStr>

		OutData(')');
    13b2:	89 e2       	ldi	r24, 0x29	; 41
    13b4:	0e 94 e7 28 	call	0x51ce <OutData>
	}
	if (MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT == mode)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	87 30       	cpi	r24, 0x07	; 7
    13bc:	79 f4       	brne	.+30     	; 0x13dc <PrepareToMode+0xec>
	{
		OutStr(itoa(g_CurDev.ohrTimeout, g_szInput, 10));
    13be:	4a e0       	ldi	r20, 0x0A	; 10
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	62 e2       	ldi	r22, 0x22	; 34
    13c4:	76 e0       	ldi	r23, 0x06	; 6
    13c6:	80 91 f7 07 	lds	r24, 0x07F7
    13ca:	90 91 f8 07 	lds	r25, 0x07F8
    13ce:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    13d2:	0e 94 24 29 	call	0x5248 <OutStr>
		OutData(')');
    13d6:	89 e2       	ldi	r24, 0x29	; 41
    13d8:	0e 94 e7 28 	call	0x51ce <OutData>
	}

	ShowCaret();
    13dc:	0e 94 87 29 	call	0x530e <ShowCaret>

	SetCaret(LINE_2_START_POS);
    13e0:	80 e4       	ldi	r24, 0x40	; 64
    13e2:	0e 94 47 29 	call	0x528e <SetCaret>

	if (MD_SETUP_SENSORS_LIST_DEVICE_SETPORT == mode)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	88 30       	cpi	r24, 0x08	; 8
    13ea:	09 f0       	breq	.+2      	; 0x13ee <PrepareToMode+0xfe>
    13ec:	c8 c0       	rjmp	.+400    	; 0x157e <PrepareToMode+0x28e>
	{
		HideCaret();
    13ee:	0e 94 91 29 	call	0x5322 <HideCaret>

		//  режим установки назначений портов
		br = '+';
    13f2:	8b e2       	ldi	r24, 0x2B	; 43
    13f4:	8a 83       	std	Y+2, r24	; 0x02
		br1 = '-';
    13f6:	8d e2       	ldi	r24, 0x2D	; 45
    13f8:	8b 83       	std	Y+3, r24	; 0x03
		port = g_CurDev.ports;
    13fa:	80 91 df 07 	lds	r24, 0x07DF
    13fe:	8c 83       	std	Y+4, r24	; 0x04

		if (1 == g_CurDev.mode)
    1400:	80 91 e5 07 	lds	r24, 0x07E5
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	41 f4       	brne	.+16     	; 0x1418 <PrepareToMode+0x128>
		{	//  режим мониторинга
			br = 0xFF;
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	8a 83       	std	Y+2, r24	; 0x02
			br1 = 0xEF;
    140c:	8f ee       	ldi	r24, 0xEF	; 239
    140e:	8b 83       	std	Y+3, r24	; 0x03
			port = g_CurDev.ports_state;
    1410:	80 91 e0 07 	lds	r24, 0x07E0
    1414:	8c 83       	std	Y+4, r24	; 0x04
    1416:	7a c0       	rjmp	.+244    	; 0x150c <PrepareToMode+0x21c>
		} else
		if (2 == g_CurDev.mode)
    1418:	80 91 e5 07 	lds	r24, 0x07E5
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	09 f0       	breq	.+2      	; 0x1422 <PrepareToMode+0x132>
    1420:	75 c0       	rjmp	.+234    	; 0x150c <PrepareToMode+0x21c>
		{
			ClearScreen();
    1422:	0e 94 79 29 	call	0x52f2 <ClearScreen>

			for (mode = 0; mode < 4; mode++)
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	a0 f5       	brcc	.+104    	; 0x1496 <PrepareToMode+0x1a6>
			{
				SetCaret(LINE_1_START_POS + 4*mode);
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	99 27       	eor	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0e 94 47 29 	call	0x528e <SetCaret>
				if (g_CurDev.ports & _BV(mode))
    143e:	80 91 df 07 	lds	r24, 0x07DF
    1442:	28 2f       	mov	r18, r24
    1444:	33 27       	eor	r19, r19
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	99 27       	eor	r25, r25
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <PrepareToMode+0x160>
    144c:	35 95       	asr	r19
    144e:	27 95       	ror	r18
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <PrepareToMode+0x15c>
    1454:	c9 01       	movw	r24, r18
    1456:	81 70       	andi	r24, 0x01	; 1
    1458:	90 70       	andi	r25, 0x00	; 0
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	a1 f0       	breq	.+40     	; 0x1486 <PrepareToMode+0x196>
					OutStr(itoa(dacRes[mode], g_szInput, 10));
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	28 2f       	mov	r18, r24
    1462:	33 27       	eor	r19, r19
    1464:	c9 01       	movw	r24, r18
    1466:	82 0f       	add	r24, r18
    1468:	93 1f       	adc	r25, r19
    146a:	fc 01       	movw	r30, r24
    146c:	e2 5a       	subi	r30, 0xA2	; 162
    146e:	f8 4f       	sbci	r31, 0xF8	; 248
    1470:	4a e0       	ldi	r20, 0x0A	; 10
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	62 e2       	ldi	r22, 0x22	; 34
    1476:	76 e0       	ldi	r23, 0x06	; 6
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    1480:	0e 94 24 29 	call	0x5248 <OutStr>
    1484:	04 c0       	rjmp	.+8      	; 0x148e <PrepareToMode+0x19e>
				else
					OutStr("XXX");
    1486:	84 e3       	ldi	r24, 0x34	; 52
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	0e 94 24 29 	call	0x5248 <OutStr>
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	c9 cf       	rjmp	.-110    	; 0x1428 <PrepareToMode+0x138>
			}
			for (mode = 0; mode < 4; mode++)
    1496:	19 82       	std	Y+1, r1	; 0x01
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <PrepareToMode+0x1b0>
    149e:	2b c1       	rjmp	.+598    	; 0x16f6 <PrepareToMode+0x406>
			{
				SetCaret(LINE_2_START_POS + 4*mode);
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	99 27       	eor	r25, r25
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	80 5c       	subi	r24, 0xC0	; 192
    14ae:	0e 94 47 29 	call	0x528e <SetCaret>
				if (g_CurDev.ports & _BV(mode + 4))
    14b2:	80 91 df 07 	lds	r24, 0x07DF
    14b6:	28 2f       	mov	r18, r24
    14b8:	33 27       	eor	r19, r19
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	99 27       	eor	r25, r25
    14be:	04 96       	adiw	r24, 0x04	; 4
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <PrepareToMode+0x1d6>
    14c2:	35 95       	asr	r19
    14c4:	27 95       	ror	r18
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <PrepareToMode+0x1d2>
    14ca:	c9 01       	movw	r24, r18
    14cc:	81 70       	andi	r24, 0x01	; 1
    14ce:	90 70       	andi	r25, 0x00	; 0
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	a1 f0       	breq	.+40     	; 0x14fc <PrepareToMode+0x20c>
					OutStr(itoa(dacRes[mode + 4], g_szInput, 10));
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	33 27       	eor	r19, r19
    14da:	c9 01       	movw	r24, r18
    14dc:	82 0f       	add	r24, r18
    14de:	93 1f       	adc	r25, r19
    14e0:	fc 01       	movw	r30, r24
    14e2:	ea 59       	subi	r30, 0x9A	; 154
    14e4:	f8 4f       	sbci	r31, 0xF8	; 248
    14e6:	4a e0       	ldi	r20, 0x0A	; 10
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	62 e2       	ldi	r22, 0x22	; 34
    14ec:	76 e0       	ldi	r23, 0x06	; 6
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    14f6:	0e 94 24 29 	call	0x5248 <OutStr>
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <PrepareToMode+0x214>
				else
					OutStr("XXX");
    14fc:	84 e3       	ldi	r24, 0x34	; 52
    14fe:	94 e0       	ldi	r25, 0x04	; 4
    1500:	0e 94 24 29 	call	0x5248 <OutStr>
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	c6 cf       	rjmp	.-116    	; 0x1498 <PrepareToMode+0x1a8>
			}
			return;
		}

		for (mode = 0; mode < 8; mode++)
    150c:	19 82       	std	Y+1, r1	; 0x01
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 30       	cpi	r24, 0x08	; 8
    1512:	a8 f5       	brcc	.+106    	; 0x157e <PrepareToMode+0x28e>
		{
			if ((1 == g_CurDev.mode) && (!(g_CurDev.ports & _BV(mode))))
    1514:	80 91 e5 07 	lds	r24, 0x07E5
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	a1 f4       	brne	.+40     	; 0x1544 <PrepareToMode+0x254>
    151c:	80 91 df 07 	lds	r24, 0x07DF
    1520:	28 2f       	mov	r18, r24
    1522:	33 27       	eor	r19, r19
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	99 27       	eor	r25, r25
    1528:	02 c0       	rjmp	.+4      	; 0x152e <PrepareToMode+0x23e>
    152a:	35 95       	asr	r19
    152c:	27 95       	ror	r18
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <PrepareToMode+0x23a>
    1532:	c9 01       	movw	r24, r18
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	21 f4       	brne	.+8      	; 0x1544 <PrepareToMode+0x254>
				OutData('X');
    153c:	88 e5       	ldi	r24, 0x58	; 88
    153e:	0e 94 e7 28 	call	0x51ce <OutData>
    1542:	16 c0       	rjmp	.+44     	; 0x1570 <PrepareToMode+0x280>
			else
			{
				if (port & (1 << mode))
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	28 2f       	mov	r18, r24
    1548:	33 27       	eor	r19, r19
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	99 27       	eor	r25, r25
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <PrepareToMode+0x264>
    1550:	35 95       	asr	r19
    1552:	27 95       	ror	r18
    1554:	8a 95       	dec	r24
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <PrepareToMode+0x260>
    1558:	c9 01       	movw	r24, r18
    155a:	81 70       	andi	r24, 0x01	; 1
    155c:	90 70       	andi	r25, 0x00	; 0
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	21 f0       	breq	.+8      	; 0x156a <PrepareToMode+0x27a>
					OutData(br);
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	0e 94 e7 28 	call	0x51ce <OutData>
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <PrepareToMode+0x280>
				else
					OutData(br1);
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	0e 94 e7 28 	call	0x51ce <OutData>
			}

			OutData(32);
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	0e 94 e7 28 	call	0x51ce <OutData>
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	c8 cf       	rjmp	.-112    	; 0x150e <PrepareToMode+0x21e>
		}
	}//TODO: werwerwer
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == mode)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	89 30       	cpi	r24, 0x09	; 9
    1582:	09 f0       	breq	.+2      	; 0x1586 <PrepareToMode+0x296>
    1584:	5c c0       	rjmp	.+184    	; 0x163e <PrepareToMode+0x34e>
	{	//  выводим два текущих значения

		//  включаем опрос датчиков - это даст нам вызов AdjustLimits
		//  и в нем значения Uпит и пр.
		builtinSensorsPollInterval = g_BuiltSensorsPollInterval;
    1586:	80 91 bf 06 	lds	r24, 0x06BF
    158a:	80 93 70 07 	sts	0x0770, r24
		HFON;
    158e:	80 91 38 00 	lds	r24, 0x0038
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	80 93 38 00 	sts	0x0038, r24
#ifdef NEWVG
		ClearScreen();
    1598:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		OutStr("\x42\x65\x70\x20");		//  Вер
    159c:	88 e3       	ldi	r24, 0x38	; 56
    159e:	94 e0       	ldi	r25, 0x04	; 4
    15a0:	0e 94 24 29 	call	0x5248 <OutStr>
		OutStr(itoa(sensorsTopLimit2, g_szInput, 10));
    15a4:	4a e0       	ldi	r20, 0x0A	; 10
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	62 e2       	ldi	r22, 0x22	; 34
    15aa:	76 e0       	ldi	r23, 0x06	; 6
    15ac:	80 91 ac 06 	lds	r24, 0x06AC
    15b0:	90 91 ad 06 	lds	r25, 0x06AD
    15b4:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    15b8:	0e 94 24 29 	call	0x5248 <OutStr>
		SetCaret(LINE_1_START_POS + 9);
    15bc:	89 e0       	ldi	r24, 0x09	; 9
    15be:	0e 94 47 29 	call	0x528e <SetCaret>
		OutStr("\x48\xB8\xB7\x20");		//  Низ
    15c2:	8d e3       	ldi	r24, 0x3D	; 61
    15c4:	94 e0       	ldi	r25, 0x04	; 4
    15c6:	0e 94 24 29 	call	0x5248 <OutStr>
		OutStr(itoa(sensorsBottomLimit2, g_szInput, 10));
    15ca:	4a e0       	ldi	r20, 0x0A	; 10
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	62 e2       	ldi	r22, 0x22	; 34
    15d0:	76 e0       	ldi	r23, 0x06	; 6
    15d2:	80 91 ec 06 	lds	r24, 0x06EC
    15d6:	90 91 ed 06 	lds	r25, 0x06ED
    15da:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    15de:	0e 94 24 29 	call	0x5248 <OutStr>
		SetCaret(LINE_2_START_POS);
    15e2:	80 e4       	ldi	r24, 0x40	; 64
    15e4:	0e 94 47 29 	call	0x528e <SetCaret>
		OutStr("\xA8\xB8\xBF\x20");		//  Пит
    15e8:	82 e4       	ldi	r24, 0x42	; 66
    15ea:	94 e0       	ldi	r25, 0x04	; 4
    15ec:	0e 94 24 29 	call	0x5248 <OutStr>
		OutStr(itoa((unsigned short)pwr, g_szInput, 10));
    15f0:	4a e0       	ldi	r20, 0x0A	; 10
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	62 e2       	ldi	r22, 0x22	; 34
    15f6:	76 e0       	ldi	r23, 0x06	; 6
    15f8:	80 91 aa 06 	lds	r24, 0x06AA
    15fc:	90 91 ab 06 	lds	r25, 0x06AB
    1600:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    1604:	0e 94 24 29 	call	0x5248 <OutStr>
		SetCaret(LINE_2_START_POS + 9);
    1608:	89 e4       	ldi	r24, 0x49	; 73
    160a:	0e 94 47 29 	call	0x528e <SetCaret>
		OutStr("\xE0\x61\xBF\x20");		//  Дат
    160e:	87 e4       	ldi	r24, 0x47	; 71
    1610:	94 e0       	ldi	r25, 0x04	; 4
    1612:	0e 94 24 29 	call	0x5248 <OutStr>
		OutStr(itoa(dacRes[g_CurDev.curSensor], g_szInput, 10));
    1616:	80 91 f6 07 	lds	r24, 0x07F6
    161a:	28 2f       	mov	r18, r24
    161c:	33 27       	eor	r19, r19
    161e:	c9 01       	movw	r24, r18
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	fc 01       	movw	r30, r24
    1626:	e2 5a       	subi	r30, 0xA2	; 162
    1628:	f8 4f       	sbci	r31, 0xF8	; 248
    162a:	4a e0       	ldi	r20, 0x0A	; 10
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	62 e2       	ldi	r22, 0x22	; 34
    1630:	76 e0       	ldi	r23, 0x06	; 6
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    163a:	0e 94 24 29 	call	0x5248 <OutStr>
#else
		OutStr(itoa(g_CurDev.threshold1, g_szInput, 10));
		SetCaret(LINE_2_START_POS + 7);
		OutStr(itoa(g_CurDev.threshold2, g_szInput + 7, 10));

		//  готовимся ко вводу новых значений
		//  если в момент нахождения каретки под старым значением будет
		//  нажата цифровая кнопка, старое исчезнет и будет считаться, что вводится
		//  новое значение. Если на первом значении будет нажат ентер, каретка
		//  перейдет ко второму, если и там ентер - ввод закончен
		SetCaret(LINE_2_START_POS);
#endif
	}
	if (MD_SETUP_X232_PACKET == mode)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 31       	cpi	r24, 0x18	; 24
    1642:	09 f4       	brne	.+2      	; 0x1646 <PrepareToMode+0x356>
    1644:	4f c0       	rjmp	.+158    	; 0x16e4 <PrepareToMode+0x3f4>
	{
	}else
	if ((MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode) /*|| (MD_REDUCE_EDIT_ == mode)*/)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	8a 31       	cpi	r24, 0x1A	; 26
    164a:	51 f5       	brne	.+84     	; 0x16a0 <PrepareToMode+0x3b0>
	{
		SetCaret(LINE_2_START_POS);
    164c:	80 e4       	ldi	r24, 0x40	; 64
    164e:	0e 94 47 29 	call	0x528e <SetCaret>
		if (g_szAutoDialNumbers[g_SetupItem][1] != '.')
    1652:	80 91 c2 06 	lds	r24, 0x06C2
    1656:	28 2f       	mov	r18, r24
    1658:	33 27       	eor	r19, r19
    165a:	c9 01       	movw	r24, r18
    165c:	82 0f       	add	r24, r18
    165e:	93 1f       	adc	r25, r19
    1660:	fc 01       	movw	r30, r24
    1662:	e3 54       	subi	r30, 0x43	; 67
    1664:	fc 4f       	sbci	r31, 0xFC	; 252
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	fc 01       	movw	r30, r24
    166c:	31 96       	adiw	r30, 0x01	; 1
    166e:	80 81       	ld	r24, Z
    1670:	8e 32       	cpi	r24, 0x2E	; 46
    1672:	c1 f1       	breq	.+112    	; 0x16e4 <PrepareToMode+0x3f4>
		{
			OutStr(strcpy(g_szInput, g_szAutoDialNumbers[g_SetupItem]));
    1674:	80 91 c2 06 	lds	r24, 0x06C2
    1678:	28 2f       	mov	r18, r24
    167a:	33 27       	eor	r19, r19
    167c:	c9 01       	movw	r24, r18
    167e:	82 0f       	add	r24, r18
    1680:	93 1f       	adc	r25, r19
    1682:	fc 01       	movw	r30, r24
    1684:	e3 54       	subi	r30, 0x43	; 67
    1686:	fc 4f       	sbci	r31, 0xFC	; 252
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 e2       	ldi	r24, 0x22	; 34
    168e:	96 e0       	ldi	r25, 0x06	; 6
    1690:	0e 94 30 4f 	call	0x9e60 <strcpy>
    1694:	0e 94 24 29 	call	0x5248 <OutStr>
			SetCaret(LINE_2_START_POS);
    1698:	80 e4       	ldi	r24, 0x40	; 64
    169a:	0e 94 47 29 	call	0x528e <SetCaret>
    169e:	22 c0       	rjmp	.+68     	; 0x16e4 <PrepareToMode+0x3f4>
		}
	}else
	if (MD_SETUP_SETTINGS_RAM == mode)
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	8c 31       	cpi	r24, 0x1C	; 28
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <PrepareToMode+0x3b8>
    16a6:	1e c0       	rjmp	.+60     	; 0x16e4 <PrepareToMode+0x3f4>
	{
	}else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 == mode)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	8f 31       	cpi	r24, 0x1F	; 31
    16ac:	d9 f4       	brne	.+54     	; 0x16e4 <PrepareToMode+0x3f4>
	{
		OutStr(ltoa(g_CurDev.sensorTimeout[g_CurDev.curSensor], g_szInput, 10));
    16ae:	80 91 f6 07 	lds	r24, 0x07F6
    16b2:	28 2f       	mov	r18, r24
    16b4:	33 27       	eor	r19, r19
    16b6:	c9 01       	movw	r24, r18
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	fc 01       	movw	r30, r24
    16be:	ea 51       	subi	r30, 0x1A	; 26
    16c0:	f8 4f       	sbci	r31, 0xF8	; 248
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	aa 27       	eor	r26, r26
    16c8:	bb 27       	eor	r27, r27
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	42 e2       	ldi	r20, 0x22	; 34
    16d0:	56 e0       	ldi	r21, 0x06	; 6
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 8b 4f 	call	0x9f16 <ltoa>
    16da:	0e 94 24 29 	call	0x5248 <OutStr>
		SetCaret(LINE_2_START_POS);
    16de:	80 e4       	ldi	r24, 0x40	; 64
    16e0:	0e 94 47 29 	call	0x528e <SetCaret>
	}

	if ((MD_HELLO == mode) || (MD_OHRANA == mode))
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	21 f0       	breq	.+8      	; 0x16f2 <PrepareToMode+0x402>
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <PrepareToMode+0x402>
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <PrepareToMode+0x406>
		HideCaret();
    16f2:	0e 94 91 29 	call	0x5322 <HideCaret>
    16f6:	24 96       	adiw	r28, 0x04	; 4
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <Setup>:
}

//  вход в режим MD_SETUP_WAITPSWD
void Setup(void)
{
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	g_ShowTime = FALSE;
    1710:	10 92 f7 06 	sts	0x06F7, r1

	g_curBarValue = MD_SETUP;
    1714:	8b e0       	ldi	r24, 0x0B	; 11
    1716:	80 93 10 07 	sts	0x0710, r24

	//  режим ожидания ввода пароля
	PrepareToMode(MD_SETUP_WAITPSWD);
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
	helloCounter = 10;
    1720:	8a e0       	ldi	r24, 0x0A	; 10
    1722:	80 93 a8 06 	sts	0x06A8, r24
	ClearInput();
    1726:	0e 94 98 0b 	call	0x1730 <ClearInput>
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <ClearInput>:
}

void ClearInput(void)
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	memset(&g_szInput, 0, sizeof(g_szInput));
    1738:	41 e1       	ldi	r20, 0x11	; 17
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	82 e2       	ldi	r24, 0x22	; 34
    1742:	96 e0       	ldi	r25, 0x06	; 6
    1744:	0e 94 11 4f 	call	0x9e22 <memset>
	g_InputPos = 0;
    1748:	10 92 33 06 	sts	0x0633, r1
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <Backspace>:
}

void Backspace(void)
{
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	21 97       	sbiw	r28, 0x01	; 1
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
	unsigned char e = g_szInput[g_InputPos - 1];
    1766:	80 91 33 06 	lds	r24, 0x0633
    176a:	99 27       	eor	r25, r25
    176c:	fc 01       	movw	r30, r24
    176e:	ef 5d       	subi	r30, 0xDF	; 223
    1770:	f9 4f       	sbci	r31, 0xF9	; 249
    1772:	80 81       	ld	r24, Z
    1774:	89 83       	std	Y+1, r24	; 0x01

	g_szInput[g_InputPos - 1] = 0;
    1776:	80 91 33 06 	lds	r24, 0x0633
    177a:	99 27       	eor	r25, r25
    177c:	fc 01       	movw	r30, r24
    177e:	ef 5d       	subi	r30, 0xDF	; 223
    1780:	f9 4f       	sbci	r31, 0xF9	; 249
    1782:	10 82       	st	Z, r1
	g_szLastNumber[g_InputPos - 1] = 0;
    1784:	80 91 33 06 	lds	r24, 0x0633
    1788:	99 27       	eor	r25, r25
    178a:	fc 01       	movw	r30, r24
    178c:	ec 57       	subi	r30, 0x7C	; 124
    178e:	f9 4f       	sbci	r31, 0xF9	; 249
    1790:	10 82       	st	Z, r1

	if ((':' == e)||(' ' == e)||('.' == e))
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	8a 33       	cpi	r24, 0x3A	; 58
    1796:	39 f0       	breq	.+14     	; 0x17a6 <Backspace+0x54>
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	80 32       	cpi	r24, 0x20	; 32
    179c:	21 f0       	breq	.+8      	; 0x17a6 <Backspace+0x54>
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	8e 32       	cpi	r24, 0x2E	; 46
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <Backspace+0x54>
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <Backspace+0x58>
		DeletePrevChar();						//  в режиме изменения времени
    17a6:	0e 94 4f 0d 	call	0x1a9e <DeletePrevChar>

	DeletePrevChar();
    17aa:	0e 94 4f 0d 	call	0x1a9e <DeletePrevChar>
    17ae:	21 96       	adiw	r28, 0x01	; 1
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <Ohrana>:
}

void Ohrana(void)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	g_ShowTime = FALSE;
    17c8:	10 92 f7 06 	sts	0x06F7, r1

	g_curBarValue = MD_OHRANA;					//  оптимизация - присваивание заранее
    17cc:	84 e0       	ldi	r24, 0x04	; 4
    17ce:	80 93 10 07 	sts	0x0710, r24

	if (MD_OHRANA == g_Mode)
    17d2:	80 91 f0 06 	lds	r24, 0x06F0
    17d6:	84 30       	cpi	r24, 0x04	; 4
    17d8:	19 f4       	brne	.+6      	; 0x17e0 <Ohrana+0x20>
		//  нажали в режиме охраны - выход из режима охраны
		g_curBarValue = MD_HELLO;
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	80 93 10 07 	sts	0x0710, r24

	PrepareToMode(MD_SETUP_WAITPSWD);
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
	ClearInput();
    17e6:	0e 94 98 0b 	call	0x1730 <ClearInput>
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <Telephone>:
}

void Telephone(void)
{
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	g_ShowTime = FALSE;
    17f8:	10 92 f7 06 	sts	0x06F7, r1
	PrepareToMode(MD_TEL);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
	g_bSilent = 0;
    1802:	10 92 11 07 	sts	0x0711, r1
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <GetItemName>:
}

unsigned char* GetItemName(unsigned char index)
{
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	26 97       	sbiw	r28, 0x06	; 6
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	89 83       	std	Y+1, r24	; 0x01
	unsigned char mode = g_Mode;
    1822:	80 91 f0 06 	lds	r24, 0x06F0
    1826:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char m[2] = {0};
    1828:	1c 82       	std	Y+4, r1	; 0x04
    182a:	1b 82       	std	Y+3, r1	; 0x03

	//if (MD_SETUP == mode)		оптимизация...
	pMasItems = (unsigned char**)&g_szSetupItems;
    182c:	89 e5       	ldi	r24, 0x59	; 89
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	90 93 da 06 	sts	0x06DA, r25
    1834:	80 93 d9 06 	sts	0x06D9, r24

	if (MD_SENSORS == mode)
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	8a 30       	cpi	r24, 0x0A	; 10
    183c:	39 f4       	brne	.+14     	; 0x184c <GetItemName+0x40>
		pMasItems = (unsigned char**)&g_szSensorsItems;
    183e:	85 e7       	ldi	r24, 0x75	; 117
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	90 93 da 06 	sts	0x06DA, r25
    1846:	80 93 d9 06 	sts	0x06D9, r24
    184a:	8e c0       	rjmp	.+284    	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_TEL == mode)
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	8c 30       	cpi	r24, 0x0C	; 12
    1850:	39 f4       	brne	.+14     	; 0x1860 <GetItemName+0x54>
		pMasItems = (unsigned char**)&g_szTelefonItems;
    1852:	84 ed       	ldi	r24, 0xD4	; 212
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	90 93 da 06 	sts	0x06DA, r25
    185a:	80 93 d9 06 	sts	0x06D9, r24
    185e:	84 c0       	rjmp	.+264    	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_SENSORS_LIST == mode)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	8d 30       	cpi	r24, 0x0D	; 13
    1864:	d1 f4       	brne	.+52     	; 0x189a <GetItemName+0x8e>
	{
		ClearInput();
    1866:	0e 94 98 0b 	call	0x1730 <ClearInput>
		strcat(g_szInput, szUstr);		//  Устр
    186a:	6c e4       	ldi	r22, 0x4C	; 76
    186c:	74 e0       	ldi	r23, 0x04	; 4
    186e:	82 e2       	ldi	r24, 0x22	; 34
    1870:	96 e0       	ldi	r25, 0x06	; 6
    1872:	0e 94 1b 4f 	call	0x9e36 <strcat>
		return strcat(g_szInput, itoa(index, m, 10));
    1876:	9e 01       	movw	r18, r28
    1878:	2d 5f       	subi	r18, 0xFD	; 253
    187a:	3f 4f       	sbci	r19, 0xFF	; 255
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	99 27       	eor	r25, r25
    1880:	4a e0       	ldi	r20, 0x0A	; 10
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	b9 01       	movw	r22, r18
    1886:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    188a:	bc 01       	movw	r22, r24
    188c:	82 e2       	ldi	r24, 0x22	; 34
    188e:	96 e0       	ldi	r25, 0x06	; 6
    1890:	0e 94 1b 4f 	call	0x9e36 <strcat>
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	78 c0       	rjmp	.+240    	; 0x198a <GetItemName+0x17e>

	}else if (MD_SETUP_SENSORS_LIST_DEVICE == mode)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	8e 30       	cpi	r24, 0x0E	; 14
    189e:	39 f4       	brne	.+14     	; 0x18ae <GetItemName+0xa2>
		pMasItems = (unsigned char**)&g_szDeviceItems;
    18a0:	86 e9       	ldi	r24, 0x96	; 150
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	90 93 da 06 	sts	0x06DA, r25
    18a8:	80 93 d9 06 	sts	0x06D9, r24
    18ac:	5d c0       	rjmp	.+186    	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_TEL_LINEMODE == mode)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	80 31       	cpi	r24, 0x10	; 16
    18b2:	39 f4       	brne	.+14     	; 0x18c2 <GetItemName+0xb6>
		pMasItems = (unsigned char**)&g_szLinemodeItems;
    18b4:	8b ef       	ldi	r24, 0xFB	; 251
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	90 93 da 06 	sts	0x06DA, r25
    18bc:	80 93 d9 06 	sts	0x06D9, r24
    18c0:	53 c0       	rjmp	.+166    	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_VOLUME == mode)
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	81 31       	cpi	r24, 0x11	; 17
    18c6:	39 f4       	brne	.+14     	; 0x18d6 <GetItemName+0xca>
		pMasItems = (unsigned char**)&g_szVolumeItems;
    18c8:	84 ee       	ldi	r24, 0xE4	; 228
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	90 93 da 06 	sts	0x06DA, r25
    18d0:	80 93 d9 06 	sts	0x06D9, r24
    18d4:	49 c0       	rjmp	.+146    	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_SENSORS_LIST_DEVICE_SENSLIST == mode)
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	84 31       	cpi	r24, 0x14	; 20
    18da:	d9 f4       	brne	.+54     	; 0x1912 <GetItemName+0x106>
	{
		ClearInput();
    18dc:	0e 94 98 0b 	call	0x1730 <ClearInput>
		strcat(g_szInput, szVhod);				//  Вход -
    18e0:	64 e5       	ldi	r22, 0x54	; 84
    18e2:	74 e0       	ldi	r23, 0x04	; 4
    18e4:	82 e2       	ldi	r24, 0x22	; 34
    18e6:	96 e0       	ldi	r25, 0x06	; 6
    18e8:	0e 94 1b 4f 	call	0x9e36 <strcat>

		return strcat(g_szInput, itoa(index + 1, m, 10));
    18ec:	9e 01       	movw	r18, r28
    18ee:	2d 5f       	subi	r18, 0xFD	; 253
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	99 27       	eor	r25, r25
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	4a e0       	ldi	r20, 0x0A	; 10
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	b9 01       	movw	r22, r18
    18fe:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    1902:	bc 01       	movw	r22, r24
    1904:	82 e2       	ldi	r24, 0x22	; 34
    1906:	96 e0       	ldi	r25, 0x06	; 6
    1908:	0e 94 1b 4f 	call	0x9e36 <strcat>
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	3c c0       	rjmp	.+120    	; 0x198a <GetItemName+0x17e>
	}
	else if (MD_SETUP_X232 == mode)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	85 31       	cpi	r24, 0x15	; 21
    1916:	39 f4       	brne	.+14     	; 0x1926 <GetItemName+0x11a>
		pMasItems = (unsigned char**)&g_szX232Items;
    1918:	88 e0       	ldi	r24, 0x08	; 8
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	90 93 da 06 	sts	0x06DA, r25
    1920:	80 93 d9 06 	sts	0x06D9, r24
    1924:	21 c0       	rjmp	.+66     	; 0x1968 <GetItemName+0x15c>
	else if ((MD_SETUP_TEL_AUTO_DIAL_NUMBERS == mode) || (MD_REDUCE_EDIT == mode))
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	89 31       	cpi	r24, 0x19	; 25
    192a:	21 f0       	breq	.+8      	; 0x1934 <GetItemName+0x128>
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	80 32       	cpi	r24, 0x20	; 32
    1930:	09 f0       	breq	.+2      	; 0x1934 <GetItemName+0x128>
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <GetItemName+0x136>
		pMasItems = (unsigned char**)&g_szAutoDialNumbers;
    1934:	8d eb       	ldi	r24, 0xBD	; 189
    1936:	93 e0       	ldi	r25, 0x03	; 3
    1938:	90 93 da 06 	sts	0x06DA, r25
    193c:	80 93 d9 06 	sts	0x06D9, r24
    1940:	13 c0       	rjmp	.+38     	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_SETTINGS == mode)
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	8b 31       	cpi	r24, 0x1B	; 27
    1946:	39 f4       	brne	.+14     	; 0x1956 <GetItemName+0x14a>
		pMasItems = (unsigned char**)&g_szSettingsItems;
    1948:	8c e2       	ldi	r24, 0x2C	; 44
    194a:	93 e0       	ldi	r25, 0x03	; 3
    194c:	90 93 da 06 	sts	0x06DA, r25
    1950:	80 93 d9 06 	sts	0x06D9, r24
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <GetItemName+0x15c>
	else if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR == mode)
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	8e 31       	cpi	r24, 0x1E	; 30
    195a:	31 f4       	brne	.+12     	; 0x1968 <GetItemName+0x15c>
		pMasItems = (unsigned char**)&g_szDeviceSensorItems;
    195c:	8d ea       	ldi	r24, 0xAD	; 173
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	90 93 da 06 	sts	0x06DA, r25
    1964:	80 93 d9 06 	sts	0x06D9, r24

	return pMasItems[index];
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	28 2f       	mov	r18, r24
    196c:	33 27       	eor	r19, r19
    196e:	c9 01       	movw	r24, r18
    1970:	28 0f       	add	r18, r24
    1972:	39 1f       	adc	r19, r25
    1974:	80 91 d9 06 	lds	r24, 0x06D9
    1978:	90 91 da 06 	lds	r25, 0x06DA
    197c:	f9 01       	movw	r30, r18
    197e:	e8 0f       	add	r30, r24
    1980:	f9 1f       	adc	r31, r25
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
}
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	26 96       	adiw	r28, 0x06	; 6
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <DrawMenuLine>:

void DrawMenuLine(unsigned char lineNo, unsigned char lineStartPos)
{
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	23 97       	sbiw	r28, 0x03	; 3
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
	unsigned char lineNo_ = lineNo;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	8b 83       	std	Y+3, r24	; 0x03


	if (MD_SETUP_SENSORS_LIST == g_Mode)
    19bc:	80 91 f0 06 	lds	r24, 0x06F0
    19c0:	8d 30       	cpi	r24, 0x0D	; 13
    19c2:	19 f4       	brne	.+6      	; 0x19ca <DrawMenuLine+0x2a>
#ifndef NEWVG
		lineNo = lineNo + 3;				//  в этом режиме нумерация с 3
#else
		lineNo = lineNo + 1;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	89 83       	std	Y+1, r24	; 0x01
#endif

	OutStr(GetItemName(g_SetupFirstLine + lineNo)); //  выводим первую строку меню
    19ca:	90 91 35 06 	lds	r25, 0x0635
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	89 0f       	add	r24, r25
    19d2:	0e 94 06 0c 	call	0x180c <GetItemName>
    19d6:	0e 94 24 29 	call	0x5248 <OutStr>

	if (g_SetupCurItem == lineNo_)			//  есть ли стрелка на первой строке
    19da:	90 91 34 06 	lds	r25, 0x0634
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	98 17       	cp	r25, r24
    19e2:	41 f4       	brne	.+16     	; 0x19f4 <DrawMenuLine+0x54>
	{
		SetCaret(lineStartPos + ARROW_START_POS);
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	85 5f       	subi	r24, 0xF5	; 245
    19e8:	0e 94 47 29 	call	0x528e <SetCaret>

		OutStr(szStrelka);
    19ec:	8a e5       	ldi	r24, 0x5A	; 90
    19ee:	94 e0       	ldi	r25, 0x04	; 4
    19f0:	0e 94 24 29 	call	0x5248 <OutStr>
	}

	if ((g_SetupFirstLine + lineNo == g_GalkaPunkt) ||
    19f4:	80 91 35 06 	lds	r24, 0x0635
    19f8:	28 2f       	mov	r18, r24
    19fa:	33 27       	eor	r19, r19
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	99 27       	eor	r25, r25
    1a00:	28 0f       	add	r18, r24
    1a02:	39 1f       	adc	r19, r25
    1a04:	80 91 59 07 	lds	r24, 0x0759
    1a08:	99 27       	eor	r25, r25
    1a0a:	28 17       	cp	r18, r24
    1a0c:	39 07       	cpc	r19, r25
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <DrawMenuLine+0x7a>
    1a10:	80 91 09 01 	lds	r24, 0x0109
    1a14:	8f 3f       	cpi	r24, 0xFF	; 255
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <DrawMenuLine+0x7a>
    1a18:	1f c0       	rjmp	.+62     	; 0x1a58 <DrawMenuLine+0xb8>
		(g_checkedItem != 0xFF))
	{
		SetCaret(lineStartPos + CHECKBOX_START_POS);
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	81 5f       	subi	r24, 0xF1	; 241
    1a1e:	0e 94 47 29 	call	0x528e <SetCaret>

		if ((g_Galka) || (g_checkedItem == g_SetupFirstLine + lineNo))
    1a22:	80 91 84 06 	lds	r24, 0x0684
    1a26:	88 23       	and	r24, r24
    1a28:	81 f4       	brne	.+32     	; 0x1a4a <DrawMenuLine+0xaa>
    1a2a:	80 91 09 01 	lds	r24, 0x0109
    1a2e:	48 2f       	mov	r20, r24
    1a30:	55 27       	eor	r21, r21
    1a32:	80 91 35 06 	lds	r24, 0x0635
    1a36:	28 2f       	mov	r18, r24
    1a38:	33 27       	eor	r19, r19
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	99 27       	eor	r25, r25
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	48 17       	cp	r20, r24
    1a44:	59 07       	cpc	r21, r25
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <DrawMenuLine+0xaa>
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <DrawMenuLine+0xb2>
			OutData(ITEM_CHECKED);
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	0e 94 e7 28 	call	0x51ce <OutData>
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <DrawMenuLine+0xb8>
		else
			OutData(ITEM_UNCHECKED);
    1a52:	8f ee       	ldi	r24, 0xEF	; 239
    1a54:	0e 94 e7 28 	call	0x51ce <OutData>
    1a58:	23 96       	adiw	r28, 0x03	; 3
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <DrawMenu>:
	}
}

//  перерисовка меню Setup'a

//  галочных интерфейса сущ. два типа - в двустрочном меню(режим MD_SETUP_TEL_LINE_MODE)
//  и в многострочном меню. В первом типе галки возле пунктов меняются местами,
//  а во втором после ентера галка меняется у одного пункта

void DrawMenu(void)
{								//  цикл (любой) здесь не выгоден
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	ClearScreen();
    1a72:	0e 94 79 29 	call	0x52f2 <ClearScreen>
	HideCaret();
    1a76:	0e 94 91 29 	call	0x5322 <HideCaret>

	DrawMenuLine(0, 0);			//  прорисовка первой строки
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	0e 94 d0 0c 	call	0x19a0 <DrawMenuLine>

	SetCaret(LINE_2_START_POS);
    1a82:	80 e4       	ldi	r24, 0x40	; 64
    1a84:	0e 94 47 29 	call	0x528e <SetCaret>

	if (g_CurMenuMaxItems > 1)
    1a88:	80 91 72 07 	lds	r24, 0x0772
    1a8c:	82 30       	cpi	r24, 0x02	; 2
    1a8e:	20 f0       	brcs	.+8      	; 0x1a98 <DrawMenu+0x2e>
		DrawMenuLine(1, 0x40);		//  прорисовка второй строки
    1a90:	60 e4       	ldi	r22, 0x40	; 64
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 d0 0c 	call	0x19a0 <DrawMenuLine>
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <DeletePrevChar>:
/*
	if (MD_SETUP_SENSORS_LIST_DEVICE == g_Mode)
	{
		if (2 == g_SetupFirstLine)
		{
			SetCaret(LINE_1_START_POS + 8);
		}else
		if (1 == g_SetupFirstLine)
		{
			SetCaret(LINE_2_START_POS + 8);
		}else
			return;

		if (g_CurDev.state & _BV(DS_OHRANA))
			OutData('1');
		else
			OutData('0');
	}
*/
}

void DeletePrevChar(void)
{
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	SetCaret(--g_CaretPos);
    1aa6:	80 91 43 06 	lds	r24, 0x0643
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	80 93 43 06 	sts	0x0643, r24
    1ab0:	0e 94 47 29 	call	0x528e <SetCaret>
	OutData(32);
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	0e 94 e7 28 	call	0x51ce <OutData>
	g_InputPos--;
    1aba:	80 91 33 06 	lds	r24, 0x0633
    1abe:	81 50       	subi	r24, 0x01	; 1
    1ac0:	80 93 33 06 	sts	0x0633, r24
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	08 95       	ret

00001aca <LeftRight>:
}

//  обработчик нажатия кнопок влево и вправо
void LeftRight(unsigned char key)
{
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	24 97       	sbiw	r28, 0x04	; 4
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	89 83       	std	Y+1, r24	; 0x01
	unsigned char mode = g_Mode;
    1ae4:	80 91 f0 06 	lds	r24, 0x06F0
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char e;
	unsigned char inputPos = g_InputPos;
    1aea:	80 91 33 06 	lds	r24, 0x0633
    1aee:	8c 83       	std	Y+4, r24	; 0x04

	if ((MD_SETUP == mode) 		|| (MD_SENSORS == mode) ||
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	8b 30       	cpi	r24, 0x0B	; 11
    1af4:	29 f1       	breq	.+74     	; 0x1b40 <LeftRight+0x76>
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	8a 30       	cpi	r24, 0x0A	; 10
    1afa:	11 f1       	breq	.+68     	; 0x1b40 <LeftRight+0x76>
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	8c 30       	cpi	r24, 0x0C	; 12
    1b00:	f9 f0       	breq	.+62     	; 0x1b40 <LeftRight+0x76>
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	8d 30       	cpi	r24, 0x0D	; 13
    1b06:	e1 f0       	breq	.+56     	; 0x1b40 <LeftRight+0x76>
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	8e 30       	cpi	r24, 0x0E	; 14
    1b0c:	c9 f0       	breq	.+50     	; 0x1b40 <LeftRight+0x76>
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 31       	cpi	r24, 0x10	; 16
    1b12:	b1 f0       	breq	.+44     	; 0x1b40 <LeftRight+0x76>
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	81 31       	cpi	r24, 0x11	; 17
    1b18:	99 f0       	breq	.+38     	; 0x1b40 <LeftRight+0x76>
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	84 31       	cpi	r24, 0x14	; 20
    1b1e:	81 f0       	breq	.+32     	; 0x1b40 <LeftRight+0x76>
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	85 31       	cpi	r24, 0x15	; 21
    1b24:	69 f0       	breq	.+26     	; 0x1b40 <LeftRight+0x76>
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	89 31       	cpi	r24, 0x19	; 25
    1b2a:	51 f0       	breq	.+20     	; 0x1b40 <LeftRight+0x76>
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	8b 31       	cpi	r24, 0x1B	; 27
    1b30:	39 f0       	breq	.+14     	; 0x1b40 <LeftRight+0x76>
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	8e 31       	cpi	r24, 0x1E	; 30
    1b36:	21 f0       	breq	.+8      	; 0x1b40 <LeftRight+0x76>
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	80 32       	cpi	r24, 0x20	; 32
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <LeftRight+0x76>
    1b3e:	57 c0       	rjmp	.+174    	; 0x1bee <LeftRight+0x124>
		(MD_SETUP_TEL == mode)	|| (MD_SETUP_SENSORS_LIST == mode) ||
		(MD_SETUP_SENSORS_LIST_DEVICE == mode) ||
		(MD_SETUP_TEL_LINEMODE == mode) || (MD_SETUP_VOLUME == mode) ||
		(MD_SETUP_SENSORS_LIST_DEVICE_SENSLIST == mode) ||
		(MD_SETUP_X232 == mode) ||
		(MD_SETUP_TEL_AUTO_DIAL_NUMBERS == mode) ||
		(MD_SETUP_SETTINGS == mode) ||
		(MD_SETUP_SENSORS_LIST_DEVICE_SENSOR == mode) ||
		(MD_REDUCE_EDIT == mode)
		)
	{	//  перемещения по меню
		if (VK_UP == key)					//  вверх
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	8c 30       	cpi	r24, 0x0C	; 12
    1b44:	c9 f4       	brne	.+50     	; 0x1b78 <LeftRight+0xae>
		{
			if (g_SetupCurItem > 0)
    1b46:	80 91 34 06 	lds	r24, 0x0634
    1b4a:	88 23       	and	r24, r24
    1b4c:	19 f0       	breq	.+6      	; 0x1b54 <LeftRight+0x8a>
				g_SetupCurItem = 0;
    1b4e:	10 92 34 06 	sts	0x0634, r1
    1b52:	12 c0       	rjmp	.+36     	; 0x1b78 <LeftRight+0xae>
			else
			if (g_SetupFirstLine > 0)
    1b54:	80 91 35 06 	lds	r24, 0x0635
    1b58:	88 23       	and	r24, r24
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <LeftRight+0x9e>
				g_SetupFirstLine--;
    1b5c:	80 91 35 06 	lds	r24, 0x0635
    1b60:	81 50       	subi	r24, 0x01	; 1
    1b62:	80 93 35 06 	sts	0x0635, r24
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <LeftRight+0xae>
			else
			{
				g_SetupFirstLine = g_CurMenuMaxItems - 2;
    1b68:	80 91 72 07 	lds	r24, 0x0772
    1b6c:	82 50       	subi	r24, 0x02	; 2
    1b6e:	80 93 35 06 	sts	0x0635, r24
				g_SetupCurItem = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	80 93 34 06 	sts	0x0634, r24
			}
		}

		if (VK_DOWN == key)					//  вниз
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	80 31       	cpi	r24, 0x10	; 16
    1b7c:	e9 f4       	brne	.+58     	; 0x1bb8 <LeftRight+0xee>
		{
			if (!g_SetupCurItem)
    1b7e:	80 91 34 06 	lds	r24, 0x0634
    1b82:	88 23       	and	r24, r24
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <LeftRight+0xc4>
				g_SetupCurItem = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	80 93 34 06 	sts	0x0634, r24
    1b8c:	15 c0       	rjmp	.+42     	; 0x1bb8 <LeftRight+0xee>
			else
			if (g_SetupFirstLine < g_CurMenuMaxItems - 2)
    1b8e:	80 91 35 06 	lds	r24, 0x0635
    1b92:	28 2f       	mov	r18, r24
    1b94:	33 27       	eor	r19, r19
    1b96:	80 91 72 07 	lds	r24, 0x0772
    1b9a:	99 27       	eor	r25, r25
    1b9c:	02 97       	sbiw	r24, 0x02	; 2
    1b9e:	28 17       	cp	r18, r24
    1ba0:	39 07       	cpc	r19, r25
    1ba2:	34 f4       	brge	.+12     	; 0x1bb0 <LeftRight+0xe6>
				g_SetupFirstLine++;
    1ba4:	80 91 35 06 	lds	r24, 0x0635
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	80 93 35 06 	sts	0x0635, r24
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <LeftRight+0xee>
			else
			{
				g_SetupFirstLine = 0;
    1bb0:	10 92 35 06 	sts	0x0635, r1
				g_SetupCurItem = 0;
    1bb4:	10 92 34 06 	sts	0x0634, r1
			}
		}

		g_SetupItem = g_SetupFirstLine + g_SetupCurItem;
    1bb8:	90 91 35 06 	lds	r25, 0x0635
    1bbc:	80 91 34 06 	lds	r24, 0x0634
    1bc0:	89 0f       	add	r24, r25
    1bc2:	80 93 c2 06 	sts	0x06C2, r24
		if ((g_SetupItem == g_CurMenuMaxItems) ||
    1bc6:	90 91 c2 06 	lds	r25, 0x06C2
    1bca:	80 91 72 07 	lds	r24, 0x0772
    1bce:	98 17       	cp	r25, r24
    1bd0:	39 f0       	breq	.+14     	; 0x1be0 <LeftRight+0x116>
    1bd2:	90 91 34 06 	lds	r25, 0x0634
    1bd6:	80 91 72 07 	lds	r24, 0x0772
    1bda:	98 17       	cp	r25, r24
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <LeftRight+0x116>
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <LeftRight+0x11e>
			(g_SetupCurItem == g_CurMenuMaxItems))
		{	//  если в меню всего лишь один пункт (в несетевой версии)
			g_SetupItem = 0;
    1be0:	10 92 c2 06 	sts	0x06C2, r1
			g_SetupCurItem = 0;
    1be4:	10 92 34 06 	sts	0x0634, r1
		}
		DrawMenu();
    1be8:	0e 94 35 0d 	call	0x1a6a <DrawMenu>
    1bec:	2e c1       	rjmp	.+604    	; 0x1e4a <LeftRight+0x380>
	}else
	if ((MD_SETUP_NEWPSWD == mode) || (MD_SETUP_WAITPSWD == mode)
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	85 30       	cpi	r24, 0x05	; 5
    1bf2:	39 f0       	breq	.+14     	; 0x1c02 <LeftRight+0x138>
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <LeftRight+0x138>
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	81 32       	cpi	r24, 0x21	; 33
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <LeftRight+0x138>
    1c00:	0c c0       	rjmp	.+24     	; 0x1c1a <LeftRight+0x150>
		|| (MD_REDUCE_EDIT_ == mode))
	{	//  старый режим стирания
		if (VK_LEFT == key)
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	8c 30       	cpi	r24, 0x0C	; 12
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <LeftRight+0x140>
    1c08:	20 c1       	rjmp	.+576    	; 0x1e4a <LeftRight+0x380>
		{
			if (g_CaretPos > LINE_2_START_POS)
    1c0a:	80 91 43 06 	lds	r24, 0x0643
    1c0e:	81 34       	cpi	r24, 0x41	; 65
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <LeftRight+0x14a>
    1c12:	1b c1       	rjmp	.+566    	; 0x1e4a <LeftRight+0x380>
			{
				Backspace();
    1c14:	0e 94 a9 0b 	call	0x1752 <Backspace>
    1c18:	18 c1       	rjmp	.+560    	; 0x1e4a <LeftRight+0x380>
			}
		}
	}else
	if ((MD_TEL == mode) || (MD_SETUP_SENSORS_NEWBAUDRATE == mode) ||
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	88 23       	and	r24, r24
    1c1e:	99 f0       	breq	.+38     	; 0x1c46 <LeftRight+0x17c>
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	86 30       	cpi	r24, 0x06	; 6
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <LeftRight+0x17c>
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	87 30       	cpi	r24, 0x07	; 7
    1c2a:	69 f0       	breq	.+26     	; 0x1c46 <LeftRight+0x17c>
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	88 31       	cpi	r24, 0x18	; 24
    1c30:	51 f0       	breq	.+20     	; 0x1c46 <LeftRight+0x17c>
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	8a 31       	cpi	r24, 0x1A	; 26
    1c36:	39 f0       	breq	.+14     	; 0x1c46 <LeftRight+0x17c>
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	8f 31       	cpi	r24, 0x1F	; 31
    1c3c:	21 f0       	breq	.+8      	; 0x1c46 <LeftRight+0x17c>
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <LeftRight+0x17c>
    1c44:	74 c0       	rjmp	.+232    	; 0x1d2e <LeftRight+0x264>
		(MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT == mode) ||
		(MD_SETUP_X232_PACKET == mode) ||
		(MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode) ||
		(MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 == mode)||
		(MD_SETUP_TIME == mode)
		)
	{
		if (VK_BACKSPACE == key)		//  в этих режимах FUNC = Backspace
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	88 30       	cpi	r24, 0x08	; 8
    1c4a:	41 f5       	brne	.+80     	; 0x1c9c <LeftRight+0x1d2>
		{
			if (g_CaretPos > LINE_2_START_POS)
    1c4c:	80 91 43 06 	lds	r24, 0x0643
    1c50:	81 34       	cpi	r24, 0x41	; 65
    1c52:	08 f4       	brcc	.+2      	; 0x1c56 <LeftRight+0x18c>
    1c54:	66 c0       	rjmp	.+204    	; 0x1d22 <LeftRight+0x258>
			{
				Backspace();
    1c56:	0e 94 a9 0b 	call	0x1752 <Backspace>

				for (e = g_InputPos; e < LINE_LEN; e++)
    1c5a:	80 91 33 06 	lds	r24, 0x0633
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	80 31       	cpi	r24, 0x10	; 16
    1c64:	98 f4       	brcc	.+38     	; 0x1c8c <LeftRight+0x1c2>
				{
					g_szInput[e] = g_szInput[e + 1];
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	99 27       	eor	r25, r25
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	ae 5d       	subi	r26, 0xDE	; 222
    1c6e:	b9 4f       	sbci	r27, 0xF9	; 249
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	99 27       	eor	r25, r25
    1c74:	fc 01       	movw	r30, r24
    1c76:	ed 5d       	subi	r30, 0xDD	; 221
    1c78:	f9 4f       	sbci	r31, 0xF9	; 249
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8c 93       	st	X, r24
					OutData(32);
    1c7e:	80 e2       	ldi	r24, 0x20	; 32
    1c80:	0e 94 e7 28 	call	0x51ce <OutData>
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	ea cf       	rjmp	.-44     	; 0x1c60 <LeftRight+0x196>
				}

				SetCaret(LINE_2_START_POS);
    1c8c:	80 e4       	ldi	r24, 0x40	; 64
    1c8e:	0e 94 47 29 	call	0x528e <SetCaret>
				OutStr(g_szInput);
    1c92:	82 e2       	ldi	r24, 0x22	; 34
    1c94:	96 e0       	ldi	r25, 0x06	; 6
    1c96:	0e 94 24 29 	call	0x5248 <OutStr>
    1c9a:	43 c0       	rjmp	.+134    	; 0x1d22 <LeftRight+0x258>
			}
		}else
		{
			e = 0;
    1c9c:	1b 82       	std	Y+3, r1	; 0x03
			if (VK_LEFT == key)
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	8c 30       	cpi	r24, 0x0C	; 12
    1ca2:	39 f4       	brne	.+14     	; 0x1cb2 <LeftRight+0x1e8>
			{
				if (g_CaretPos > LINE_2_START_POS)
    1ca4:	80 91 43 06 	lds	r24, 0x0643
    1ca8:	81 34       	cpi	r24, 0x41	; 65
    1caa:	b0 f0       	brcs	.+44     	; 0x1cd8 <LeftRight+0x20e>
					e = -1;
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	13 c0       	rjmp	.+38     	; 0x1cd8 <LeftRight+0x20e>
			}else
			if (VK_RIGHT == key)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	80 31       	cpi	r24, 0x10	; 16
    1cb6:	81 f4       	brne	.+32     	; 0x1cd8 <LeftRight+0x20e>
				//  перевод каретки вправо, к концу строки (если есть введенные символы)
				if ((g_CaretPos < LINE_2_START_POS + LINE_LEN) &&
    1cb8:	80 91 43 06 	lds	r24, 0x0643
    1cbc:	80 35       	cpi	r24, 0x50	; 80
    1cbe:	60 f4       	brcc	.+24     	; 0x1cd8 <LeftRight+0x20e>
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	08 2f       	mov	r16, r24
    1cc4:	11 27       	eor	r17, r17
    1cc6:	82 e2       	ldi	r24, 0x22	; 34
    1cc8:	96 e0       	ldi	r25, 0x06	; 6
    1cca:	0e 94 37 4f 	call	0x9e6e <strlen>
    1cce:	08 17       	cp	r16, r24
    1cd0:	19 07       	cpc	r17, r25
    1cd2:	10 f4       	brcc	.+4      	; 0x1cd8 <LeftRight+0x20e>
					(inputPos < strlen(g_szInput)))
					e = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8b 83       	std	Y+3, r24	; 0x03

			if (0 != e)
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 23       	and	r24, r24
    1cdc:	11 f1       	breq	.+68     	; 0x1d22 <LeftRight+0x258>
			{
				mode = g_szInput[inputPos + e];
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	33 27       	eor	r19, r19
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	99 27       	eor	r25, r25
    1ce8:	82 0f       	add	r24, r18
    1cea:	93 1f       	adc	r25, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	ee 5d       	subi	r30, 0xDE	; 222
    1cf0:	f9 4f       	sbci	r31, 0xF9	; 249
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8a 83       	std	Y+2, r24	; 0x02

				if ((':' == mode)||(' ' == mode)||('.' == mode))
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	8a 33       	cpi	r24, 0x3A	; 58
    1cfa:	39 f0       	breq	.+14     	; 0x1d0a <LeftRight+0x240>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	80 32       	cpi	r24, 0x20	; 32
    1d00:	21 f0       	breq	.+8      	; 0x1d0a <LeftRight+0x240>
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	8e 32       	cpi	r24, 0x2E	; 46
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <LeftRight+0x240>
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <LeftRight+0x24c>
					g_InputPos = g_InputPos + e;
    1d0a:	80 91 33 06 	lds	r24, 0x0633
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	89 0f       	add	r24, r25
    1d12:	80 93 33 06 	sts	0x0633, r24

				g_InputPos = g_InputPos + e;
    1d16:	80 91 33 06 	lds	r24, 0x0633
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	89 0f       	add	r24, r25
    1d1e:	80 93 33 06 	sts	0x0633, r24
			}
		}

		g_CaretPos = LINE_2_START_POS + g_InputPos;
    1d22:	80 91 33 06 	lds	r24, 0x0633
    1d26:	80 5c       	subi	r24, 0xC0	; 192
    1d28:	80 93 43 06 	sts	0x0643, r24
    1d2c:	8e c0       	rjmp	.+284    	; 0x1e4a <LeftRight+0x380>

	}else
	if ((MD_SETUP_VOLUME_DINAMIC == mode) || (MD_SETUP_VOLUME_TELEFON == mode) ||
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	82 31       	cpi	r24, 0x12	; 18
    1d32:	51 f0       	breq	.+20     	; 0x1d48 <LeftRight+0x27e>
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	83 31       	cpi	r24, 0x13	; 19
    1d38:	39 f0       	breq	.+14     	; 0x1d48 <LeftRight+0x27e>
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	86 31       	cpi	r24, 0x16	; 22
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <LeftRight+0x27e>
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	87 31       	cpi	r24, 0x17	; 23
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <LeftRight+0x27e>
    1d46:	1f c0       	rjmp	.+62     	; 0x1d86 <LeftRight+0x2bc>
		(MD_SETUP_X232_TIMEOUT == mode) || (MD_SETUP_X232_INTERVAL == mode))
	{
		if (VK_DOWN == key)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	80 31       	cpi	r24, 0x10	; 16
    1d4c:	51 f4       	brne	.+20     	; 0x1d62 <LeftRight+0x298>
		{
			if (g_curBarValue < 16)
    1d4e:	80 91 10 07 	lds	r24, 0x0710
    1d52:	80 31       	cpi	r24, 0x10	; 16
    1d54:	78 f4       	brcc	.+30     	; 0x1d74 <LeftRight+0x2aa>
				g_curBarValue++;
    1d56:	80 91 10 07 	lds	r24, 0x0710
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	80 93 10 07 	sts	0x0710, r24
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <LeftRight+0x2aa>
		}
		else if (g_curBarValue)
    1d62:	80 91 10 07 	lds	r24, 0x0710
    1d66:	88 23       	and	r24, r24
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <LeftRight+0x2aa>
				g_curBarValue--;
    1d6a:	80 91 10 07 	lds	r24, 0x0710
    1d6e:	81 50       	subi	r24, 0x01	; 1
    1d70:	80 93 10 07 	sts	0x0710, r24

		UpdateBarInterface();
    1d74:	0e 94 00 09 	call	0x1200 <UpdateBarInterface>

		if (MD_SETUP_VOLUME_DINAMIC == mode)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	82 31       	cpi	r24, 0x12	; 18
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <LeftRight+0x2b6>
    1d7e:	65 c0       	rjmp	.+202    	; 0x1e4a <LeftRight+0x380>
			ChangeVolume();
    1d80:	0e 94 15 18 	call	0x302a <ChangeVolume>
    1d84:	62 c0       	rjmp	.+196    	; 0x1e4a <LeftRight+0x380>
	}else
	if ((MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == mode) ||
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	89 30       	cpi	r24, 0x09	; 9
    1d8a:	39 f0       	breq	.+14     	; 0x1d9a <LeftRight+0x2d0>
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	8c 31       	cpi	r24, 0x1C	; 28
    1d90:	21 f0       	breq	.+8      	; 0x1d9a <LeftRight+0x2d0>
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	8d 31       	cpi	r24, 0x1D	; 29
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <LeftRight+0x2d0>
    1d98:	5c c0       	rjmp	.+184    	; 0x1e52 <LeftRight+0x388>
		(MD_SETUP_SETTINGS_RAM == mode) ||
		(MD_SETUP_SETTINGS_EEPROM == mode))
	{
		if (VK_LEFT == key)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	8c 30       	cpi	r24, 0x0C	; 12
    1d9e:	e9 f5       	brne	.+122    	; 0x1e1a <LeftRight+0x350>
		{
			if (g_CaretPos > LINE_2_START_POS)
    1da0:	80 91 43 06 	lds	r24, 0x0643
    1da4:	81 34       	cpi	r24, 0x41	; 65
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <LeftRight+0x2e0>
    1da8:	50 c0       	rjmp	.+160    	; 0x1e4a <LeftRight+0x380>
			{
				if (inputPos == 7)
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	87 30       	cpi	r24, 0x07	; 7
    1dae:	59 f4       	brne	.+22     	; 0x1dc6 <LeftRight+0x2fc>
				{
					g_InputPos = strlen(g_szInput);
    1db0:	82 e2       	ldi	r24, 0x22	; 34
    1db2:	96 e0       	ldi	r25, 0x06	; 6
    1db4:	0e 94 37 4f 	call	0x9e6e <strlen>
    1db8:	80 93 33 06 	sts	0x0633, r24
					SetCaret(LINE_2_START_POS + g_InputPos);
    1dbc:	80 91 33 06 	lds	r24, 0x0633
    1dc0:	80 5c       	subi	r24, 0xC0	; 192
    1dc2:	0e 94 47 29 	call	0x528e <SetCaret>
				}

				if ((MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == mode) ||
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	89 30       	cpi	r24, 0x09	; 9
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <LeftRight+0x30a>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	87 30       	cpi	r24, 0x07	; 7
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <LeftRight+0x30a>
    1dd2:	09 c0       	rjmp	.+18     	; 0x1de6 <LeftRight+0x31c>
					(inputPos < 7))
				{
					g_szInput[inputPos - 1] = 0;
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	99 27       	eor	r25, r25
    1dd8:	fc 01       	movw	r30, r24
    1dda:	ef 5d       	subi	r30, 0xDF	; 223
    1ddc:	f9 4f       	sbci	r31, 0xF9	; 249
    1dde:	10 82       	st	Z, r1
					DeletePrevChar();
    1de0:	0e 94 4f 0d 	call	0x1a9e <DeletePrevChar>
    1de4:	32 c0       	rjmp	.+100    	; 0x1e4a <LeftRight+0x380>
				}else
				if (inputPos > 7)
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	88 30       	cpi	r24, 0x08	; 8
    1dea:	78 f1       	brcs	.+94     	; 0x1e4a <LeftRight+0x380>
				{
					g_szInput[inputPos - 1] = 0x30;
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	99 27       	eor	r25, r25
    1df0:	fc 01       	movw	r30, r24
    1df2:	ef 5d       	subi	r30, 0xDF	; 223
    1df4:	f9 4f       	sbci	r31, 0xF9	; 249
    1df6:	80 e3       	ldi	r24, 0x30	; 48
    1df8:	80 83       	st	Z, r24
					SetCaret(--g_CaretPos);
    1dfa:	80 91 43 06 	lds	r24, 0x0643
    1dfe:	81 50       	subi	r24, 0x01	; 1
    1e00:	80 93 43 06 	sts	0x0643, r24
    1e04:	0e 94 47 29 	call	0x528e <SetCaret>
					OutData(0x30);
    1e08:	80 e3       	ldi	r24, 0x30	; 48
    1e0a:	0e 94 e7 28 	call	0x51ce <OutData>
					g_InputPos--;
    1e0e:	80 91 33 06 	lds	r24, 0x0633
    1e12:	81 50       	subi	r24, 0x01	; 1
    1e14:	80 93 33 06 	sts	0x0633, r24
    1e18:	18 c0       	rjmp	.+48     	; 0x1e4a <LeftRight+0x380>
				}
			}
		}
		else
		if (VK_RIGHT == key)
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	80 31       	cpi	r24, 0x10	; 16
    1e1e:	a9 f4       	brne	.+42     	; 0x1e4a <LeftRight+0x380>
		{
			if ((g_CaretPos < LINE_2_START_POS + LINE_LEN) && (g_InputPos > 6) &&
    1e20:	80 91 43 06 	lds	r24, 0x0643
    1e24:	80 35       	cpi	r24, 0x50	; 80
    1e26:	88 f4       	brcc	.+34     	; 0x1e4a <LeftRight+0x380>
    1e28:	80 91 33 06 	lds	r24, 0x0633
    1e2c:	87 30       	cpi	r24, 0x07	; 7
    1e2e:	68 f0       	brcs	.+26     	; 0x1e4a <LeftRight+0x380>
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	89 30       	cpi	r24, 0x09	; 9
    1e34:	51 f0       	breq	.+20     	; 0x1e4a <LeftRight+0x380>
				(MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE != mode))
			{
				g_CaretPos++;
    1e36:	80 91 43 06 	lds	r24, 0x0643
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 43 06 	sts	0x0643, r24
				g_InputPos++;
    1e40:	80 91 33 06 	lds	r24, 0x0633
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	80 93 33 06 	sts	0x0633, r24
			}
		}
	}else
		return;

	SetCaret(g_CaretPos);
    1e4a:	80 91 43 06 	lds	r24, 0x0643
    1e4e:	0e 94 47 29 	call	0x528e <SetCaret>
    1e52:	24 96       	adiw	r28, 0x04	; 4
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <NumerKey>:
}

//  обработчик нажатия цифровых кнопок
void NumerKey(unsigned char key)
{
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	26 97       	sbiw	r28, 0x06	; 6
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	89 83       	std	Y+1, r24	; 0x01
	unsigned char mode = g_Mode, k;
    1e7e:	80 91 f0 06 	lds	r24, 0x06F0
    1e82:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char inputPos = g_InputPos, numk2 = g_numbers[key], numk = numk2 - 0x30;
    1e84:	80 91 33 06 	lds	r24, 0x0633
    1e88:	8c 83       	std	Y+4, r24	; 0x04
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	99 27       	eor	r25, r25
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e6 5f       	subi	r30, 0xF6	; 246
    1e92:	fe 4f       	sbci	r31, 0xFE	; 254
    1e94:	80 81       	ld	r24, Z
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	80 53       	subi	r24, 0x30	; 48
    1e9c:	8e 83       	std	Y+6, r24	; 0x06

	if (MD_REDUCE_EDIT == mode)				//  если находимя в списке номеров
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	80 32       	cpi	r24, 0x20	; 32
    1ea2:	19 f4       	brne	.+6      	; 0x1eaa <NumerKey+0x42>
		PrepareToMode(MD_HELLO);			//  упрощенного режима
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	0e 94 78 09 	call	0x12f0 <PrepareToMode>

	if (MD_HELLO == mode)
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	c1 f4       	brne	.+48     	; 0x1ee0 <NumerKey+0x78>
	{	//  новое упрощенное видение
		if (!inputPos)
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	88 23       	and	r24, r24
    1eb4:	61 f4       	brne	.+24     	; 0x1ece <NumerKey+0x66>
		{
			if (VK_6 == key)
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	87 30       	cpi	r24, 0x07	; 7
    1eba:	91 f4       	brne	.+36     	; 0x1ee0 <NumerKey+0x78>
			{	//  режим редактирования номеров
				g_ShowTime = FALSE;
    1ebc:	10 92 f7 06 	sts	0x06F7, r1
				MenuAutoDialNumbers(0);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	0e 94 59 08 	call	0x10b2 <MenuAutoDialNumbers>
				g_Mode = MD_REDUCE_EDIT;
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	80 93 f0 06 	sts	0x06F0, r24
				return;
    1ecc:	d6 c1       	rjmp	.+940    	; 0x227a <NumerKey+0x412>
			}
		}else
		if (!inputPos)
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	88 23       	and	r24, r24
    1ed2:	31 f4       	brne	.+12     	; 0x1ee0 <NumerKey+0x78>
		{	//  первая цифра набираемого номера из нулевого режима
			//  переход в режим телефона!!!!!!!
			Telephone();
    1ed4:	0e 94 f8 0b 	call	0x17f0 <Telephone>
			mode = MD_TEL;
    1ed8:	1a 82       	std	Y+2, r1	; 0x02
			g_bSilent = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	80 93 11 07 	sts	0x0711, r24
		}
	}

	//  реакция на цифры разрешена в следующих режимах
	if (
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	41 f1       	breq	.+80     	; 0x1f36 <NumerKey+0xce>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	88 23       	and	r24, r24
    1eea:	29 f1       	breq	.+74     	; 0x1f36 <NumerKey+0xce>
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	11 f1       	breq	.+68     	; 0x1f36 <NumerKey+0xce>
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	85 30       	cpi	r24, 0x05	; 5
    1ef6:	f9 f0       	breq	.+62     	; 0x1f36 <NumerKey+0xce>
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	86 30       	cpi	r24, 0x06	; 6
    1efc:	e1 f0       	breq	.+56     	; 0x1f36 <NumerKey+0xce>
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	87 30       	cpi	r24, 0x07	; 7
    1f02:	c9 f0       	breq	.+50     	; 0x1f36 <NumerKey+0xce>
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	88 30       	cpi	r24, 0x08	; 8
    1f08:	b1 f0       	breq	.+44     	; 0x1f36 <NumerKey+0xce>
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	89 30       	cpi	r24, 0x09	; 9
    1f0e:	99 f0       	breq	.+38     	; 0x1f36 <NumerKey+0xce>
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	88 31       	cpi	r24, 0x18	; 24
    1f14:	81 f0       	breq	.+32     	; 0x1f36 <NumerKey+0xce>
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	8a 31       	cpi	r24, 0x1A	; 26
    1f1a:	69 f0       	breq	.+26     	; 0x1f36 <NumerKey+0xce>
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	8c 31       	cpi	r24, 0x1C	; 28
    1f20:	51 f0       	breq	.+20     	; 0x1f36 <NumerKey+0xce>
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	8d 31       	cpi	r24, 0x1D	; 29
    1f26:	39 f0       	breq	.+14     	; 0x1f36 <NumerKey+0xce>
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	8f 31       	cpi	r24, 0x1F	; 31
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <NumerKey+0xce>
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	81 32       	cpi	r24, 0x21	; 33
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <NumerKey+0xce>
		(MD_SETUP_WAITPSWD != mode) && (MD_TEL != mode) &&
		(MD_SETUP_TIME != mode) && (MD_SETUP_NEWPSWD != mode)
		&& (MD_SETUP_SENSORS_NEWBAUDRATE != mode)
		&& (MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT != mode)
		&& (MD_SETUP_SENSORS_LIST_DEVICE_SETPORT != mode)
		&& (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE != mode)
		&& (MD_SETUP_X232_PACKET != mode)
		&& (MD_SETUP_TEL_AUTO_DIAL_NUMBER != mode)
		&& (MD_SETUP_SETTINGS_RAM != mode)
		&& (MD_SETUP_SETTINGS_EEPROM != mode)
		&& (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 != mode)
		&& (MD_REDUCE_EDIT_ != mode)
		)
		return;
    1f34:	a2 c1       	rjmp	.+836    	; 0x227a <NumerKey+0x412>

//	k = g_InputLens[mode];

	if ((MAX_INPUT_LENS_COUNT >= mode) && (g_InputLens[mode]))
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	82 32       	cpi	r24, 0x22	; 34
    1f3a:	90 f4       	brcc	.+36     	; 0x1f60 <NumerKey+0xf8>
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	99 27       	eor	r25, r25
    1f40:	fc 01       	movw	r30, r24
    1f42:	ea 5c       	subi	r30, 0xCA	; 202
    1f44:	fc 4f       	sbci	r31, 0xFC	; 252
    1f46:	80 81       	ld	r24, Z
    1f48:	88 23       	and	r24, r24
    1f4a:	51 f0       	breq	.+20     	; 0x1f60 <NumerKey+0xf8>
		if (inputPos > g_InputLens[mode])
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	99 27       	eor	r25, r25
    1f50:	fc 01       	movw	r30, r24
    1f52:	ea 5c       	subi	r30, 0xCA	; 202
    1f54:	fc 4f       	sbci	r31, 0xFC	; 252
    1f56:	90 81       	ld	r25, Z
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	98 17       	cp	r25, r24
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <NumerKey+0xf8>
			return;				//  превышена длина строки для текущего режима
    1f5e:	8d c1       	rjmp	.+794    	; 0x227a <NumerKey+0x412>

	//  сдвигаем всю строку вправо, если позволяет режим
	if ((MD_SETUP_TIME != mode) && (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE != mode) &&
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	81 f1       	breq	.+96     	; 0x1fc6 <NumerKey+0x15e>
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	89 30       	cpi	r24, 0x09	; 9
    1f6a:	69 f1       	breq	.+90     	; 0x1fc6 <NumerKey+0x15e>
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	80 32       	cpi	r24, 0x20	; 32
    1f70:	51 f1       	breq	.+84     	; 0x1fc6 <NumerKey+0x15e>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	8c 31       	cpi	r24, 0x1C	; 28
    1f76:	39 f1       	breq	.+78     	; 0x1fc6 <NumerKey+0x15e>
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	8d 31       	cpi	r24, 0x1D	; 29
    1f7c:	21 f1       	breq	.+72     	; 0x1fc6 <NumerKey+0x15e>
		(MD_REDUCE_EDIT != mode) && (MD_SETUP_SETTINGS_RAM != mode)
		&& (MD_SETUP_SETTINGS_EEPROM != mode)
		)
	{
		for (k = LINE_LEN - 1; k > inputPos; k--)
    1f7e:	8f e0       	ldi	r24, 0x0F	; 15
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	9b 81       	ldd	r25, Y+3	; 0x03
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	89 17       	cp	r24, r25
    1f88:	80 f4       	brcc	.+32     	; 0x1faa <NumerKey+0x142>
			g_szInput[k] = g_szInput[k - 1];
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	99 27       	eor	r25, r25
    1f8e:	dc 01       	movw	r26, r24
    1f90:	ae 5d       	subi	r26, 0xDE	; 222
    1f92:	b9 4f       	sbci	r27, 0xF9	; 249
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	99 27       	eor	r25, r25
    1f98:	fc 01       	movw	r30, r24
    1f9a:	ef 5d       	subi	r30, 0xDF	; 223
    1f9c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8c 93       	st	X, r24
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	81 50       	subi	r24, 0x01	; 1
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
    1fa8:	ec cf       	rjmp	.-40     	; 0x1f82 <NumerKey+0x11a>

		SetCaret(LINE_2_START_POS + inputPos + 1);
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	8f 5b       	subi	r24, 0xBF	; 191
    1fae:	0e 94 47 29 	call	0x528e <SetCaret>
		OutStr(g_szInput + inputPos + 1);
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	99 27       	eor	r25, r25
    1fb6:	8d 5d       	subi	r24, 0xDD	; 221
    1fb8:	99 4f       	sbci	r25, 0xF9	; 249
    1fba:	0e 94 24 29 	call	0x5248 <OutStr>
		SetCaret(LINE_2_START_POS + inputPos);
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	80 5c       	subi	r24, 0xC0	; 192
    1fc2:	0e 94 47 29 	call	0x528e <SetCaret>
	}

	g_szInput[inputPos] = numk2;
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	99 27       	eor	r25, r25
    1fca:	fc 01       	movw	r30, r24
    1fcc:	ee 5d       	subi	r30, 0xDE	; 222
    1fce:	f9 4f       	sbci	r31, 0xF9	; 249
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	80 83       	st	Z, r24
	inputPos++;
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	8c 83       	std	Y+4, r24	; 0x04

	//TODO: какую то ветку можно упростить
	if (/*(MD_TEL == mode) || */(MD_SETUP_SENSORS_NEWBAUDRATE == mode) ||
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	86 30       	cpi	r24, 0x06	; 6
    1fde:	51 f0       	breq	.+20     	; 0x1ff4 <NumerKey+0x18c>
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	87 30       	cpi	r24, 0x07	; 7
    1fe4:	39 f0       	breq	.+14     	; 0x1ff4 <NumerKey+0x18c>
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	88 31       	cpi	r24, 0x18	; 24
    1fea:	21 f0       	breq	.+8      	; 0x1ff4 <NumerKey+0x18c>
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	8f 31       	cpi	r24, 0x1F	; 31
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <NumerKey+0x18c>
    1ff2:	04 c0       	rjmp	.+8      	; 0x1ffc <NumerKey+0x194>
		(MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT == mode)||
		(MD_SETUP_X232_PACKET == mode) ||
		(MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 == mode))
		OutData(numk2);	//  все цифры выводятся на экран
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	0e 94 e7 28 	call	0x51ce <OutData>
    1ffa:	e0 c0       	rjmp	.+448    	; 0x21bc <NumerKey+0x354>
	else if ((MD_SETUP_WAITPSWD == mode)||(MD_SETUP_NEWPSWD == mode))
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	21 f0       	breq	.+8      	; 0x200a <NumerKey+0x1a2>
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	85 30       	cpi	r24, 0x05	; 5
    2006:	09 f0       	breq	.+2      	; 0x200a <NumerKey+0x1a2>
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <NumerKey+0x1aa>
		OutData('*');		//  звездочки вместо пароля
    200a:	8a e2       	ldi	r24, 0x2A	; 42
    200c:	0e 94 e7 28 	call	0x51ce <OutData>
    2010:	d5 c0       	rjmp	.+426    	; 0x21bc <NumerKey+0x354>
	else if (MD_SETUP_TIME == mode)
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	59 f5       	brne	.+86     	; 0x206e <NumerKey+0x206>
	{
		OutData(numk2);
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	0e 94 e7 28 	call	0x51ce <OutData>

		if (2 == inputPos)
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	82 30       	cpi	r24, 0x02	; 2
    2022:	19 f4       	brne	.+6      	; 0x202a <NumerKey+0x1c2>
			key = ':';
    2024:	8a e3       	ldi	r24, 0x3A	; 58
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <NumerKey+0x1e0>
		else if (5 == inputPos)
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	85 30       	cpi	r24, 0x05	; 5
    202e:	19 f4       	brne	.+6      	; 0x2036 <NumerKey+0x1ce>
			key = ' ';
    2030:	80 e2       	ldi	r24, 0x20	; 32
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	09 c0       	rjmp	.+18     	; 0x2048 <NumerKey+0x1e0>
		else if ((8 == inputPos) || (11 == inputPos))
    2036:	8c 81       	ldd	r24, Y+4	; 0x04
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	21 f0       	breq	.+8      	; 0x2044 <NumerKey+0x1dc>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	8b 30       	cpi	r24, 0x0B	; 11
    2040:	09 f0       	breq	.+2      	; 0x2044 <NumerKey+0x1dc>
    2042:	0f c1       	rjmp	.+542    	; 0x2262 <NumerKey+0x3fa>
			key = '.';
    2044:	8e e2       	ldi	r24, 0x2E	; 46
    2046:	89 83       	std	Y+1, r24	; 0x01
		else
			goto ee;

		OutData(key);
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	0e 94 e7 28 	call	0x51ce <OutData>
		g_szInput[inputPos] = key;
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	99 27       	eor	r25, r25
    2052:	fc 01       	movw	r30, r24
    2054:	ee 5d       	subi	r30, 0xDE	; 222
    2056:	f9 4f       	sbci	r31, 0xF9	; 249
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	80 83       	st	Z, r24
		inputPos++;
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	8c 83       	std	Y+4, r24	; 0x04
		g_CaretPos++;
    2062:	80 91 43 06 	lds	r24, 0x0643
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	80 93 43 06 	sts	0x0643, r24
    206c:	a7 c0       	rjmp	.+334    	; 0x21bc <NumerKey+0x354>

	} else if (MD_SETUP_SENSORS_LIST_DEVICE_SETPORT == mode)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	88 30       	cpi	r24, 0x08	; 8
    2072:	09 f0       	breq	.+2      	; 0x2076 <NumerKey+0x20e>
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <NumerKey+0x294>
	{	//  g_CurDev.ports - назначение портов текущего модуля датчиков

		if (!numk)
    2076:	8e 81       	ldd	r24, Y+6	; 0x06
    2078:	88 23       	and	r24, r24
    207a:	09 f5       	brne	.+66     	; 0x20be <NumerKey+0x256>
		{	//  нажали 0-смена подрежима 1)мониторинг сработки 2)детальный
			//  мониторинг 3)режим установки и обратно назначений портов
			if (++g_CurDev.mode == 3)
    207c:	80 91 e5 07 	lds	r24, 0x07E5
    2080:	8f 5f       	subi	r24, 0xFF	; 255
    2082:	80 93 e5 07 	sts	0x07E5, r24
    2086:	83 30       	cpi	r24, 0x03	; 3
    2088:	11 f4       	brne	.+4      	; 0x208e <NumerKey+0x226>
				g_CurDev.mode = 0;
    208a:	10 92 e5 07 	sts	0x07E5, r1

			//  если нужно, включаем режим опроса встроенных датчиков
			if (g_CurDev.mode)
    208e:	80 91 e5 07 	lds	r24, 0x07E5
    2092:	88 23       	and	r24, r24
    2094:	51 f0       	breq	.+20     	; 0x20aa <NumerKey+0x242>
			{
				builtinSensorsPollInterval = g_BuiltSensorsPollInterval;
    2096:	80 91 bf 06 	lds	r24, 0x06BF
    209a:	80 93 70 07 	sts	0x0770, r24
				HFON;
    209e:	80 91 38 00 	lds	r24, 0x0038
    20a2:	80 68       	ori	r24, 0x80	; 128
    20a4:	80 93 38 00 	sts	0x0038, r24
    20a8:	08 c0       	rjmp	.+16     	; 0x20ba <NumerKey+0x252>
			}
			else
			{
				builtinSensorsPollInterval = 0;
    20aa:	10 92 70 07 	sts	0x0770, r1
				HFOFF;
    20ae:	8f e7       	ldi	r24, 0x7F	; 127
    20b0:	90 91 38 00 	lds	r25, 0x0038
    20b4:	89 23       	and	r24, r25
    20b6:	80 93 38 00 	sts	0x0038, r24
			}

			g_CurDev.ports_state = 0;
    20ba:	10 92 e0 07 	sts	0x07E0, r1
		}

		if (!g_CurDev.mode)
    20be:	80 91 e5 07 	lds	r24, 0x07E5
    20c2:	88 23       	and	r24, r24
    20c4:	b9 f4       	brne	.+46     	; 0x20f4 <NumerKey+0x28c>
			if ((numk < 9) && (numk > 0))
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	89 30       	cpi	r24, 0x09	; 9
    20ca:	a0 f4       	brcc	.+40     	; 0x20f4 <NumerKey+0x28c>
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	88 23       	and	r24, r24
    20d0:	89 f0       	breq	.+34     	; 0x20f4 <NumerKey+0x28c>
				g_CurDev.ports ^= 1 << (numk - 1);
    20d2:	8e 81       	ldd	r24, Y+6	; 0x06
    20d4:	99 27       	eor	r25, r25
    20d6:	9c 01       	movw	r18, r24
    20d8:	21 50       	subi	r18, 0x01	; 1
    20da:	30 40       	sbci	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <NumerKey+0x27e>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	2a 95       	dec	r18
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <NumerKey+0x27a>
    20ea:	20 91 df 07 	lds	r18, 0x07DF
    20ee:	82 27       	eor	r24, r18
    20f0:	80 93 df 07 	sts	0x07DF, r24

		PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SETPORT);
    20f4:	88 e0       	ldi	r24, 0x08	; 8
    20f6:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    20fa:	60 c0       	rjmp	.+192    	; 0x21bc <NumerKey+0x354>

	} else if (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == mode)
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	89 30       	cpi	r24, 0x09	; 9
    2100:	09 f0       	breq	.+2      	; 0x2104 <NumerKey+0x29c>
    2102:	4c c0       	rjmp	.+152    	; 0x219c <NumerKey+0x334>
	{
		if (inputPos == 12)
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	8c 30       	cpi	r24, 0x0C	; 12
    2108:	09 f4       	brne	.+2      	; 0x210c <NumerKey+0x2a4>
			return;	//  при этом остается лишний символ в g_szInput
    210a:	b7 c0       	rjmp	.+366    	; 0x227a <NumerKey+0x412>

		if ((inputPos == 1) || (inputPos == 8))
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	21 f0       	breq	.+8      	; 0x211a <NumerKey+0x2b2>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	88 30       	cpi	r24, 0x08	; 8
    2116:	09 f0       	breq	.+2      	; 0x211a <NumerKey+0x2b2>
    2118:	35 c0       	rjmp	.+106    	; 0x2184 <NumerKey+0x31c>
		{
			if (inputPos == 1)		//  первый знак
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	39 f4       	brne	.+14     	; 0x212e <NumerKey+0x2c6>
				if (g_CurDev.threshold1)		//  еще присутствует старое значение
    2120:	80 91 e1 07 	lds	r24, 0x07E1
    2124:	90 91 e2 07 	lds	r25, 0x07E2
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	09 f0       	breq	.+2      	; 0x212e <NumerKey+0x2c6>
					//  попытка поменять имеющееся значение(нижнее) на новое
					numk = 0;
    212c:	1e 82       	std	Y+6, r1	; 0x06

			if (inputPos == 8)		//  первый знак
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	88 30       	cpi	r24, 0x08	; 8
    2132:	41 f4       	brne	.+16     	; 0x2144 <NumerKey+0x2dc>
				if (g_CurDev.threshold2)		//  еще присутствует старое значение
    2134:	80 91 e3 07 	lds	r24, 0x07E3
    2138:	90 91 e4 07 	lds	r25, 0x07E4
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	11 f0       	breq	.+4      	; 0x2144 <NumerKey+0x2dc>
					//  попытка поменять имеющееся значение(верхнее) на новое
					numk = 7;
    2140:	87 e0       	ldi	r24, 0x07	; 7
    2142:	8e 83       	std	Y+6, r24	; 0x06

			memset(g_szInput + numk, 0, sizeof(g_szInput) - numk);
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	28 2f       	mov	r18, r24
    2148:	33 27       	eor	r19, r19
    214a:	81 e1       	ldi	r24, 0x11	; 17
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	82 1b       	sub	r24, r18
    2150:	93 0b       	sbc	r25, r19
    2152:	9c 01       	movw	r18, r24
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	99 27       	eor	r25, r25
    2158:	8e 5d       	subi	r24, 0xDE	; 222
    215a:	99 4f       	sbci	r25, 0xF9	; 249
    215c:	a9 01       	movw	r20, r18
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	0e 94 11 4f 	call	0x9e22 <memset>
			g_szInput[inputPos - 1] = numk2;
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	99 27       	eor	r25, r25
    216a:	fc 01       	movw	r30, r24
    216c:	ef 5d       	subi	r30, 0xDF	; 223
    216e:	f9 4f       	sbci	r31, 0xF9	; 249
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	80 83       	st	Z, r24
			OutStr("      ");
    2174:	8f e5       	ldi	r24, 0x5F	; 95
    2176:	94 e0       	ldi	r25, 0x04	; 4
    2178:	0e 94 24 29 	call	0x5248 <OutStr>
			SetCaret(LINE_2_START_POS + numk);
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	80 5c       	subi	r24, 0xC0	; 192
    2180:	0e 94 47 29 	call	0x528e <SetCaret>
		}

		OutData(numk2);
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	0e 94 e7 28 	call	0x51ce <OutData>

		if (inputPos == 4)
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	b1 f4       	brne	.+44     	; 0x21bc <NumerKey+0x354>
		{	//  перейти ко вводу второго порога
			inputPos = 7;
    2190:	87 e0       	ldi	r24, 0x07	; 7
    2192:	8c 83       	std	Y+4, r24	; 0x04
			g_CaretPos = LINE_2_START_POS + 6;		//  учитывается g_CaretPos++
    2194:	86 e4       	ldi	r24, 0x46	; 70
    2196:	80 93 43 06 	sts	0x0643, r24
    219a:	10 c0       	rjmp	.+32     	; 0x21bc <NumerKey+0x354>
		}
	}else
	if ((MD_SETUP_SETTINGS_RAM == mode) || (MD_SETUP_SETTINGS_EEPROM == mode))
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	8c 31       	cpi	r24, 0x1C	; 28
    21a0:	21 f0       	breq	.+8      	; 0x21aa <NumerKey+0x342>
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	8d 31       	cpi	r24, 0x1D	; 29
    21a6:	09 f0       	breq	.+2      	; 0x21aa <NumerKey+0x342>
    21a8:	09 c0       	rjmp	.+18     	; 0x21bc <NumerKey+0x354>
	{
		if (4 == inputPos)
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	84 30       	cpi	r24, 0x04	; 4
    21ae:	19 f4       	brne	.+6      	; 0x21b6 <NumerKey+0x34e>
		{
			GetTetradeFromAdr();
    21b0:	0e 94 e1 12 	call	0x25c2 <GetTetradeFromAdr>
			return;
    21b4:	62 c0       	rjmp	.+196    	; 0x227a <NumerKey+0x412>
		}
		else
			OutData(numk2);
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	0e 94 e7 28 	call	0x51ce <OutData>
	}

	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 == mode)
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	8f 31       	cpi	r24, 0x1F	; 31
    21c0:	c9 f4       	brne	.+50     	; 0x21f4 <NumerKey+0x38c>
	{
		if (1 == inputPos)
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	b1 f4       	brne	.+44     	; 0x21f4 <NumerKey+0x38c>
		{
			memset(g_szInput, 0, sizeof(g_szInput));
    21c8:	41 e1       	ldi	r20, 0x11	; 17
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	82 e2       	ldi	r24, 0x22	; 34
    21d2:	96 e0       	ldi	r25, 0x06	; 6
    21d4:	0e 94 11 4f 	call	0x9e22 <memset>
			g_szInput[inputPos - 1] = numk2;
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	99 27       	eor	r25, r25
    21dc:	fc 01       	movw	r30, r24
    21de:	ef 5d       	subi	r30, 0xDF	; 223
    21e0:	f9 4f       	sbci	r31, 0xF9	; 249
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	80 83       	st	Z, r24
			OutStr("      ");
    21e6:	8f e5       	ldi	r24, 0x5F	; 95
    21e8:	94 e0       	ldi	r25, 0x04	; 4
    21ea:	0e 94 24 29 	call	0x5248 <OutStr>
			g_CaretPos = LINE_2_START_POS;
    21ee:	80 e4       	ldi	r24, 0x40	; 64
    21f0:	80 93 43 06 	sts	0x0643, r24
		}
	}

	if (MD_TEL == mode)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	88 23       	and	r24, r24
    21f8:	e9 f4       	brne	.+58     	; 0x2234 <NumerKey+0x3cc>
	{
		if (!g_bSilent)
    21fa:	80 91 11 07 	lds	r24, 0x0711
    21fe:	88 23       	and	r24, r24
    2200:	19 f4       	brne	.+6      	; 0x2208 <NumerKey+0x3a0>
			DialDigit(numk);
    2202:	8e 81       	ldd	r24, Y+6	; 0x06
    2204:	0e 94 14 25 	call	0x4a28 <DialDigit>

		OutData(numk2);
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	0e 94 e7 28 	call	0x51ce <OutData>

		if (1 == inputPos)
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	41 f4       	brne	.+16     	; 0x2224 <NumerKey+0x3bc>
			//  очистка старого, если начали набирать новый	номер
			memset(&g_szLastNumber, 0, sizeof(g_szInput));
    2214:	41 e1       	ldi	r20, 0x11	; 17
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	85 e8       	ldi	r24, 0x85	; 133
    221e:	96 e0       	ldi	r25, 0x06	; 6
    2220:	0e 94 11 4f 	call	0x9e22 <memset>

		g_szLastNumber[inputPos - 1] = numk2;
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	99 27       	eor	r25, r25
    2228:	fc 01       	movw	r30, r24
    222a:	ec 57       	subi	r30, 0x7C	; 124
    222c:	f9 4f       	sbci	r31, 0xF9	; 249
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	80 83       	st	Z, r24
    2232:	17 c0       	rjmp	.+46     	; 0x2262 <NumerKey+0x3fa>
	}else
	if (MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode)
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	8a 31       	cpi	r24, 0x1A	; 26
    2238:	21 f4       	brne	.+8      	; 0x2242 <NumerKey+0x3da>
	{
		OutData(numk2);
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	0e 94 e7 28 	call	0x51ce <OutData>
    2240:	10 c0       	rjmp	.+32     	; 0x2262 <NumerKey+0x3fa>
	}else
	if ((MD_REDUCE_EDIT_ == mode))
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	81 32       	cpi	r24, 0x21	; 33
    2246:	69 f4       	brne	.+26     	; 0x2262 <NumerKey+0x3fa>
	{
		if (1 == inputPos)
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	39 f4       	brne	.+14     	; 0x225c <NumerKey+0x3f4>
		{
			ClearInput();
    224e:	0e 94 98 0b 	call	0x1730 <ClearInput>
			ClearSecondLine();
    2252:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>
			g_szInput[0] = numk2;
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	80 93 22 06 	sts	0x0622, r24
		};

		OutData(numk2);
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	0e 94 e7 28 	call	0x51ce <OutData>
	}
ee:
	g_InputPos = inputPos;
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	80 93 33 06 	sts	0x0633, r24

	g_CaretPos++;
    2268:	80 91 43 06 	lds	r24, 0x0643
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 93 43 06 	sts	0x0643, r24
	SetCaret(g_CaretPos);
    2272:	80 91 43 06 	lds	r24, 0x0643
    2276:	0e 94 47 29 	call	0x528e <SetCaret>
    227a:	26 96       	adiw	r28, 0x06	; 6
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <Escape>:
}

//  обработчик нажатия клавиши *
void Escape(void)
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	22 97       	sbiw	r28, 0x02	; 2
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
	unsigned char mode = g_Mode;	//  выгодно, если кол-во mode > 15
    22a0:	80 91 f0 06 	lds	r24, 0x06F0
    22a4:	89 83       	std	Y+1, r24	; 0x01
	unsigned char _mode = g_curBarValue;
    22a6:	80 91 10 07 	lds	r24, 0x0710
    22aa:	8a 83       	std	Y+2, r24	; 0x02

	HideCaret();
    22ac:	0e 94 91 29 	call	0x5322 <HideCaret>
	g_GalkaPunkt = 0xFF;
    22b0:	8f ef       	ldi	r24, 0xFF	; 255
    22b2:	80 93 59 07 	sts	0x0759, r24

	if (MD_SETUP_WAITPSWD == mode)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	82 30       	cpi	r24, 0x02	; 2
    22ba:	b9 f4       	brne	.+46     	; 0x22ea <Escape+0x5e>
	{	//  отмена перехода в какой-то режим(g_curBarValue - в какой режим хотели)
		if (MD_HELLO == _mode)
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	49 f4       	brne	.+18     	; 0x22d4 <Escape+0x48>
		{	//  отмена ввода пароля на выход из режима охраны - возврат в режим охраны
			PrepareToMode(MD_OHRANA);
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			HideCaret();
    22c8:	0e 94 91 29 	call	0x5322 <HideCaret>
			g_ShowTime = TRUE;
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	80 93 f7 06 	sts	0x06F7, r24
    22d2:	b3 c0       	rjmp	.+358    	; 0x243a <Escape+0x1ae>
		}else
		if ((MD_SETUP == _mode) || (MD_OHRANA == _mode))
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	8b 30       	cpi	r24, 0x0B	; 11
    22d8:	21 f0       	breq	.+8      	; 0x22e2 <Escape+0x56>
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	09 f0       	breq	.+2      	; 0x22e2 <Escape+0x56>
    22e0:	ac c0       	rjmp	.+344    	; 0x243a <Escape+0x1ae>
			PrepareToMode(MD_HELLO);
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    22e8:	a8 c0       	rjmp	.+336    	; 0x243a <Escape+0x1ae>
	}else
	if ((MD_SETUP == mode) || (MD_HELLO == mode))
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	8b 30       	cpi	r24, 0x0B	; 11
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <Escape+0x6c>
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <Escape+0x6c>
    22f6:	04 c0       	rjmp	.+8      	; 0x2300 <Escape+0x74>
	{
		PrepareToMode(MD_HELLO);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    22fe:	9d c0       	rjmp	.+314    	; 0x243a <Escape+0x1ae>
	}else
	if ((MD_SETUP_TIME == mode) ||	(MD_SENSORS == mode) ||
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	81 f0       	breq	.+32     	; 0x2326 <Escape+0x9a>
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	8a 30       	cpi	r24, 0x0A	; 10
    230a:	69 f0       	breq	.+26     	; 0x2326 <Escape+0x9a>
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	8c 30       	cpi	r24, 0x0C	; 12
    2310:	51 f0       	breq	.+20     	; 0x2326 <Escape+0x9a>
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	85 31       	cpi	r24, 0x15	; 21
    2316:	39 f0       	breq	.+14     	; 0x2326 <Escape+0x9a>
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	8b 31       	cpi	r24, 0x1B	; 27
    231c:	21 f0       	breq	.+8      	; 0x2326 <Escape+0x9a>
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	81 31       	cpi	r24, 0x11	; 17
    2322:	09 f0       	breq	.+2      	; 0x2326 <Escape+0x9a>
    2324:	03 c0       	rjmp	.+6      	; 0x232c <Escape+0xa0>
		(MD_SETUP_TEL == mode)  ||	(MD_SETUP_X232 == mode) ||
		(MD_SETUP_SETTINGS == mode) ||	(MD_SETUP_VOLUME == mode))
		MainMenu();
    2326:	0e 94 89 07 	call	0xf12 <MainMenu>
    232a:	87 c0       	rjmp	.+270    	; 0x243a <Escape+0x1ae>
	else
	if ((MD_SETUP_SENSORS_NEWBAUDRATE == mode) ||
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	86 30       	cpi	r24, 0x06	; 6
    2330:	39 f0       	breq	.+14     	; 0x2340 <Escape+0xb4>
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	8d 30       	cpi	r24, 0x0D	; 13
    2336:	21 f0       	breq	.+8      	; 0x2340 <Escape+0xb4>
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	8f 30       	cpi	r24, 0x0F	; 15
    233c:	09 f0       	breq	.+2      	; 0x2340 <Escape+0xb4>
    233e:	05 c0       	rjmp	.+10     	; 0x234a <Escape+0xbe>
		(MD_SETUP_SENSORS_LIST == mode) ||
		(MD_SETUP_SENSORS_ENUM == mode))
		MenuSensors(0, 0);
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	0e 94 9e 07 	call	0xf3c <MenuSensors>
    2348:	78 c0       	rjmp	.+240    	; 0x243a <Escape+0x1ae>
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE == mode)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	8e 30       	cpi	r24, 0x0E	; 14
    234e:	19 f4       	brne	.+6      	; 0x2356 <Escape+0xca>
		//MenuList();
		MainMenu();
    2350:	0e 94 89 07 	call	0xf12 <MainMenu>
    2354:	72 c0       	rjmp	.+228    	; 0x243a <Escape+0x1ae>
	else
	if ((MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT == mode)||
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	87 30       	cpi	r24, 0x07	; 7
    235a:	39 f0       	breq	.+14     	; 0x236a <Escape+0xde>
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 30       	cpi	r24, 0x08	; 8
    2360:	21 f0       	breq	.+8      	; 0x236a <Escape+0xde>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	84 31       	cpi	r24, 0x14	; 20
    2366:	09 f0       	breq	.+2      	; 0x236a <Escape+0xde>
    2368:	10 c0       	rjmp	.+32     	; 0x238a <Escape+0xfe>
		(MD_SETUP_SENSORS_LIST_DEVICE_SETPORT == mode)||
		(MD_SETUP_SENSORS_LIST_DEVICE_SENSLIST == mode))
	{
		g_CurDev.ports = tmp;	//  восстанавливаем сохраненное значение
    236a:	80 91 7e 06 	lds	r24, 0x067E
    236e:	80 93 df 07 	sts	0x07DF, r24
		builtinSensorsPollInterval = 0;	//  отключаем опрос
    2372:	10 92 70 07 	sts	0x0770, r1
		HFOFF;
    2376:	9f e7       	ldi	r25, 0x7F	; 127
    2378:	80 91 38 00 	lds	r24, 0x0038
    237c:	89 23       	and	r24, r25
    237e:	80 93 38 00 	sts	0x0038, r24
		MenuDevice(0);
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	0e 94 d3 07 	call	0xfa6 <MenuDevice>
    2388:	58 c0       	rjmp	.+176    	; 0x243a <Escape+0x1ae>
	}
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == mode)
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	89 30       	cpi	r24, 0x09	; 9
    238e:	59 f4       	brne	.+22     	; 0x23a6 <Escape+0x11a>
	{
#ifdef NEWVG
		//  выход из режима наблюдения за работой АЦП
		builtinSensorsPollInterval = 0;
    2390:	10 92 70 07 	sts	0x0770, r1
		HFOFF;
    2394:	8f e7       	ldi	r24, 0x7F	; 127
    2396:	90 91 38 00 	lds	r25, 0x0038
    239a:	89 23       	and	r24, r25
    239c:	80 93 38 00 	sts	0x0038, r24
#endif
		MenuSensor();
    23a0:	0e 94 c8 07 	call	0xf90 <MenuSensor>
    23a4:	4a c0       	rjmp	.+148    	; 0x243a <Escape+0x1ae>
	}
	else
	if ((MD_SETUP_TEL_LINEMODE == mode) ||
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	80 31       	cpi	r24, 0x10	; 16
    23aa:	21 f0       	breq	.+8      	; 0x23b4 <Escape+0x128>
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	89 31       	cpi	r24, 0x19	; 25
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <Escape+0x128>
    23b2:	03 c0       	rjmp	.+6      	; 0x23ba <Escape+0x12e>
		(MD_SETUP_TEL_AUTO_DIAL_NUMBERS == mode))
		MenuTel();
    23b4:	0e 94 18 08 	call	0x1030 <MenuTel>
    23b8:	40 c0       	rjmp	.+128    	; 0x243a <Escape+0x1ae>
	else
	if ((MD_SETUP_VOLUME_DINAMIC == mode)||(MD_SETUP_VOLUME_TELEFON == mode))
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	82 31       	cpi	r24, 0x12	; 18
    23be:	21 f0       	breq	.+8      	; 0x23c8 <Escape+0x13c>
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	83 31       	cpi	r24, 0x13	; 19
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <Escape+0x13c>
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <Escape+0x142>
		MenuVolume();
    23c8:	0e 94 35 08 	call	0x106a <MenuVolume>
    23cc:	36 c0       	rjmp	.+108    	; 0x243a <Escape+0x1ae>
	else
	if ((MD_SETUP_X232_TIMEOUT == mode)||(MD_SETUP_X232_INTERVAL == mode)
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	86 31       	cpi	r24, 0x16	; 22
    23d2:	39 f0       	breq	.+14     	; 0x23e2 <Escape+0x156>
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	87 31       	cpi	r24, 0x17	; 23
    23d8:	21 f0       	breq	.+8      	; 0x23e2 <Escape+0x156>
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	88 31       	cpi	r24, 0x18	; 24
    23de:	09 f0       	breq	.+2      	; 0x23e2 <Escape+0x156>
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <Escape+0x160>
		||	(MD_SETUP_X232_PACKET == mode)
		)
		MenuX232(0, 0);
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 40 08 	call	0x1080 <MenuX232>
    23ea:	27 c0       	rjmp	.+78     	; 0x243a <Escape+0x1ae>
	else
	if ((MD_TEL == mode) && (g_bSilent))
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	88 23       	and	r24, r24
    23f0:	41 f4       	brne	.+16     	; 0x2402 <Escape+0x176>
    23f2:	80 91 11 07 	lds	r24, 0x0711
    23f6:	88 23       	and	r24, r24
    23f8:	21 f0       	breq	.+8      	; 0x2402 <Escape+0x176>
	{	//  из режима телефона можно выйти только положив трубку
		//  но если режим телефона был "молчаливый", то Escape --> в нулевой режим
		PrepareToMode(MD_HELLO);
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2400:	1c c0       	rjmp	.+56     	; 0x243a <Escape+0x1ae>
	}else
	if (MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode)
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	8a 31       	cpi	r24, 0x1A	; 26
    2406:	21 f4       	brne	.+8      	; 0x2410 <Escape+0x184>
	{
		MenuAutoDialNumbers(0);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	0e 94 59 08 	call	0x10b2 <MenuAutoDialNumbers>
    240e:	15 c0       	rjmp	.+42     	; 0x243a <Escape+0x1ae>
	}else
	if ((MD_SETUP_SETTINGS_RAM == mode) || (MD_SETUP_SETTINGS_EEPROM == mode))
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	8c 31       	cpi	r24, 0x1C	; 28
    2414:	21 f0       	breq	.+8      	; 0x241e <Escape+0x192>
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	8d 31       	cpi	r24, 0x1D	; 29
    241a:	09 f0       	breq	.+2      	; 0x241e <Escape+0x192>
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <Escape+0x198>
		MenuSettings();
    241e:	0e 94 2a 08 	call	0x1054 <MenuSettings>
    2422:	0b c0       	rjmp	.+22     	; 0x243a <Escape+0x1ae>
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR == mode)
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8e 31       	cpi	r24, 0x1E	; 30
    2428:	19 f4       	brne	.+6      	; 0x2430 <Escape+0x1a4>
		MenuListPort();
    242a:	0e 94 0d 08 	call	0x101a <MenuListPort>
    242e:	05 c0       	rjmp	.+10     	; 0x243a <Escape+0x1ae>
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 == mode)
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	8f 31       	cpi	r24, 0x1F	; 31
    2434:	11 f4       	brne	.+4      	; 0x243a <Escape+0x1ae>
		MenuSensor();
    2436:	0e 94 c8 07 	call	0xf90 <MenuSensor>
	if (MD_SETUP_NEWPSWD == mode)
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	85 30       	cpi	r24, 0x05	; 5
    243e:	11 f4       	brne	.+4      	; 0x2444 <Escape+0x1b8>
		MenuSettings();
    2440:	0e 94 2a 08 	call	0x1054 <MenuSettings>
    2444:	22 96       	adiw	r28, 0x02	; 2
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <DialNumber>:
}

void DialNumber(void)
{
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	22 97       	sbiw	r28, 0x02	; 2
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
	unsigned char k, len = strlen(g_szLastNumber);
    246a:	85 e8       	ldi	r24, 0x85	; 133
    246c:	96 e0       	ldi	r25, 0x06	; 6
    246e:	0e 94 37 4f 	call	0x9e6e <strlen>
    2472:	8a 83       	std	Y+2, r24	; 0x02

	for (k = 0; k < len; k++)
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	99 81       	ldd	r25, Y+1	; 0x01
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	98 17       	cp	r25, r24
    247c:	08 f0       	brcs	.+2      	; 0x2480 <DialNumber+0x2a>
    247e:	5c c0       	rjmp	.+184    	; 0x2538 <DialNumber+0xe2>
	{
		SetCaret(LINE_2_START_POS + 2 + k);
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	8e 5b       	subi	r24, 0xBE	; 190
    2484:	0e 94 47 29 	call	0x528e <SetCaret>
		OutData(32);
    2488:	80 e2       	ldi	r24, 0x20	; 32
    248a:	0e 94 e7 28 	call	0x51ce <OutData>

		if (g_szLastNumber[k] == DIAL_PAUSE)		//  пауза
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	99 27       	eor	r25, r25
    2492:	fc 01       	movw	r30, r24
    2494:	eb 57       	subi	r30, 0x7B	; 123
    2496:	f9 4f       	sbci	r31, 0xF9	; 249
    2498:	80 81       	ld	r24, Z
    249a:	8e 3b       	cpi	r24, 0xBE	; 190
    249c:	81 f5       	brne	.+96     	; 0x24fe <DialNumber+0xa8>
		{
			if (1 == k)
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	29 f4       	brne	.+10     	; 0x24ae <DialNumber+0x58>
			{	//  пауза после девятки для выхода на городскую АТС
				delayms(1000);
    24a4:	88 ee       	ldi	r24, 0xE8	; 232
    24a6:	93 e0       	ldi	r25, 0x03	; 3
    24a8:	0e 94 ba 38 	call	0x7174 <delayms>
    24ac:	31 c0       	rjmp	.+98     	; 0x2510 <DialNumber+0xba>
				//  TODO - сюда надо воткнуть определение состояния линии
			}else
			{	//  скорее всего вторая пауза - число N после нее означает паузу
				//  в N секунд
				if (len - k - 1 < 3)
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	33 27       	eor	r19, r19
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	99 27       	eor	r25, r25
    24b8:	28 1b       	sub	r18, r24
    24ba:	39 0b       	sbc	r19, r25
    24bc:	c9 01       	movw	r24, r18
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	83 30       	cpi	r24, 0x03	; 3
    24c2:	91 05       	cpc	r25, r1
    24c4:	2c f5       	brge	.+74     	; 0x2510 <DialNumber+0xba>
				{	//  если осталось допустимое кол-во секунд для паузы после номера
					k = atoi(g_szLastNumber + k + 1);
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	99 27       	eor	r25, r25
    24ca:	8a 57       	subi	r24, 0x7A	; 122
    24cc:	99 4f       	sbci	r25, 0xF9	; 249
    24ce:	0e 94 9e 4e 	call	0x9d3c <atoi>
    24d2:	89 83       	std	Y+1, r24	; 0x01
					if (k > 15)
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	80 31       	cpi	r24, 0x10	; 16
    24d8:	10 f0       	brcs	.+4      	; 0x24de <DialNumber+0x88>
						k = 15;
    24da:	8f e0       	ldi	r24, 0x0F	; 15
    24dc:	89 83       	std	Y+1, r24	; 0x01

					delayms(k* 1000);
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	28 2f       	mov	r18, r24
    24e2:	33 27       	eor	r19, r19
    24e4:	88 ee       	ldi	r24, 0xE8	; 232
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	28 9f       	mul	r18, r24
    24ea:	a0 01       	movw	r20, r0
    24ec:	29 9f       	mul	r18, r25
    24ee:	50 0d       	add	r21, r0
    24f0:	38 9f       	mul	r19, r24
    24f2:	50 0d       	add	r21, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	ca 01       	movw	r24, r20
    24f8:	0e 94 ba 38 	call	0x7174 <delayms>

					break;
    24fc:	1d c0       	rjmp	.+58     	; 0x2538 <DialNumber+0xe2>
				}
			}
		}
		else
			DialDigit(g_szLastNumber[k] - 0x30);
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	99 27       	eor	r25, r25
    2502:	fc 01       	movw	r30, r24
    2504:	eb 57       	subi	r30, 0x7B	; 123
    2506:	f9 4f       	sbci	r31, 0xF9	; 249
    2508:	80 81       	ld	r24, Z
    250a:	80 53       	subi	r24, 0x30	; 48
    250c:	0e 94 14 25 	call	0x4a28 <DialDigit>

		SetCaret(LINE_2_START_POS + 2 + k);
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	8e 5b       	subi	r24, 0xBE	; 190
    2514:	0e 94 47 29 	call	0x528e <SetCaret>
		OutData(g_szLastNumber[k]);
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	99 27       	eor	r25, r25
    251c:	fc 01       	movw	r30, r24
    251e:	eb 57       	subi	r30, 0x7B	; 123
    2520:	f9 4f       	sbci	r31, 0xF9	; 249
    2522:	80 81       	ld	r24, Z
    2524:	0e 94 e7 28 	call	0x51ce <OutData>

		delayms(500);
    2528:	84 ef       	ldi	r24, 0xF4	; 244
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	0e 94 ba 38 	call	0x7174 <delayms>
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	9f cf       	rjmp	.-194    	; 0x2476 <DialNumber+0x20>
    2538:	22 96       	adiw	r28, 0x02	; 2
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <EnterSetup>:
	}
}

#ifndef REDUCE
//  обработчик нажатия клавиши REDIAL
void Redial(void)
{
	//  здесь тоже len увеличивает код на 28-30 байтов
	//unsigned char len = strlen(g_szLastNumber);

	modeBeforeZvonok = MD_HELLO;	//  если будет сеанс DTMF и "нас" вырубят,
									//  командой 07#, RingOff вернет в MD_HELLO
	if (MD_TEL == g_Mode)
	{
		if (g_bSilent)
		{	//  в режиме молчаливого набора REDIAL звонит по набранному номеру
			//  номер уже набран и высвечен на экране
			TELUP;
			delayms(500);
			DialNumber();
		}
		else
		{
			if (strlen(g_szLastNumber))
			{
				OutStr(g_szLastNumber);
				DialNumber();
			}
		}
	}

	if (MD_HELLO == g_Mode)
	{	//  набор последнего номера, по которому звонили (не набирали!)

		if (strlen(g_szLastNumber))
		{
			Telephone();

			TELUP;

			delayms(500);

			OutStr(g_szLastNumber);
			DialNumber();
		}
	}
}
#endif
//  обработчик нажатия # в режиме ввода пароля
//  используется при входе в разные режимы
void EnterSetup(void)
{
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
	if (strcmp(g_szInput, g_szSetupPassword))
    2552:	65 ec       	ldi	r22, 0xC5	; 197
    2554:	76 e0       	ldi	r23, 0x06	; 6
    2556:	82 e2       	ldi	r24, 0x22	; 34
    2558:	96 e0       	ldi	r25, 0x06	; 6
    255a:	0e 94 26 4f 	call	0x9e4c <strcmp>
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	71 f0       	breq	.+28     	; 0x257e <EnterSetup+0x34>
	{
		if (strcmp(g_szInput, g_szSecretPassword))
    2562:	60 91 26 01 	lds	r22, 0x0126
    2566:	70 91 27 01 	lds	r23, 0x0127
    256a:	82 e2       	ldi	r24, 0x22	; 34
    256c:	96 e0       	ldi	r25, 0x06	; 6
    256e:	0e 94 26 4f 	call	0x9e4c <strcmp>
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	21 f0       	breq	.+8      	; 0x257e <EnterSetup+0x34>
		{
			PrepareToMode(MD_SETUP_WAITPSWD);
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			return;
    257c:	1f c0       	rjmp	.+62     	; 0x25bc <EnterSetup+0x72>
		}
	}

	//  g_curBarValue хранит режим, в который надо войти после ввода пароля
	if (MD_SETUP == g_curBarValue)
    257e:	80 91 10 07 	lds	r24, 0x0710
    2582:	8b 30       	cpi	r24, 0x0B	; 11
    2584:	51 f4       	brne	.+20     	; 0x259a <EnterSetup+0x50>
	{
		EnablePoll(0);	//  отключаем протокольный опрос - если надо, включат в Setup
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	0e 94 34 38 	call	0x7068 <EnablePoll>
		g_oldSetupFirstLine = 0;
    258c:	10 92 0d 07 	sts	0x070D, r1
		g_oldSetupCurItem = 0;
    2590:	10 92 96 06 	sts	0x0696, r1
		MainMenu();
    2594:	0e 94 89 07 	call	0xf12 <MainMenu>
    2598:	11 c0       	rjmp	.+34     	; 0x25bc <EnterSetup+0x72>
	}else if (MD_OHRANA == g_curBarValue)
    259a:	80 91 10 07 	lds	r24, 0x0710
    259e:	84 30       	cpi	r24, 0x04	; 4
    25a0:	19 f4       	brne	.+6      	; 0x25a8 <EnterSetup+0x5e>
	{	//  вход в режим охраны здесь
		Ohrana_();
    25a2:	0e 94 30 1c 	call	0x3860 <Ohrana_>
    25a6:	0a c0       	rjmp	.+20     	; 0x25bc <EnterSetup+0x72>
	}
	else if (MD_HELLO == g_curBarValue)
    25a8:	80 91 10 07 	lds	r24, 0x0710
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	31 f4       	brne	.+12     	; 0x25bc <EnterSetup+0x72>
	{
		EnablePoll(0);	//  отключаем протокольный опрос - если надо, включат в Setup
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	0e 94 34 38 	call	0x7068 <EnablePoll>
		PrepareToMode(MD_HELLO);
    25b6:	83 e0       	ldi	r24, 0x03	; 3
    25b8:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <GetTetradeFromAdr>:
	}
}

//  переход к позиции "Значение" и его вычисление
void GetTetradeFromAdr(void)
{
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	2b 97       	sbiw	r28, 0x0b	; 11
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
	unsigned char* adr;
	unsigned char k, pos, was1, byte;

	g_szInput[g_InputPos] = 0;
    25d6:	80 91 33 06 	lds	r24, 0x0633
    25da:	99 27       	eor	r25, r25
    25dc:	fc 01       	movw	r30, r24
    25de:	ee 5d       	subi	r30, 0xDE	; 222
    25e0:	f9 4f       	sbci	r31, 0xF9	; 249
    25e2:	10 82       	st	Z, r1
	SetCaret(LINE_2_START_POS + 7);		//  переход ко второму значению
    25e4:	87 e4       	ldi	r24, 0x47	; 71
    25e6:	0e 94 47 29 	call	0x528e <SetCaret>
	g_InputPos = 7;
    25ea:	87 e0       	ldi	r24, 0x07	; 7
    25ec:	80 93 33 06 	sts	0x0633, r24
	adr = (unsigned char*)HexToInt(g_szInput);
    25f0:	82 e2       	ldi	r24, 0x22	; 34
    25f2:	96 e0       	ldi	r25, 0x06	; 6
    25f4:	0e 94 6a 3a 	call	0x74d4 <HexToInt>
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01

	pos = 0;
    25fc:	1c 82       	std	Y+4, r1	; 0x04
	was1 = 0;
    25fe:	1d 82       	std	Y+5, r1	; 0x05

	for (k = 0; k < 4; k++)
    2600:	1b 82       	std	Y+3, r1	; 0x03
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	84 30       	cpi	r24, 0x04	; 4
    2606:	08 f0       	brcs	.+2      	; 0x260a <GetTetradeFromAdr+0x48>
    2608:	57 c0       	rjmp	.+174    	; 0x26b8 <GetTetradeFromAdr+0xf6>
	{
		if (MD_SETUP_SETTINGS_RAM == g_Mode)
    260a:	80 91 f0 06 	lds	r24, 0x06F0
    260e:	8c 31       	cpi	r24, 0x1C	; 28
    2610:	29 f4       	brne	.+10     	; 0x261c <GetTetradeFromAdr+0x5a>
			byte = *adr;
    2612:	e9 81       	ldd	r30, Y+1	; 0x01
    2614:	fa 81       	ldd	r31, Y+2	; 0x02
    2616:	80 81       	ld	r24, Z
    2618:	8e 83       	std	Y+6, r24	; 0x06
    261a:	12 c0       	rjmp	.+36     	; 0x2640 <GetTetradeFromAdr+0x7e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	98 87       	std	Y+8, r25	; 0x08
    2622:	8f 83       	std	Y+7, r24	; 0x07
  uint8_t result;
  asm volatile
    2624:	af 81       	ldd	r26, Y+7	; 0x07
    2626:	b8 85       	ldd	r27, Y+8	; 0x08
    2628:	0e 94 23 50 	call	0xa046 <__eeprom_read_byte_1C1D1E>
    262c:	80 2d       	mov	r24, r0
    262e:	b8 87       	std	Y+8, r27	; 0x08
    2630:	af 83       	std	Y+7, r26	; 0x07
    2632:	8b 87       	std	Y+11, r24	; 0x0b
    2634:	8b 85       	ldd	r24, Y+11	; 0x0b
    2636:	99 27       	eor	r25, r25
    2638:	9a 87       	std	Y+10, r25	; 0x0a
    263a:	89 87       	std	Y+9, r24	; 0x09
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	8e 83       	std	Y+6, r24	; 0x06
		else
			byte = eeprom_read_byte(adr);

		if (byte < 0x10)
    2640:	8e 81       	ldd	r24, Y+6	; 0x06
    2642:	80 31       	cpi	r24, 0x10	; 16
    2644:	b0 f4       	brcc	.+44     	; 0x2672 <GetTetradeFromAdr+0xb0>
		{
			g_szInput[7 + pos] = 0x30;
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	99 27       	eor	r25, r25
    264a:	fc 01       	movw	r30, r24
    264c:	e7 5d       	subi	r30, 0xD7	; 215
    264e:	f9 4f       	sbci	r31, 0xF9	; 249
    2650:	80 e3       	ldi	r24, 0x30	; 48
    2652:	80 83       	st	Z, r24
			OutData(0x30);
    2654:	80 e3       	ldi	r24, 0x30	; 48
    2656:	0e 94 e7 28 	call	0x51ce <OutData>
			pos++, was1 = 1;
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	8f 5f       	subi	r24, 0xFF	; 255
    265e:	8c 83       	std	Y+4, r24	; 0x04
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	8d 83       	std	Y+5, r24	; 0x05
			SetCaret(LINE_2_START_POS + 8 + (k << 1));
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	99 27       	eor	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	88 5b       	subi	r24, 0xB8	; 184
    266e:	0e 94 47 29 	call	0x528e <SetCaret>
		}

		OutStr(strupr(itoa((unsigned char)(byte), g_szInput + 7 + pos, 16)));
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	99 27       	eor	r25, r25
    2676:	9c 01       	movw	r18, r24
    2678:	27 5d       	subi	r18, 0xD7	; 215
    267a:	39 4f       	sbci	r19, 0xF9	; 249
    267c:	8e 81       	ldd	r24, Y+6	; 0x06
    267e:	99 27       	eor	r25, r25
    2680:	40 e1       	ldi	r20, 0x10	; 16
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	b9 01       	movw	r22, r18
    2686:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    268a:	0e 94 5d 4f 	call	0x9eba <strupr>
    268e:	0e 94 24 29 	call	0x5248 <OutStr>

		pos++;
    2692:	8c 81       	ldd	r24, Y+4	; 0x04
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	8c 83       	std	Y+4, r24	; 0x04
		if (!was1)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	88 23       	and	r24, r24
    269c:	19 f4       	brne	.+6      	; 0x26a4 <GetTetradeFromAdr+0xe2>
			pos++;
    269e:	8c 81       	ldd	r24, Y+4	; 0x04
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8c 83       	std	Y+4, r24	; 0x04

		was1 = 0, adr++;
    26a4:	1d 82       	std	Y+5, r1	; 0x05
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	a5 cf       	rjmp	.-182    	; 0x2602 <GetTetradeFromAdr+0x40>
	}

	SetCaret(LINE_2_START_POS + 7);
    26b8:	87 e4       	ldi	r24, 0x47	; 71
    26ba:	0e 94 47 29 	call	0x528e <SetCaret>
    26be:	2b 96       	adiw	r28, 0x0b	; 11
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <Enter>:
}

//  обработчик нажатия клавиши # Enter
void Enter(void)
{
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	2b 97       	sbiw	r28, 0x0b	; 11
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
	unsigned char mode = g_Mode;
    26e4:	80 91 f0 06 	lds	r24, 0x06F0
    26e8:	89 83       	std	Y+1, r24	; 0x01
	unsigned char setupItem = g_SetupItem;
    26ea:	80 91 c2 06 	lds	r24, 0x06C2
    26ee:	8a 83       	std	Y+2, r24	; 0x02
	unsigned short newBaudRate;
	unsigned char InputPos = g_InputPos;
    26f0:	80 91 33 06 	lds	r24, 0x0633
    26f4:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char* adr;

	g_GalkaPunkt = 0xFF;
    26f6:	8f ef       	ldi	r24, 0xFF	; 255
    26f8:	80 93 59 07 	sts	0x0759, r24

	if (MD_SETUP == mode)
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	8b 30       	cpi	r24, 0x0B	; 11
    2700:	89 f5       	brne	.+98     	; 0x2764 <Enter+0x94>
	{
		g_oldSetupFirstLine = g_SetupFirstLine;
    2702:	80 91 35 06 	lds	r24, 0x0635
    2706:	80 93 0d 07 	sts	0x070D, r24
		g_oldSetupCurItem = g_SetupCurItem;
    270a:	80 91 34 06 	lds	r24, 0x0634
    270e:	80 93 96 06 	sts	0x0696, r24

		if (SIN_SENSORS == setupItem)
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	88 23       	and	r24, r24
    2716:	21 f4       	brne	.+8      	; 0x2720 <Enter+0x50>
		{
			//MenuSensors(0, 0);
			MenuDevice(1);
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	0e 94 d3 07 	call	0xfa6 <MenuDevice>
    271e:	ae c2       	rjmp	.+1372   	; 0x2c7c <Enter+0x5ac>
		}else
/*		if (SIN_GSM == setupItem)
			StartLineAnalize(0);
		else
*/		if (SIN_DATETIME == setupItem)
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	21 f4       	brne	.+8      	; 0x272e <Enter+0x5e>
		{
			PrepareToMode(MD_SETUP_TIME);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			return;										//  уход от ClearInput
    272c:	a9 c2       	rjmp	.+1362   	; 0x2c80 <Enter+0x5b0>
		}
		else
		if (SIN_TELEFON == setupItem)
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	19 f4       	brne	.+6      	; 0x273a <Enter+0x6a>
			MenuTel();
    2734:	0e 94 18 08 	call	0x1030 <MenuTel>
    2738:	a1 c2       	rjmp	.+1346   	; 0x2c7c <Enter+0x5ac>
		else
		if (SIN_VOLUME == setupItem)
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	83 30       	cpi	r24, 0x03	; 3
    273e:	19 f4       	brne	.+6      	; 0x2746 <Enter+0x76>
			MenuVolume();
    2740:	0e 94 35 08 	call	0x106a <MenuVolume>
    2744:	9b c2       	rjmp	.+1334   	; 0x2c7c <Enter+0x5ac>
		else
		if (SIN_X232 == setupItem)
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	84 30       	cpi	r24, 0x04	; 4
    274a:	29 f4       	brne	.+10     	; 0x2756 <Enter+0x86>
			MenuX232(0, 0);
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	0e 94 40 08 	call	0x1080 <MenuX232>
    2754:	93 c2       	rjmp	.+1318   	; 0x2c7c <Enter+0x5ac>
#ifndef NEWVG
		else
		if (SIN_ZVUK == setupItem)
		{
			g_ShowTime = 0;
			ClearScreen();
			OutStr("Record:");
			StartRecord();
		}
#endif
		else
		if (SIN_SETTINGS == setupItem)
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	85 30       	cpi	r24, 0x05	; 5
    275a:	09 f0       	breq	.+2      	; 0x275e <Enter+0x8e>
    275c:	8f c2       	rjmp	.+1310   	; 0x2c7c <Enter+0x5ac>
		{
			MenuSettings();
    275e:	0e 94 2a 08 	call	0x1054 <MenuSettings>
    2762:	8c c2       	rjmp	.+1304   	; 0x2c7c <Enter+0x5ac>
		}
	} else
	if (MD_TEL == mode)
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <Enter+0x9c>
    276a:	88 c2       	rjmp	.+1296   	; 0x2c7c <Enter+0x5ac>
	{	//  а зачем это надо?
		//REDUCE Redial();
	}
	else if (MD_SETUP_WAITPSWD == mode)
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	82 30       	cpi	r24, 0x02	; 2
    2770:	19 f4       	brne	.+6      	; 0x2778 <Enter+0xa8>
		EnterSetup();
    2772:	0e 94 a5 12 	call	0x254a <EnterSetup>
    2776:	82 c2       	rjmp	.+1284   	; 0x2c7c <Enter+0x5ac>
	else if (MD_SETUP_TIME == mode)
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	59 f4       	brne	.+22     	; 0x2794 <Enter+0xc4>
	{
		if (ChangeTime())
    277e:	0e 94 6f 17 	call	0x2ede <ChangeTime>
    2782:	88 23       	and	r24, r24
    2784:	19 f0       	breq	.+6      	; 0x278c <Enter+0xbc>
			MainMenu();
    2786:	0e 94 89 07 	call	0xf12 <MainMenu>
    278a:	78 c2       	rjmp	.+1264   	; 0x2c7c <Enter+0x5ac>
		else
		{
			PrepareToMode(MD_SETUP_TIME);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			return;									//  уход от ClearInput
    2792:	76 c2       	rjmp	.+1260   	; 0x2c80 <Enter+0x5b0>
		}
	}else if (MD_SETUP_NEWPSWD == mode)
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	85 30       	cpi	r24, 0x05	; 5
    2798:	29 f4       	brne	.+10     	; 0x27a4 <Enter+0xd4>
	{
		ChangeSetupPassword();
    279a:	0e 94 e7 17 	call	0x2fce <ChangeSetupPassword>
		MainMenu();
    279e:	0e 94 89 07 	call	0xf12 <MainMenu>
    27a2:	6c c2       	rjmp	.+1240   	; 0x2c7c <Enter+0x5ac>
	}else if (MD_SETUP_TEL == mode)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	8c 30       	cpi	r24, 0x0C	; 12
    27a8:	99 f5       	brne	.+102    	; 0x2810 <Enter+0x140>
	{
		if (STN_AUTO_DIAL_NUMBERS == setupItem)
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	88 23       	and	r24, r24
    27ae:	21 f4       	brne	.+8      	; 0x27b8 <Enter+0xe8>
		{
			MenuAutoDialNumbers(0);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	0e 94 59 08 	call	0x10b2 <MenuAutoDialNumbers>
    27b6:	62 c2       	rjmp	.+1220   	; 0x2c7c <Enter+0x5ac>
		}else
		if (STN_AON == setupItem)
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	51 f4       	brne	.+20     	; 0x27d2 <Enter+0x102>
		{
//#ifdef DEBUG
			ClearScreen();
    27be:	0e 94 79 29 	call	0x52f2 <ClearScreen>
			OutStr(szLocalDTMF_YES);
    27c2:	86 e6       	ldi	r24, 0x66	; 102
    27c4:	94 e0       	ldi	r25, 0x04	; 4
    27c6:	0e 94 24 29 	call	0x5248 <OutStr>
			useLocalDTMF = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 93 01 07 	sts	0x0701, r24
    27d0:	55 c2       	rjmp	.+1194   	; 0x2c7c <Enter+0x5ac>
//#endif
		}else
		if (STN_LINE_MODE == setupItem)
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	29 f4       	brne	.+10     	; 0x27e2 <Enter+0x112>
		{
			Menu_(MD_SETUP_TEL_LINEMODE, MAX_TEL_LINEMODE_ITEMS);
    27d8:	62 e0       	ldi	r22, 0x02	; 2
    27da:	80 e1       	ldi	r24, 0x10	; 16
    27dc:	0e 94 6a 07 	call	0xed4 <Menu_>
    27e0:	4d c2       	rjmp	.+1178   	; 0x2c7c <Enter+0x5ac>
		}else
		if (STN_ADV_LINE_MODE == setupItem)
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	09 f0       	breq	.+2      	; 0x27ea <Enter+0x11a>
    27e8:	49 c2       	rjmp	.+1170   	; 0x2c7c <Enter+0x5ac>
		{
			//  щелчек по галке - изменить галку!
			advancedLineMode = !advancedLineMode;
    27ea:	1b 86       	std	Y+11, r1	; 0x0b
    27ec:	80 91 d1 06 	lds	r24, 0x06D1
    27f0:	88 23       	and	r24, r24
    27f2:	11 f4       	brne	.+4      	; 0x27f8 <Enter+0x128>
    27f4:	21 e0       	ldi	r18, 0x01	; 1
    27f6:	2b 87       	std	Y+11, r18	; 0x0b
    27f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27fa:	80 93 d1 06 	sts	0x06D1, r24
			eeprom_write_byte_1((unsigned char*)EADR_ADV_LINE_MODE,
    27fe:	60 91 d1 06 	lds	r22, 0x06D1
    2802:	83 ee       	ldi	r24, 0xE3	; 227
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
				advancedLineMode);
			MenuTel();
    280a:	0e 94 18 08 	call	0x1030 <MenuTel>
    280e:	36 c2       	rjmp	.+1132   	; 0x2c7c <Enter+0x5ac>
		}
	}else if (MD_SENSORS == mode)
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	8a 30       	cpi	r24, 0x0A	; 10
    2814:	71 f4       	brne	.+28     	; 0x2832 <Enter+0x162>
	{
#ifndef NEWVG
		if (SEN_ENUM == setupItem);
		else
#endif
		if (SEN_LIST == setupItem)
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	88 23       	and	r24, r24
    281a:	19 f4       	brne	.+6      	; 0x2822 <Enter+0x152>
			MenuList();
    281c:	0e 94 bd 07 	call	0xf7a <MenuList>
    2820:	2d c2       	rjmp	.+1114   	; 0x2c7c <Enter+0x5ac>
		else
		if (SEN_BAUDRATE == setupItem)
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	09 f0       	breq	.+2      	; 0x282a <Enter+0x15a>
    2828:	29 c2       	rjmp	.+1106   	; 0x2c7c <Enter+0x5ac>
			PrepareToMode(MD_SETUP_SENSORS_NEWBAUDRATE);
    282a:	86 e0       	ldi	r24, 0x06	; 6
    282c:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2830:	25 c2       	rjmp	.+1098   	; 0x2c7c <Enter+0x5ac>
#ifndef NEWVG
		else
		if (SEN_POLL == setupItem)
		{
			//  щелчек по галке - изменить галку!
			g_Galka = !g_Galka;
			MenuSensors(SEN_POLL - 1, 1);
			EnablePoll(g_Galka);
		}
#endif

	}else
	if (MD_SETUP_SENSORS_NEWBAUDRATE == mode)
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	86 30       	cpi	r24, 0x06	; 6
    2836:	09 f0       	breq	.+2      	; 0x283a <Enter+0x16a>
    2838:	50 c0       	rjmp	.+160    	; 0x28da <Enter+0x20a>
	{
		if (('0' != g_szInput[InputPos - 1]) ||	('0' != g_szInput[InputPos - 2]))
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	99 27       	eor	r25, r25
    283e:	fc 01       	movw	r30, r24
    2840:	ef 5d       	subi	r30, 0xDF	; 223
    2842:	f9 4f       	sbci	r31, 0xF9	; 249
    2844:	80 81       	ld	r24, Z
    2846:	80 33       	cpi	r24, 0x30	; 48
    2848:	49 f4       	brne	.+18     	; 0x285c <Enter+0x18c>
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	99 27       	eor	r25, r25
    284e:	fc 01       	movw	r30, r24
    2850:	e0 5e       	subi	r30, 0xE0	; 224
    2852:	f9 4f       	sbci	r31, 0xF9	; 249
    2854:	80 81       	ld	r24, Z
    2856:	80 33       	cpi	r24, 0x30	; 48
    2858:	09 f4       	brne	.+2      	; 0x285c <Enter+0x18c>
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <Enter+0x194>
		{
			//  неправильное значение BaudRate
			PrepareToMode(MD_SETUP_SENSORS_NEWBAUDRATE);
    285c:	86 e0       	ldi	r24, 0x06	; 6
    285e:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			return;
    2862:	0e c2       	rjmp	.+1052   	; 0x2c80 <Enter+0x5b0>
		}

		*(unsigned short*)(&g_szInput[InputPos - 2]) = 0;
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	99 27       	eor	r25, r25
    2868:	fc 01       	movw	r30, r24
    286a:	e0 5e       	subi	r30, 0xE0	; 224
    286c:	f9 4f       	sbci	r31, 0xF9	; 249
    286e:	11 82       	std	Z+1, r1	; 0x01
    2870:	10 82       	st	Z, r1

		newBaudRate = atoi(g_szInput);
    2872:	82 e2       	ldi	r24, 0x22	; 34
    2874:	96 e0       	ldi	r25, 0x06	; 6
    2876:	0e 94 9e 4e 	call	0x9d3c <atoi>
    287a:	9c 83       	std	Y+4, r25	; 0x04
    287c:	8b 83       	std	Y+3, r24	; 0x03
		mode = newBaudRate >> 3;
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	96 95       	lsr	r25
    2884:	87 95       	ror	r24
    2886:	96 95       	lsr	r25
    2888:	87 95       	ror	r24
    288a:	96 95       	lsr	r25
    288c:	87 95       	ror	r24
    288e:	89 83       	std	Y+1, r24	; 0x01

		for (setupItem = 0; setupItem < 7; setupItem++)
    2890:	1a 82       	std	Y+2, r1	; 0x02
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	87 30       	cpi	r24, 0x07	; 7
    2896:	70 f4       	brcc	.+28     	; 0x28b4 <Enter+0x1e4>
			if (mode == BaudRates[setupItem])
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	99 27       	eor	r25, r25
    289c:	fc 01       	movw	r30, r24
    289e:	ef 5f       	subi	r30, 0xFF	; 255
    28a0:	fb 4f       	sbci	r31, 0xFB	; 251
    28a2:	90 81       	ld	r25, Z
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	98 17       	cp	r25, r24
    28a8:	09 f4       	brne	.+2      	; 0x28ac <Enter+0x1dc>
				break;
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <Enter+0x1e4>
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	8a 83       	std	Y+2, r24	; 0x02
    28b2:	ef cf       	rjmp	.-34     	; 0x2892 <Enter+0x1c2>

		if (7 == setupItem)
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	87 30       	cpi	r24, 0x07	; 7
    28b8:	21 f4       	brne	.+8      	; 0x28c2 <Enter+0x1f2>
		{
			//  неправильное знаечние BaudRate
			PrepareToMode(MD_SETUP_SENSORS_NEWBAUDRATE);
    28ba:	86 e0       	ldi	r24, 0x06	; 6
    28bc:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			return;
    28c0:	df c1       	rjmp	.+958    	; 0x2c80 <Enter+0x5b0>
		}

		eeprom_write_byte_1((void*)EADR_USART_BAUDRATE, setupItem);
    28c2:	6a 81       	ldd	r22, Y+2	; 0x02
    28c4:	81 e1       	ldi	r24, 0x11	; 17
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
		uart_init();
    28cc:	0e 94 9e 2b 	call	0x573c <uart_init>
		MenuSensors(0, 0);
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0e 94 9e 07 	call	0xf3c <MenuSensors>
    28d8:	d1 c1       	rjmp	.+930    	; 0x2c7c <Enter+0x5ac>
	}else
	if (MD_SETUP_SENSORS_LIST == mode)
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	8d 30       	cpi	r24, 0x0D	; 13
    28de:	21 f4       	brne	.+8      	; 0x28e8 <Enter+0x218>
	{	//  ентер на каком-либо устройстве
		MenuDevice(1);
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	0e 94 d3 07 	call	0xfa6 <MenuDevice>
    28e6:	ca c1       	rjmp	.+916    	; 0x2c7c <Enter+0x5ac>
	}
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE == mode)
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	8e 30       	cpi	r24, 0x0E	; 14
    28ec:	21 f5       	brne	.+72     	; 0x2936 <Enter+0x266>
	{
		if (SDN_HF_POWER == setupItem)
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	83 30       	cpi	r24, 0x03	; 3
    28f2:	31 f4       	brne	.+12     	; 0x2900 <Enter+0x230>
		{
			HFON;
    28f4:	80 91 38 00 	lds	r24, 0x0038
    28f8:	80 68       	ori	r24, 0x80	; 128
    28fa:	80 93 38 00 	sts	0x0038, r24
    28fe:	be c1       	rjmp	.+892    	; 0x2c7c <Enter+0x5ac>
			//SwitchDeviceOhrana();	//  сменить режим охраны устройства g_curDev
		}
		else if (SDN_SETPORT == setupItem)
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	88 23       	and	r24, r24
    2904:	51 f4       	brne	.+20     	; 0x291a <Enter+0x24a>
		{
			tmp = g_CurDev.ports;
    2906:	80 91 df 07 	lds	r24, 0x07DF
    290a:	80 93 7e 06 	sts	0x067E, r24
			g_CurDev.mode = 0;
    290e:	10 92 e5 07 	sts	0x07E5, r1
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SETPORT);
    2912:	88 e0       	ldi	r24, 0x08	; 8
    2914:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2918:	b1 c1       	rjmp	.+866    	; 0x2c7c <Enter+0x5ac>
		}
		else if (SDN_SENSORS == setupItem)
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	19 f4       	brne	.+6      	; 0x2926 <Enter+0x256>
		{
			MenuListPort();
    2920:	0e 94 0d 08 	call	0x101a <MenuListPort>
    2924:	ab c1       	rjmp	.+854    	; 0x2c7c <Enter+0x5ac>
		}
		else if (SDN_TIMEOUT == setupItem)
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	82 30       	cpi	r24, 0x02	; 2
    292a:	09 f0       	breq	.+2      	; 0x292e <Enter+0x25e>
    292c:	a7 c1       	rjmp	.+846    	; 0x2c7c <Enter+0x5ac>
		{
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT);
    292e:	87 e0       	ldi	r24, 0x07	; 7
    2930:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2934:	a3 c1       	rjmp	.+838    	; 0x2c7c <Enter+0x5ac>
		}
	}else
	if (MD_SETUP_SENSORS_LIST_DEVICE_TIMEOUT == mode)
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	87 30       	cpi	r24, 0x07	; 7
    293a:	51 f4       	brne	.+20     	; 0x2950 <Enter+0x280>
	{
		ChangeDelayTimeBeforeSetOhrana(atoi(g_szInput));
    293c:	82 e2       	ldi	r24, 0x22	; 34
    293e:	96 e0       	ldi	r25, 0x06	; 6
    2940:	0e 94 9e 4e 	call	0x9d3c <atoi>
    2944:	0e 94 ba 32 	call	0x6574 <ChangeDelayTimeBeforeSetOhrana>
		MenuDevice(0);
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	0e 94 d3 07 	call	0xfa6 <MenuDevice>
    294e:	96 c1       	rjmp	.+812    	; 0x2c7c <Enter+0x5ac>
	}else
	if (MD_SETUP_TEL_LINEMODE == mode)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	80 31       	cpi	r24, 0x10	; 16
    2954:	49 f4       	brne	.+18     	; 0x2968 <Enter+0x298>
	{	//   изменить режим линии
		g_checkedItem = g_SetupCurItem;
    2956:	80 91 34 06 	lds	r24, 0x0634
    295a:	80 93 09 01 	sts	0x0109, r24
		ChangeLineMode();
    295e:	0e 94 08 18 	call	0x3010 <ChangeLineMode>
		MenuTel();
    2962:	0e 94 18 08 	call	0x1030 <MenuTel>
    2966:	8a c1       	rjmp	.+788    	; 0x2c7c <Enter+0x5ac>
	}else
	if (MD_SETUP_TEL_AUTO_DIAL_NUMBERS == mode)
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	89 31       	cpi	r24, 0x19	; 25
    296c:	21 f4       	brne	.+8      	; 0x2976 <Enter+0x2a6>
	{	//  режим редактирования номера автодозвона
		PrepareToMode(MD_SETUP_TEL_AUTO_DIAL_NUMBER);
    296e:	8a e1       	ldi	r24, 0x1A	; 26
    2970:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
		return;								//  уход от ClearInput
    2974:	85 c1       	rjmp	.+778    	; 0x2c80 <Enter+0x5b0>
	}else
	if (MD_SETUP_VOLUME == mode)
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	81 31       	cpi	r24, 0x11	; 17
    297a:	19 f4       	brne	.+6      	; 0x2982 <Enter+0x2b2>
		DrawVolume();
    297c:	0e 94 d2 08 	call	0x11a4 <DrawVolume>
    2980:	7d c1       	rjmp	.+762    	; 0x2c7c <Enter+0x5ac>
	else
	if ((MD_SETUP_VOLUME_DINAMIC == mode) || (MD_SETUP_VOLUME_TELEFON == mode))
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	82 31       	cpi	r24, 0x12	; 18
    2986:	21 f0       	breq	.+8      	; 0x2990 <Enter+0x2c0>
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	83 31       	cpi	r24, 0x13	; 19
    298c:	09 f0       	breq	.+2      	; 0x2990 <Enter+0x2c0>
    298e:	05 c0       	rjmp	.+10     	; 0x299a <Enter+0x2ca>
	{
		ChangeVolume();
    2990:	0e 94 15 18 	call	0x302a <ChangeVolume>
		MenuVolume();
    2994:	0e 94 35 08 	call	0x106a <MenuVolume>
    2998:	71 c1       	rjmp	.+738    	; 0x2c7c <Enter+0x5ac>
	}else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SETPORT == mode)
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	88 30       	cpi	r24, 0x08	; 8
    299e:	71 f4       	brne	.+28     	; 0x29bc <Enter+0x2ec>
	{	//  переназначенние функций портов модуля датчиков
		ChangePortPurpose();
    29a0:	0e 94 dc 32 	call	0x65b8 <ChangePortPurpose>
		builtinSensorsPollInterval = 0;	//  отключаем опрос
    29a4:	10 92 70 07 	sts	0x0770, r1
		HFOFF;
    29a8:	8f e7       	ldi	r24, 0x7F	; 127
    29aa:	90 91 38 00 	lds	r25, 0x0038
    29ae:	89 23       	and	r24, r25
    29b0:	80 93 38 00 	sts	0x0038, r24
		MenuDevice(0);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	0e 94 d3 07 	call	0xfa6 <MenuDevice>
    29ba:	60 c1       	rjmp	.+704    	; 0x2c7c <Enter+0x5ac>
	}else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSLIST == mode)
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	84 31       	cpi	r24, 0x14	; 20
    29c0:	31 f4       	brne	.+12     	; 0x29ce <Enter+0x2fe>
	{
		g_CurDev.curSensor = setupItem;
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	80 93 f6 07 	sts	0x07F6, r24
		MenuSensor();
    29c8:	0e 94 c8 07 	call	0xf90 <MenuSensor>
    29cc:	57 c1       	rjmp	.+686    	; 0x2c7c <Enter+0x5ac>
	}else
	if (MD_SETUP_X232 == mode)
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	85 31       	cpi	r24, 0x15	; 21
    29d2:	a1 f4       	brne	.+40     	; 0x29fc <Enter+0x32c>
	{
		if (SXN_TIMEOUT == setupItem)
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	88 23       	and	r24, r24
    29d8:	19 f4       	brne	.+6      	; 0x29e0 <Enter+0x310>
			DrawInterval();
    29da:	0e 94 e9 08 	call	0x11d2 <DrawInterval>
    29de:	4e c1       	rjmp	.+668    	; 0x2c7c <Enter+0x5ac>
		else if (SXN_INTERVAL == setupItem)
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	19 f4       	brne	.+6      	; 0x29ec <Enter+0x31c>
			DrawInterval();
    29e6:	0e 94 e9 08 	call	0x11d2 <DrawInterval>
    29ea:	48 c1       	rjmp	.+656    	; 0x2c7c <Enter+0x5ac>
		else if (SXN_PACKET == setupItem)
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	82 30       	cpi	r24, 0x02	; 2
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <Enter+0x324>
    29f2:	44 c1       	rjmp	.+648    	; 0x2c7c <Enter+0x5ac>
			PrepareToMode(MD_SETUP_X232_PACKET);
    29f4:	88 e1       	ldi	r24, 0x18	; 24
    29f6:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    29fa:	40 c1       	rjmp	.+640    	; 0x2c7c <Enter+0x5ac>
	}
	else
	if ((MD_SETUP_X232_TIMEOUT == mode) || (MD_SETUP_X232_INTERVAL == mode))
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	86 31       	cpi	r24, 0x16	; 22
    2a00:	21 f0       	breq	.+8      	; 0x2a0a <Enter+0x33a>
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	87 31       	cpi	r24, 0x17	; 23
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <Enter+0x33a>
    2a08:	11 c0       	rjmp	.+34     	; 0x2a2c <Enter+0x35c>
	{
		ChangeX232((unsigned char*)EADR_X232_TIMEOUT + g_SetupCurItem,
    2a0a:	80 91 34 06 	lds	r24, 0x0634
    2a0e:	99 27       	eor	r25, r25
    2a10:	46 96       	adiw	r24, 0x16	; 22
    2a12:	60 91 10 07 	lds	r22, 0x0710
    2a16:	0e 94 c3 33 	call	0x6786 <ChangeX232>
			g_curBarValue);

		g_BuiltSensorsPollInterval = g_x232Interval;
    2a1a:	80 91 8d 07 	lds	r24, 0x078D
    2a1e:	80 93 bf 06 	sts	0x06BF, r24

		MenuX232(0, 0);
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 40 08 	call	0x1080 <MenuX232>
    2a2a:	28 c1       	rjmp	.+592    	; 0x2c7c <Enter+0x5ac>
	}
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == mode)
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	89 30       	cpi	r24, 0x09	; 9
    2a30:	31 f5       	brne	.+76     	; 0x2a7e <Enter+0x3ae>
	{
		if (InputPos < 7)
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	87 30       	cpi	r24, 0x07	; 7
    2a36:	38 f4       	brcc	.+14     	; 0x2a46 <Enter+0x376>
		{
			SetCaret(LINE_2_START_POS + 7);		//  переход ко второму значению
    2a38:	87 e4       	ldi	r24, 0x47	; 71
    2a3a:	0e 94 47 29 	call	0x528e <SetCaret>
			g_InputPos = 7;
    2a3e:	87 e0       	ldi	r24, 0x07	; 7
    2a40:	80 93 33 06 	sts	0x0633, r24
			return;								//  уход от ClearInput
    2a44:	1d c1       	rjmp	.+570    	; 0x2c80 <Enter+0x5b0>
		}
		else
		{
			//g_SetupItem хранит номер входа, на котором нажали ентер
			g_szInput[4] = 0;
    2a46:	10 92 26 06 	sts	0x0626, r1
			g_szInput[11] = 0;
    2a4a:	10 92 2d 06 	sts	0x062D, r1
			g_CurDev.threshold1 = atoi(g_szInput);
    2a4e:	82 e2       	ldi	r24, 0x22	; 34
    2a50:	96 e0       	ldi	r25, 0x06	; 6
    2a52:	0e 94 9e 4e 	call	0x9d3c <atoi>
    2a56:	90 93 e2 07 	sts	0x07E2, r25
    2a5a:	80 93 e1 07 	sts	0x07E1, r24
			g_CurDev.threshold2 = atoi(g_szInput + 7);
    2a5e:	89 e2       	ldi	r24, 0x29	; 41
    2a60:	96 e0       	ldi	r25, 0x06	; 6
    2a62:	0e 94 9e 4e 	call	0x9d3c <atoi>
    2a66:	90 93 e4 07 	sts	0x07E4, r25
    2a6a:	80 93 e3 07 	sts	0x07E3, r24
			ChangeSensorThreshold(g_SetupItem);
    2a6e:	80 91 c2 06 	lds	r24, 0x06C2
    2a72:	0e 94 93 33 	call	0x6726 <ChangeSensorThreshold>
			MenuDevice(0);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 d3 07 	call	0xfa6 <MenuDevice>
    2a7c:	ff c0       	rjmp	.+510    	; 0x2c7c <Enter+0x5ac>
		}
	}
	else
	if (MD_SETUP_X232_PACKET == mode)
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	88 31       	cpi	r24, 0x18	; 24
    2a82:	41 f4       	brne	.+16     	; 0x2a94 <Enter+0x3c4>
	{
		SendManualPacket(g_szInput);
    2a84:	82 e2       	ldi	r24, 0x22	; 34
    2a86:	96 e0       	ldi	r25, 0x06	; 6
    2a88:	0e 94 ca 37 	call	0x6f94 <SendManualPacket>
		PrepareToMode(MD_SETUP_X232_PACKET);
    2a8c:	88 e1       	ldi	r24, 0x18	; 24
    2a8e:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2a92:	f4 c0       	rjmp	.+488    	; 0x2c7c <Enter+0x5ac>
	}else
	if ((MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode) || (MD_REDUCE_EDIT_ == mode))
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	8a 31       	cpi	r24, 0x1A	; 26
    2a98:	21 f0       	breq	.+8      	; 0x2aa2 <Enter+0x3d2>
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	81 32       	cpi	r24, 0x21	; 33
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <Enter+0x3d2>
    2aa0:	25 c0       	rjmp	.+74     	; 0x2aec <Enter+0x41c>
	{	//  конец редактирования номера автодозвона
		//if ((strlen(g_szInput) > 2) || (MD_REDUCE_EDIT_ == mode))
		if (!g_InputPos)
    2aa2:	80 91 33 06 	lds	r24, 0x0633
    2aa6:	88 23       	and	r24, r24
    2aa8:	21 f4       	brne	.+8      	; 0x2ab2 <Enter+0x3e2>
			EraseNumber(setupItem);
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	0e 94 13 24 	call	0x4826 <EraseNumber>
    2ab0:	12 c0       	rjmp	.+36     	; 0x2ad6 <Enter+0x406>
		else
		{
			strcpy(g_szAutoDialNumbers[setupItem], g_szInput);
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	33 27       	eor	r19, r19
    2ab8:	c9 01       	movw	r24, r18
    2aba:	82 0f       	add	r24, r18
    2abc:	93 1f       	adc	r25, r19
    2abe:	fc 01       	movw	r30, r24
    2ac0:	e3 54       	subi	r30, 0x43	; 67
    2ac2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ac4:	62 e2       	ldi	r22, 0x22	; 34
    2ac6:	76 e0       	ldi	r23, 0x06	; 6
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	0e 94 30 4f 	call	0x9e60 <strcpy>
			SaveDialNumberToEEPROM(setupItem);
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	0e 94 02 1c 	call	0x3804 <SaveDialNumberToEEPROM>
		}

		MenuAutoDialNumbers(setupItem);
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	0e 94 59 08 	call	0x10b2 <MenuAutoDialNumbers>

		if (MD_SETUP_TEL_AUTO_DIAL_NUMBER != mode)
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	8a 31       	cpi	r24, 0x1A	; 26
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <Enter+0x414>
    2ae2:	cc c0       	rjmp	.+408    	; 0x2c7c <Enter+0x5ac>
			g_Mode = MD_REDUCE_EDIT;
    2ae4:	80 e2       	ldi	r24, 0x20	; 32
    2ae6:	80 93 f0 06 	sts	0x06F0, r24
    2aea:	c8 c0       	rjmp	.+400    	; 0x2c7c <Enter+0x5ac>

	}else
	if(MD_SETUP_SETTINGS == mode)
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	8b 31       	cpi	r24, 0x1B	; 27
    2af0:	a1 f5       	brne	.+104    	; 0x2b5a <Enter+0x48a>
	{
		if (SSE_RAM == setupItem)
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	88 23       	and	r24, r24
    2af6:	21 f4       	brne	.+8      	; 0x2b00 <Enter+0x430>
			PrepareToMode(MD_SETUP_SETTINGS_RAM);
    2af8:	8c e1       	ldi	r24, 0x1C	; 28
    2afa:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2afe:	1f c0       	rjmp	.+62     	; 0x2b3e <Enter+0x46e>
		else
		if (SSE_EEPROM == setupItem)
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	81 30       	cpi	r24, 0x01	; 1
    2b04:	21 f4       	brne	.+8      	; 0x2b0e <Enter+0x43e>
		{
			PrepareToMode(MD_SETUP_SETTINGS_EEPROM);
    2b06:	8d e1       	ldi	r24, 0x1D	; 29
    2b08:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2b0c:	18 c0       	rjmp	.+48     	; 0x2b3e <Enter+0x46e>
		}else
		if (SSE_VERSION == setupItem)
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	82 30       	cpi	r24, 0x02	; 2
    2b12:	a9 f4       	brne	.+42     	; 0x2b3e <Enter+0x46e>
		{
			ClearScreen();
    2b14:	0e 94 79 29 	call	0x52f2 <ClearScreen>
			OutStr("Firmware version");
    2b18:	86 e7       	ldi	r24, 0x76	; 118
    2b1a:	94 e0       	ldi	r25, 0x04	; 4
    2b1c:	0e 94 24 29 	call	0x5248 <OutStr>
			SetCaret(LINE_2_START_POS);
    2b20:	80 e4       	ldi	r24, 0x40	; 64
    2b22:	0e 94 47 29 	call	0x528e <SetCaret>
			OutStr(szBuildNo);
    2b26:	80 91 07 01 	lds	r24, 0x0107
    2b2a:	90 91 08 01 	lds	r25, 0x0108
    2b2e:	0e 94 24 29 	call	0x5248 <OutStr>
			delayms(1000);
    2b32:	88 ee       	ldi	r24, 0xE8	; 232
    2b34:	93 e0       	ldi	r25, 0x03	; 3
    2b36:	0e 94 ba 38 	call	0x7174 <delayms>
			MenuSettings();
    2b3a:	0e 94 2a 08 	call	0x1054 <MenuSettings>
		}
		if (SSE_PASSWORD == setupItem)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	83 30       	cpi	r24, 0x03	; 3
    2b42:	21 f4       	brne	.+8      	; 0x2b4c <Enter+0x47c>
			//  режим смены пароля на вход в Setup
			PrepareToMode(MD_SETUP_NEWPSWD);
    2b44:	85 e0       	ldi	r24, 0x05	; 5
    2b46:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2b4a:	98 c0       	rjmp	.+304    	; 0x2c7c <Enter+0x5ac>
		else
		if (SSE_SETDEFAULT == setupItem)
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	84 30       	cpi	r24, 0x04	; 4
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <Enter+0x484>
    2b52:	94 c0       	rjmp	.+296    	; 0x2c7c <Enter+0x5ac>
			SetDefaultSettings();
    2b54:	0e 94 89 23 	call	0x4712 <SetDefaultSettings>
    2b58:	91 c0       	rjmp	.+290    	; 0x2c7c <Enter+0x5ac>

	}else
	if ((MD_SETUP_SETTINGS_RAM == mode) || (MD_SETUP_SETTINGS_EEPROM == mode))
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	8c 31       	cpi	r24, 0x1C	; 28
    2b5e:	21 f0       	breq	.+8      	; 0x2b68 <Enter+0x498>
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	8d 31       	cpi	r24, 0x1D	; 29
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <Enter+0x498>
    2b66:	54 c0       	rjmp	.+168    	; 0x2c10 <Enter+0x540>
	{
		if (InputPos < 7)
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	87 30       	cpi	r24, 0x07	; 7
    2b6c:	18 f4       	brcc	.+6      	; 0x2b74 <Enter+0x4a4>
		{
			GetTetradeFromAdr();
    2b6e:	0e 94 e1 12 	call	0x25c2 <GetTetradeFromAdr>
			return;								//  уход от ClearInput
    2b72:	86 c0       	rjmp	.+268    	; 0x2c80 <Enter+0x5b0>
		}else
		{	//  перенести в память новое значение тетрады байт
			adr = (unsigned char*)HexToInt(g_szInput);
    2b74:	82 e2       	ldi	r24, 0x22	; 34
    2b76:	96 e0       	ldi	r25, 0x06	; 6
    2b78:	0e 94 6a 3a 	call	0x74d4 <HexToInt>
    2b7c:	9f 83       	std	Y+7, r25	; 0x07
    2b7e:	8e 83       	std	Y+6, r24	; 0x06

			for (newBaudRate = 0; newBaudRate < 4; newBaudRate++)
    2b80:	1c 82       	std	Y+4, r1	; 0x04
    2b82:	1b 82       	std	Y+3, r1	; 0x03
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	84 30       	cpi	r24, 0x04	; 4
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	08 f0       	brcs	.+2      	; 0x2b90 <Enter+0x4c0>
    2b8e:	3d c0       	rjmp	.+122    	; 0x2c0a <Enter+0x53a>
			{
				g_szInput[0] = g_szInput[7 + (newBaudRate << 1)];
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e7 5d       	subi	r30, 0xD7	; 215
    2b9c:	f9 4f       	sbci	r31, 0xF9	; 249
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 93 22 06 	sts	0x0622, r24
				g_szInput[1] = g_szInput[7 + (newBaudRate << 1) + 1];
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	fc 01       	movw	r30, r24
    2bae:	e6 5d       	subi	r30, 0xD6	; 214
    2bb0:	f9 4f       	sbci	r31, 0xF9	; 249
    2bb2:	80 81       	ld	r24, Z
    2bb4:	80 93 23 06 	sts	0x0623, r24
				g_szInput[2] = 0;
    2bb8:	10 92 24 06 	sts	0x0624, r1
				newBaudRate = HexToInt(g_szInput);
    2bbc:	82 e2       	ldi	r24, 0x22	; 34
    2bbe:	96 e0       	ldi	r25, 0x06	; 6
    2bc0:	0e 94 6a 3a 	call	0x74d4 <HexToInt>
    2bc4:	9c 83       	std	Y+4, r25	; 0x04
    2bc6:	8b 83       	std	Y+3, r24	; 0x03
				if (MD_SETUP_SETTINGS_RAM == mode)
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	8c 31       	cpi	r24, 0x1C	; 28
    2bcc:	29 f4       	brne	.+10     	; 0x2bd8 <Enter+0x508>
					*adr = newBaudRate;
    2bce:	ee 81       	ldd	r30, Y+6	; 0x06
    2bd0:	ff 81       	ldd	r31, Y+7	; 0x07
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	80 83       	st	Z, r24
    2bd6:	0e c0       	rjmp	.+28     	; 0x2bf4 <Enter+0x524>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bda:	9f 81       	ldd	r25, Y+7	; 0x07
    2bdc:	99 87       	std	Y+9, r25	; 0x09
    2bde:	88 87       	std	Y+8, r24	; 0x08
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	8a 87       	std	Y+10, r24	; 0x0a
  asm volatile (
    2be4:	a8 85       	ldd	r26, Y+8	; 0x08
    2be6:	b9 85       	ldd	r27, Y+9	; 0x09
    2be8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bea:	08 2e       	mov	r0, r24
    2bec:	0e 94 30 50 	call	0xa060 <__eeprom_write_byte_1C1D1E>
    2bf0:	b9 87       	std	Y+9, r27	; 0x09
    2bf2:	a8 87       	std	Y+8, r26	; 0x08
				else
					eeprom_write_byte(adr, newBaudRate);
				adr++;
    2bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	9f 83       	std	Y+7, r25	; 0x07
    2bfc:	8e 83       	std	Y+6, r24	; 0x06
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	9c 81       	ldd	r25, Y+4	; 0x04
    2c02:	01 96       	adiw	r24, 0x01	; 1
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	8b 83       	std	Y+3, r24	; 0x03
    2c08:	bd cf       	rjmp	.-134    	; 0x2b84 <Enter+0x4b4>
			}

			MenuSettings();
    2c0a:	0e 94 2a 08 	call	0x1054 <MenuSettings>
    2c0e:	36 c0       	rjmp	.+108    	; 0x2c7c <Enter+0x5ac>
		}
	}else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR == mode)
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	8e 31       	cpi	r24, 0x1E	; 30
    2c14:	71 f4       	brne	.+28     	; 0x2c32 <Enter+0x562>
	{
		if (SRN_LEVELS == setupItem)
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	88 23       	and	r24, r24
    2c1a:	21 f4       	brne	.+8      	; 0x2c24 <Enter+0x554>
		{

//  режим проверки работы АЦП
#ifdef NEWVG
			//  новый смысл режима - показ значений Uпит, Uдат и пр.
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE);
    2c1c:	89 e0       	ldi	r24, 0x09	; 9
    2c1e:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			return;								//  уход от ClearInput
    2c22:	2e c0       	rjmp	.+92     	; 0x2c80 <Enter+0x5b0>
#endif
			ClearScreen();
#ifndef NEWVG
			if (!GetSensorThreshold(setupItem))
#endif
				MenuSensor();
#ifndef NEWVG
			else
			{
				PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE);
				return;								//  уход от ClearInput
			}
#endif
		}else
		if (SRN_TIMEOUT == setupItem)
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	49 f5       	brne	.+82     	; 0x2c7c <Enter+0x5ac>
		{
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1);
    2c2a:	8f e1       	ldi	r24, 0x1F	; 31
    2c2c:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2c30:	25 c0       	rjmp	.+74     	; 0x2c7c <Enter+0x5ac>
		}
	}else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1 == mode)
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	8f 31       	cpi	r24, 0x1F	; 31
    2c36:	c9 f4       	brne	.+50     	; 0x2c6a <Enter+0x59a>
	{	//  изменили таймаут возобновления реакции на срабатывание датчика
		newBaudRate = atol(g_szInput);
    2c38:	82 e2       	ldi	r24, 0x22	; 34
    2c3a:	96 e0       	ldi	r25, 0x06	; 6
    2c3c:	0e 94 cb 4e 	call	0x9d96 <atol>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03

		if (3600 < newBaudRate)
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	2e e0       	ldi	r18, 0x0E	; 14
    2c4e:	81 31       	cpi	r24, 0x11	; 17
    2c50:	92 07       	cpc	r25, r18
    2c52:	20 f0       	brcs	.+8      	; 0x2c5c <Enter+0x58c>
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SENSOR_TIMEOUT1);
    2c54:	8f e1       	ldi	r24, 0x1F	; 31
    2c56:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2c5a:	10 c0       	rjmp	.+32     	; 0x2c7c <Enter+0x5ac>
		else
		{
			ChangeSensorReactionTimeout(newBaudRate);
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	0e 94 4b 38 	call	0x7096 <ChangeSensorReactionTimeout>
			MenuSensor();
    2c64:	0e 94 c8 07 	call	0xf90 <MenuSensor>
    2c68:	09 c0       	rjmp	.+18     	; 0x2c7c <Enter+0x5ac>
		}
	}else
	if (MD_REDUCE_EDIT == mode)
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	80 32       	cpi	r24, 0x20	; 32
    2c6e:	31 f4       	brne	.+12     	; 0x2c7c <Enter+0x5ac>
	{
		PrepareToMode(MD_SETUP_TEL_AUTO_DIAL_NUMBER);
    2c70:	8a e1       	ldi	r24, 0x1A	; 26
    2c72:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
		g_Mode = MD_REDUCE_EDIT_;
    2c76:	81 e2       	ldi	r24, 0x21	; 33
    2c78:	80 93 f0 06 	sts	0x06F0, r24
	}

	ClearInput();
    2c7c:	0e 94 98 0b 	call	0x1730 <ClearInput>
    2c80:	2b 96       	adiw	r28, 0x0b	; 11
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	08 95       	ret

00002c92 <HandleKeys>:
}

void HandleKeys(unsigned char key)
{
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	23 97       	sbiw	r28, 0x03	; 3
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	89 83       	std	Y+1, r24	; 0x01
	unsigned char mode = g_Mode;
    2ca8:	80 91 f0 06 	lds	r24, 0x06F0
    2cac:	8a 83       	std	Y+2, r24	; 0x02

	if (!key)
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	88 23       	and	r24, r24
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <HandleKeys+0x24>
		return;
    2cb4:	0b c1       	rjmp	.+534    	; 0x2ecc <HandleKeys+0x23a>

#ifndef PROTEUS
	//if (g_LastKey == key)
		if (timer0delay)
    2cb6:	80 91 6f 07 	lds	r24, 0x076F
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <HandleKeys+0x2e>
			return;
    2cbe:	06 c1       	rjmp	.+524    	; 0x2ecc <HandleKeys+0x23a>
#endif
	USART_Transmit(key);
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	0e 94 60 2b 	call	0x56c0 <USART_Transmit>
/*
	if (key == VK_1)
		SendVoice(VOICE_DTMF_1);

	if (key == VK_0)
		SendVoice(VOICE_DTMF_0);

	if (key == VK_5)
		SendVoice(VOICE_DTMF_5);

	if (key == VK_4)
		SendVoice(VOICE_HELLO);

	if (key == VK_7)
	{
		delayms(1000);
		SendVoice(VOICE_DTMF_1);
		delayms(1000);
		SendVoice(VOICE_DTMF_0);
		delayms(1000);
		SendVoice(VOICE_DTMF_5);
		delayms(1000);
	}
*/
	if (VK_8 == key)
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	8a 30       	cpi	r24, 0x0A	; 10
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <HandleKeys+0x44>
	{
		TELUP;
    2ccc:	80 91 23 00 	lds	r24, 0x0023
    2cd0:	88 60       	ori	r24, 0x08	; 8
    2cd2:	80 93 23 00 	sts	0x0023, r24
		//SensorsStateChangeNotify(2);
	}
	if (VK_9 == key)
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	8b 30       	cpi	r24, 0x0B	; 11
    2cda:	11 f4       	brne	.+4      	; 0x2ce0 <HandleKeys+0x4e>
	{
		LineDown();
    2cdc:	0e 94 57 27 	call	0x4eae <LineDown>
	}

	timer0delay = KBD_ANTI_JITTER_TIMEOUT;//g_params[PARAM_XXXXXXX];//KBD_ANTI_JITTER_TIMEOUT;
    2ce0:	8a e0       	ldi	r24, 0x0A	; 10
    2ce2:	80 93 6f 07 	sts	0x076F, r24
	g_LastKey = key;					//  запоминаем последнюю нажатую клавишу
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	80 93 12 07 	sts	0x0712, r24

	if (VK_CANCEL == key)
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	8d 30       	cpi	r24, 0x0D	; 13
    2cf0:	31 f4       	brne	.+12     	; 0x2cfe <HandleKeys+0x6c>
	{
//#ifdef DEBUG
/*
		if (MD_OHRANA == mode)
		{	//  нажатие Esc в режиме охраны генерирует отладочное сообщение от датчиков
			g_DefferedWork |= _BV(DW_SENDOHRANAEVENT);
			g_DefferedSensorsState = 2;
		}
*/
		g_cancelPressCount++;
    2cf2:	80 91 71 07 	lds	r24, 0x0771
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	80 93 71 07 	sts	0x0771, r24
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <HandleKeys+0x70>

//#endif
	}
	else
		g_cancelPressCount = 0;
    2cfe:	10 92 71 07 	sts	0x0771, r1

	if (5 == g_cancelPressCount)
    2d02:	80 91 71 07 	lds	r24, 0x0771
    2d06:	85 30       	cpi	r24, 0x05	; 5
    2d08:	49 f4       	brne	.+18     	; 0x2d1c <HandleKeys+0x8a>
	{
		if (MD_HELLO == g_Mode)
    2d0a:	80 91 f0 06 	lds	r24, 0x06F0
    2d0e:	83 30       	cpi	r24, 0x03	; 3
    2d10:	11 f4       	brne	.+4      	; 0x2d16 <HandleKeys+0x84>
			Setup();
    2d12:	0e 94 84 0b 	call	0x1708 <Setup>

		g_cancelPressCount = 0;
    2d16:	10 92 71 07 	sts	0x0771, r1

		return;
    2d1a:	d8 c0       	rjmp	.+432    	; 0x2ecc <HandleKeys+0x23a>
	}

	if ((VK_GUARD == key) || ((VK_0 == key) && ((MD_HELLO == mode) ||
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	84 31       	cpi	r24, 0x14	; 20
    2d20:	59 f0       	breq	.+22     	; 0x2d38 <HandleKeys+0xa6>
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	8e 30       	cpi	r24, 0x0E	; 14
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <HandleKeys+0x98>
    2d28:	51 c0       	rjmp	.+162    	; 0x2dcc <HandleKeys+0x13a>
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	83 30       	cpi	r24, 0x03	; 3
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <HandleKeys+0xa6>
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	84 30       	cpi	r24, 0x04	; 4
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <HandleKeys+0xa6>
    2d36:	4a c0       	rjmp	.+148    	; 0x2dcc <HandleKeys+0x13a>
								(MD_OHRANA == mode))))
	{
		if (MD_SETUP_SETTINGS_RAM == mode)
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	8c 31       	cpi	r24, 0x1C	; 28
    2d3c:	21 f4       	brne	.+8      	; 0x2d46 <HandleKeys+0xb4>
			NumerKey(0);
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	0e 94 34 0f 	call	0x1e68 <NumerKey>
    2d44:	c3 c0       	rjmp	.+390    	; 0x2ecc <HandleKeys+0x23a>
		else
		if (MD_HELLO == mode)
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	83 30       	cpi	r24, 0x03	; 3
    2d4a:	c1 f4       	brne	.+48     	; 0x2d7c <HandleKeys+0xea>
		{
			if (delaySetOhrana)
    2d4c:	80 91 d6 06 	lds	r24, 0x06D6
    2d50:	90 91 d7 06 	lds	r25, 0x06D7
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	79 f0       	breq	.+30     	; 0x2d76 <HandleKeys+0xe4>
			{	//  отмена постановки под охрану
				delaySetOhrana = 0;
    2d58:	10 92 d7 06 	sts	0x06D7, r1
    2d5c:	10 92 d6 06 	sts	0x06D6, r1
				eeprom_write_byte_1((void*)EADR_LAST_MODE, MD_HELLO);
    2d60:	63 e0       	ldi	r22, 0x03	; 3
    2d62:	82 ee       	ldi	r24, 0xE2	; 226
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
				progress = 0;
    2d6a:	10 92 fe 06 	sts	0x06FE, r1
				PrepareToMode(MD_HELLO);
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    2d74:	ab c0       	rjmp	.+342    	; 0x2ecc <HandleKeys+0x23a>
			}else
			{
				StartSetOhranaProcess();
    2d76:	0e 94 19 27 	call	0x4e32 <StartSetOhranaProcess>
    2d7a:	a8 c0       	rjmp	.+336    	; 0x2ecc <HandleKeys+0x23a>
			}
			//ReduceOhrana();
		}else
		if (MD_OHRANA == mode)
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	84 30       	cpi	r24, 0x04	; 4
    2d80:	09 f0       	breq	.+2      	; 0x2d84 <HandleKeys+0xf2>
    2d82:	a4 c0       	rjmp	.+328    	; 0x2ecc <HandleKeys+0x23a>
		{
			builtinSensorsPollInterval = 0;	//  остановим внутренний опрос
    2d84:	10 92 70 07 	sts	0x0770, r1
			HFOFF;
    2d88:	9f e7       	ldi	r25, 0x7F	; 127
    2d8a:	80 91 38 00 	lds	r24, 0x0038
    2d8e:	89 23       	and	r24, r25
    2d90:	80 93 38 00 	sts	0x0038, r24
			EnablePoll(0);					//  отключение протокольного опроса
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	0e 94 34 38 	call	0x7068 <EnablePoll>
			PrepareToMode(MD_HELLO);
    2d9a:	83 e0       	ldi	r24, 0x03	; 3
    2d9c:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
			defferedOhranaEvent = 0;		//  отмена возможных отложенных реакций
    2da0:	10 92 0f 07 	sts	0x070F, r1
    2da4:	10 92 0e 07 	sts	0x070E, r1
			g_DefferedSensorsState = 0;
    2da8:	10 92 c3 06 	sts	0x06C3, r1
			eeprom_write_byte_1((unsigned char*)EADR_LAST_MODE, MD_HELLO);
    2dac:	63 e0       	ldi	r22, 0x03	; 3
    2dae:	82 ee       	ldi	r24, 0xE2	; 226
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
			dontStartConfirmTimer = 1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	80 93 d0 06 	sts	0x06D0, r24
			QueueVoice(VOICE_SYSTEM_SNYATA_S_OHRANY);
    2dbc:	8e e0       	ldi	r24, 0x0E	; 14
    2dbe:	96 e0       	ldi	r25, 0x06	; 6
    2dc0:	0e 94 c2 22 	call	0x4584 <QueueVoice>
			PlayQueue(1);
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	0e 94 12 23 	call	0x4624 <PlayQueue>
    2dca:	80 c0       	rjmp	.+256    	; 0x2ecc <HandleKeys+0x23a>
		}
	}
/*	else if (VK_TEL == key)
	{
		if (MD_SETUP_SETTINGS_RAM == mode)
			NumerKey(8);
		else
	 	if ((MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode) || (MD_TEL == mode))
			NumerKey(VK_SHARP);			//  впечатывает символ паузы
		else;

		//  случайное срабатывание?????????????????????????
	}
*/	else if (VK_SETUP == key)
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	88 30       	cpi	r24, 0x08	; 8
    2dd0:	b9 f5       	brne	.+110    	; 0x2e40 <HandleKeys+0x1ae>
	{
		if (MD_SETUP_TIME == mode)
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	81 30       	cpi	r24, 0x01	; 1
    2dd6:	89 f4       	brne	.+34     	; 0x2dfa <HandleKeys+0x168>
		{
			g_canShowTime = !g_canShowTime;
    2dd8:	1b 82       	std	Y+3, r1	; 0x03
    2dda:	80 91 c0 06 	lds	r24, 0x06C0
    2dde:	88 23       	and	r24, r24
    2de0:	11 f4       	brne	.+4      	; 0x2de6 <HandleKeys+0x154>
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	80 93 c0 06 	sts	0x06C0, r24
			eeprom_write_byte_1((void*)EADR_CAN_SHOW_TIME, g_canShowTime);
    2dec:	60 91 c0 06 	lds	r22, 0x06C0
    2df0:	84 ee       	ldi	r24, 0xE4	; 228
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
    2df8:	69 c0       	rjmp	.+210    	; 0x2ecc <HandleKeys+0x23a>
		}
		else
		if ((MD_REDUCE_EDIT_ == mode) ||
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	81 32       	cpi	r24, 0x21	; 33
    2dfe:	21 f0       	breq	.+8      	; 0x2e08 <HandleKeys+0x176>
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	8a 31       	cpi	r24, 0x1A	; 26
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <HandleKeys+0x176>
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <HandleKeys+0x17e>
			(MD_SETUP_TEL_AUTO_DIAL_NUMBER == mode))
			NumerKey(VK_SHARP);
    2e08:	8f e0       	ldi	r24, 0x0F	; 15
    2e0a:	0e 94 34 0f 	call	0x1e68 <NumerKey>
    2e0e:	5e c0       	rjmp	.+188    	; 0x2ecc <HandleKeys+0x23a>
		else
		if (MD_SETUP_SETTINGS_RAM == mode)
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	8c 31       	cpi	r24, 0x1C	; 28
    2e14:	21 f4       	brne	.+8      	; 0x2e1e <HandleKeys+0x18c>
			NumerKey(4);
    2e16:	84 e0       	ldi	r24, 0x04	; 4
    2e18:	0e 94 34 0f 	call	0x1e68 <NumerKey>
    2e1c:	57 c0       	rjmp	.+174    	; 0x2ecc <HandleKeys+0x23a>
		else
		if (MD_HELLO == mode)
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	83 30       	cpi	r24, 0x03	; 3
    2e22:	51 f4       	brne	.+20     	; 0x2e38 <HandleKeys+0x1a6>
		{
			if (!delaySetOhrana)		//  если не ждем постановки под охрану
    2e24:	80 91 d6 06 	lds	r24, 0x06D6
    2e28:	90 91 d7 06 	lds	r25, 0x06D7
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <HandleKeys+0x1a0>
    2e30:	4d c0       	rjmp	.+154    	; 0x2ecc <HandleKeys+0x23a>
				Setup();
    2e32:	0e 94 84 0b 	call	0x1708 <Setup>
    2e36:	4a c0       	rjmp	.+148    	; 0x2ecc <HandleKeys+0x23a>
		}else
			LeftRight(VK_BACKSPACE);
    2e38:	88 e0       	ldi	r24, 0x08	; 8
    2e3a:	0e 94 65 0d 	call	0x1aca <LeftRight>
    2e3e:	46 c0       	rjmp	.+140    	; 0x2ecc <HandleKeys+0x23a>
	}
	else if ((VK_LEFT == key) || (VK_RIGHT == key))
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	8c 30       	cpi	r24, 0x0C	; 12
    2e44:	21 f0       	breq	.+8      	; 0x2e4e <HandleKeys+0x1bc>
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	80 31       	cpi	r24, 0x10	; 16
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <HandleKeys+0x1bc>
    2e4c:	16 c0       	rjmp	.+44     	; 0x2e7a <HandleKeys+0x1e8>
	{
		if (!delaySetOhrana)		//  если не ждем постановки под охрану
    2e4e:	80 91 d6 06 	lds	r24, 0x06D6
    2e52:	90 91 d7 06 	lds	r25, 0x06D7
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	c9 f5       	brne	.+114    	; 0x2ecc <HandleKeys+0x23a>
		{
			if ((MD_HELLO == mode) && (VK_DOWN == key))
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	83 30       	cpi	r24, 0x03	; 3
    2e5e:	49 f4       	brne	.+18     	; 0x2e72 <HandleKeys+0x1e0>
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	80 31       	cpi	r24, 0x10	; 16
    2e64:	31 f4       	brne	.+12     	; 0x2e72 <HandleKeys+0x1e0>
				SendVoice(VOICE_HELLO, 1);
    2e66:	61 e0       	ldi	r22, 0x01	; 1
    2e68:	88 e7       	ldi	r24, 0x78	; 120
    2e6a:	95 e0       	ldi	r25, 0x05	; 5
    2e6c:	0e 94 61 1c 	call	0x38c2 <SendVoice>
    2e70:	2d c0       	rjmp	.+90     	; 0x2ecc <HandleKeys+0x23a>
			else
				LeftRight(key);
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	0e 94 65 0d 	call	0x1aca <LeftRight>
    2e78:	29 c0       	rjmp	.+82     	; 0x2ecc <HandleKeys+0x23a>
		}
	}
	else if (VK_CANCEL == key)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	8d 30       	cpi	r24, 0x0D	; 13
    2e7e:	19 f4       	brne	.+6      	; 0x2e86 <HandleKeys+0x1f4>
				Escape();
    2e80:	0e 94 46 11 	call	0x228c <Escape>
    2e84:	23 c0       	rjmp	.+70     	; 0x2ecc <HandleKeys+0x23a>
	else if (((key >= VK_4) && (key <= VK_0)) ||
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	85 30       	cpi	r24, 0x05	; 5
    2e8a:	18 f0       	brcs	.+6      	; 0x2e92 <HandleKeys+0x200>
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	8f 30       	cpi	r24, 0x0F	; 15
    2e90:	38 f0       	brcs	.+14     	; 0x2ea0 <HandleKeys+0x20e>
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	81 31       	cpi	r24, 0x11	; 17
    2e96:	a8 f0       	brcs	.+42     	; 0x2ec2 <HandleKeys+0x230>
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	84 31       	cpi	r24, 0x14	; 20
    2e9c:	08 f0       	brcs	.+2      	; 0x2ea0 <HandleKeys+0x20e>
    2e9e:	11 c0       	rjmp	.+34     	; 0x2ec2 <HandleKeys+0x230>
			 ((key >= VK_1) && (key <= VK_3)))
	{
//#ifdef DEBUG
/*REDUCE MODE
			if (MD_OHRANA == g_Mode)
				DialDirectNumber(key);
			else
*/
//#endif
		if (!delaySetOhrana)		//  если не ждем постановки под охрану
    2ea0:	80 91 d6 06 	lds	r24, 0x06D6
    2ea4:	90 91 d7 06 	lds	r25, 0x06D7
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	81 f4       	brne	.+32     	; 0x2ecc <HandleKeys+0x23a>
		{
			if (MD_SETUP_TEL_AUTO_DIAL_NUMBERS == mode)
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	89 31       	cpi	r24, 0x19	; 25
    2eb0:	21 f4       	brne	.+8      	; 0x2eba <HandleKeys+0x228>
				AutoDialNumbersOperations(key);
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	0e 94 27 22 	call	0x444e <AutoDialNumbersOperations>
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <HandleKeys+0x23a>
			else
				NumerKey(key);
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	0e 94 34 0f 	call	0x1e68 <NumerKey>
    2ec0:	05 c0       	rjmp	.+10     	; 0x2ecc <HandleKeys+0x23a>
		}
	}
	else if (VK_SHARP == key)
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	8f 30       	cpi	r24, 0x0F	; 15
    2ec6:	11 f4       	brne	.+4      	; 0x2ecc <HandleKeys+0x23a>
		Enter();	//  old Sharp
    2ec8:	0e 94 68 13 	call	0x26d0 <Enter>
    2ecc:	23 96       	adiw	r28, 0x03	; 3
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	08 95       	ret

00002ede <ChangeTime>:
/*	else if (VK_FUNC == key)
		 {
			if (MD_SETUP_SETTINGS_RAM == mode)
				NumerKey(12);
			else
			if (MD_HELLO == mode)
				SendVoice(0xFFFF);			//  начать проигрывание
			else
				LeftRight(VK_BACKSPACE);
		 }
*/
/*
else if (VK_HF == key)
	{
		if (MD_SETUP_SETTINGS_RAM == mode)
			NumerKey(13);
#ifndef REDUCE
		else
			HandsFree();
#endif
	}

	else if (VK_REDIAL == key)
	{
		if (MD_SETUP_SETTINGS_RAM == mode)
			NumerKey(16);
		//REDUCEelse
			//REDUCERedial();
	}*/else

	return;
}

char ChangeTime(void)
{
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	29 97       	sbiw	r28, 0x09	; 9
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
	RTC_TIME rtc;

	ReadTime(&rtc);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	01 96       	adiw	r24, 0x01	; 1
    2ef6:	0e 94 ec 2b 	call	0x57d8 <ReadTime>
	rtc.hour = ((g_szInput[0] - 0x30) << 4) + (g_szInput[1] - 0x30);
    2efa:	80 91 22 06 	lds	r24, 0x0622
    2efe:	99 27       	eor	r25, r25
    2f00:	c0 97       	sbiw	r24, 0x30	; 48
    2f02:	82 95       	swap	r24
    2f04:	92 95       	swap	r25
    2f06:	90 7f       	andi	r25, 0xF0	; 240
    2f08:	98 27       	eor	r25, r24
    2f0a:	80 7f       	andi	r24, 0xF0	; 240
    2f0c:	98 27       	eor	r25, r24
    2f0e:	20 91 23 06 	lds	r18, 0x0623
    2f12:	82 0f       	add	r24, r18
    2f14:	80 53       	subi	r24, 0x30	; 48
    2f16:	8b 83       	std	Y+3, r24	; 0x03
	rtc.min = ((g_szInput[3] - 0x30) << 4) + (g_szInput[4] - 0x30);
    2f18:	80 91 25 06 	lds	r24, 0x0625
    2f1c:	99 27       	eor	r25, r25
    2f1e:	c0 97       	sbiw	r24, 0x30	; 48
    2f20:	82 95       	swap	r24
    2f22:	92 95       	swap	r25
    2f24:	90 7f       	andi	r25, 0xF0	; 240
    2f26:	98 27       	eor	r25, r24
    2f28:	80 7f       	andi	r24, 0xF0	; 240
    2f2a:	98 27       	eor	r25, r24
    2f2c:	20 91 26 06 	lds	r18, 0x0626
    2f30:	82 0f       	add	r24, r18
    2f32:	80 53       	subi	r24, 0x30	; 48
    2f34:	8a 83       	std	Y+2, r24	; 0x02
	rtc.sec = 0;
    2f36:	19 82       	std	Y+1, r1	; 0x01
	rtc.day = ((g_szInput[6] - 0x30) << 4) + (g_szInput[7] - 0x30);
    2f38:	80 91 28 06 	lds	r24, 0x0628
    2f3c:	99 27       	eor	r25, r25
    2f3e:	c0 97       	sbiw	r24, 0x30	; 48
    2f40:	82 95       	swap	r24
    2f42:	92 95       	swap	r25
    2f44:	90 7f       	andi	r25, 0xF0	; 240
    2f46:	98 27       	eor	r25, r24
    2f48:	80 7f       	andi	r24, 0xF0	; 240
    2f4a:	98 27       	eor	r25, r24
    2f4c:	20 91 29 06 	lds	r18, 0x0629
    2f50:	82 0f       	add	r24, r18
    2f52:	80 53       	subi	r24, 0x30	; 48
    2f54:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = ((g_szInput[9] - 0x30) << 4) + (g_szInput[10] - 0x30);
    2f56:	80 91 2b 06 	lds	r24, 0x062B
    2f5a:	99 27       	eor	r25, r25
    2f5c:	c0 97       	sbiw	r24, 0x30	; 48
    2f5e:	82 95       	swap	r24
    2f60:	92 95       	swap	r25
    2f62:	90 7f       	andi	r25, 0xF0	; 240
    2f64:	98 27       	eor	r25, r24
    2f66:	80 7f       	andi	r24, 0xF0	; 240
    2f68:	98 27       	eor	r25, r24
    2f6a:	20 91 2c 06 	lds	r18, 0x062C
    2f6e:	82 0f       	add	r24, r18
    2f70:	80 53       	subi	r24, 0x30	; 48
    2f72:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = g_szInput[15] - 0x30;
    2f74:	80 91 31 06 	lds	r24, 0x0631
    2f78:	80 53       	subi	r24, 0x30	; 48
    2f7a:	8f 83       	std	Y+7, r24	; 0x07

	if ((rtc.hour > 0x23) || (rtc.min > 0x59) || (rtc.sec > 0x59) ||
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	84 32       	cpi	r24, 0x24	; 36
    2f80:	80 f4       	brcc	.+32     	; 0x2fa2 <ChangeTime+0xc4>
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	8a 35       	cpi	r24, 0x5A	; 90
    2f86:	68 f4       	brcc	.+26     	; 0x2fa2 <ChangeTime+0xc4>
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	8a 35       	cpi	r24, 0x5A	; 90
    2f8c:	50 f4       	brcc	.+20     	; 0x2fa2 <ChangeTime+0xc4>
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	82 33       	cpi	r24, 0x32	; 50
    2f92:	38 f4       	brcc	.+14     	; 0x2fa2 <ChangeTime+0xc4>
    2f94:	8e 81       	ldd	r24, Y+6	; 0x06
    2f96:	83 31       	cpi	r24, 0x13	; 19
    2f98:	20 f4       	brcc	.+8      	; 0x2fa2 <ChangeTime+0xc4>
    2f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f9c:	86 30       	cpi	r24, 0x06	; 6
    2f9e:	08 f0       	brcs	.+2      	; 0x2fa2 <ChangeTime+0xc4>
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <ChangeTime+0xca>
		(rtc.day > 0x31) || (rtc.month > 0x12) || (rtc.year < 0x06))
		return 0;
    2fa2:	19 86       	std	Y+9, r1	; 0x09
    2fa4:	18 86       	std	Y+8, r1	; 0x08
    2fa6:	08 c0       	rjmp	.+16     	; 0x2fb8 <ChangeTime+0xda>

	WriteTime(&rtc);
    2fa8:	ce 01       	movw	r24, r28
    2faa:	01 96       	adiw	r24, 0x01	; 1
    2fac:	0e 94 2b 2d 	call	0x5a56 <WriteTime>

	return 1;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	99 87       	std	Y+9, r25	; 0x09
    2fb6:	88 87       	std	Y+8, r24	; 0x08
}
    2fb8:	88 85       	ldd	r24, Y+8	; 0x08
    2fba:	99 85       	ldd	r25, Y+9	; 0x09
    2fbc:	29 96       	adiw	r28, 0x09	; 9
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	08 95       	ret

00002fce <ChangeSetupPassword>:

void ChangeSetupPassword(void)
{
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
	//unsigned char len = strlen(g_szInput) - интересно,
		//  но вводить отдельную переменную накладно

	//  переписываем столько, сколько может быть символов(без терминатора)
	epmwbl(&g_szInput, (unsigned char*)EADR_SETUP_PSWD, MAX_PASSWORD_LEN);
    2fd6:	4a e0       	ldi	r20, 0x0A	; 10
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	62 ed       	ldi	r22, 0xD2	; 210
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	82 e2       	ldi	r24, 0x22	; 34
    2fe0:	96 e0       	ldi	r25, 0x06	; 6
    2fe2:	0e 94 45 39 	call	0x728a <epmwbl>

	if (!strlen(g_szInput))
    2fe6:	80 91 22 06 	lds	r24, 0x0622
    2fea:	88 23       	and	r24, r24
    2fec:	19 f4       	brne	.+6      	; 0x2ff4 <ChangeSetupPassword+0x26>
		g_szSetupPassword[0] = 0;
    2fee:	10 92 c5 06 	sts	0x06C5, r1
    2ff2:	0b c0       	rjmp	.+22     	; 0x300a <ChangeSetupPassword+0x3c>
	else
		//  переписываем столько, сколько ввели
		strncpy(g_szSetupPassword, g_szInput, strlen(g_szInput));
    2ff4:	82 e2       	ldi	r24, 0x22	; 34
    2ff6:	96 e0       	ldi	r25, 0x06	; 6
    2ff8:	0e 94 37 4f 	call	0x9e6e <strlen>
    2ffc:	ac 01       	movw	r20, r24
    2ffe:	62 e2       	ldi	r22, 0x22	; 34
    3000:	76 e0       	ldi	r23, 0x06	; 6
    3002:	85 ec       	ldi	r24, 0xC5	; 197
    3004:	96 e0       	ldi	r25, 0x06	; 6
    3006:	0e 94 4e 4f 	call	0x9e9c <strncpy>
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	08 95       	ret

00003010 <ChangeLineMode>:
}

void ChangeLineMode(void)
{
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
	eeprom_write_byte_1((unsigned char*)EADR_LINE_MODE, g_checkedItem);
    3018:	60 91 09 01 	lds	r22, 0x0109
    301c:	83 e1       	ldi	r24, 0x13	; 19
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	08 95       	ret

0000302a <ChangeVolume>:
}

void ChangeVolume(void)
{
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
	eeprom_write_byte_1((unsigned char*)EADR_VOLUME_DINAMIC + g_SetupCurItem,
    3032:	80 91 34 06 	lds	r24, 0x0634
    3036:	99 27       	eor	r25, r25
    3038:	44 96       	adiw	r24, 0x14	; 20
    303a:	60 91 10 07 	lds	r22, 0x0710
    303e:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
		g_curBarValue);

	g_speakerVolume = g_curBarValue;
    3042:	80 91 10 07 	lds	r24, 0x0710
    3046:	80 93 f1 06 	sts	0x06F1, r24
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	08 95       	ret

00003050 <main>:
	//SetSpeakerVolume(g_curBarValue * 16);
}

unsigned short eee;
unsigned char www;

int main (void)
{
    3050:	ce ef       	ldi	r28, 0xFE	; 254
    3052:	d0 e1       	ldi	r29, 0x10	; 16
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	cd bf       	out	0x3d, r28	; 61
	ClearScreen();
    3058:	0e 94 79 29 	call	0x52f2 <ClearScreen>
	Init();
    305c:	0e 94 81 06 	call	0xd02 <Init>

	AdjustLimits();
    3060:	0e 94 5f 25 	call	0x4abe <AdjustLimits>

	SpeakerOn();
    3064:	0e 94 2a 01 	call	0x254 <SpeakerOn>

	delayms(500);
    3068:	84 ef       	ldi	r24, 0xF4	; 244
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	0e 94 ba 38 	call	0x7174 <delayms>

	dontStartConfirmTimer = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	80 93 d0 06 	sts	0x06D0, r24
	QueueVoice(VOICE_HELLO);
    3076:	88 e7       	ldi	r24, 0x78	; 120
    3078:	95 e0       	ldi	r25, 0x05	; 5
    307a:	0e 94 c2 22 	call	0x4584 <QueueVoice>
	PlayQueue(1);
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	0e 94 12 23 	call	0x4624 <PlayQueue>
//#ifndef PROTEUS
	//ShowRunStr();
//#endif

	PrepareToMode(MD_HELLO);
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	0e 94 78 09 	call	0x12f0 <PrepareToMode>

	if (eeprom_read_byte_1((unsigned char*)EADR_LAST_MODE) == MD_OHRANA)
    308a:	82 ee       	ldi	r24, 0xE2	; 226
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    3092:	84 30       	cpi	r24, 0x04	; 4
    3094:	11 f4       	brne	.+4      	; 0x309a <main+0x4a>
	{
		StartSetOhranaProcess();
    3096:	0e 94 19 27 	call	0x4e32 <StartSetOhranaProcess>
	}
ww:
	delay_loop_2(6565);
    309a:	85 ea       	ldi	r24, 0xA5	; 165
    309c:	99 e1       	ldi	r25, 0x19	; 25
    309e:	0e 94 ed 38 	call	0x71da <delay_loop_2>

//	if (PIND != 0x1B)
//		tmp |= _BV(PC4);

	//ClearScreen();
	///OutData(PIND);
	//goto ww;

	if (!ring)							//  после перекидки первой строки
    30a2:	80 91 37 06 	lds	r24, 0x0637
    30a6:	88 23       	and	r24, r24
    30a8:	b1 f4       	brne	.+44     	; 0x30d6 <main+0x86>
	{									//  кнопок на PD7 проблемы со звуком
		ScanKbd();						//  сканирование клавиатуры
    30aa:	0e 94 41 2a 	call	0x5482 <ScanKbd>

	//#ifdef DEBUG
		if (!useLocalDTMF)
    30ae:	80 91 01 07 	lds	r24, 0x0701
    30b2:	88 23       	and	r24, r24
    30b4:	29 f4       	brne	.+10     	; 0x30c0 <main+0x70>
	//#endif
			HandleKeys(getcha());		//  выполнение команд
    30b6:	0e 94 1d 2b 	call	0x563a <getcha>
    30ba:	0e 94 49 16 	call	0x2c92 <HandleKeys>
    30be:	0b c0       	rjmp	.+22     	; 0x30d6 <main+0x86>
	//#ifdef DEBUG
		else
		{
			unsigned char getcha_ = getcha();
    30c0:	0e 94 1d 2b 	call	0x563a <getcha>
    30c4:	89 83       	std	Y+1, r24	; 0x01
			if (getcha_)
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	88 23       	and	r24, r24
    30ca:	29 f0       	breq	.+10     	; 0x30d6 <main+0x86>
				DTMFCmdStorer(ConvertVirtualToDTMFCode(getcha_));
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	0e 94 c3 26 	call	0x4d86 <ConvertVirtualToDTMFCode>
    30d2:	0e 94 85 1c 	call	0x390a <DTMFCmdStorer>
		}
	//#endif
	}

	//  событие оставила функция SensorsStateChangeNotify, вызванная в контекста
	//  прерывания SIG_UART0_RECV
	if (g_DefferedWork & _BV(DW_SENDOHRANAEVENT))
    30d6:	80 91 5d 07 	lds	r24, 0x075D
    30da:	99 27       	eor	r25, r25
    30dc:	81 70       	andi	r24, 0x01	; 1
    30de:	90 70       	andi	r25, 0x00	; 0
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	d9 f2       	breq	.-74     	; 0x309a <main+0x4a>
	{
		if (MD_OHRANA == g_Mode)
    30e4:	80 91 f0 06 	lds	r24, 0x06F0
    30e8:	84 30       	cpi	r24, 0x04	; 4
    30ea:	49 f4       	brne	.+18     	; 0x30fe <main+0xae>
		{
			if (advancedLineMode)
    30ec:	80 91 d1 06 	lds	r24, 0x06D1
    30f0:	88 23       	and	r24, r24
    30f2:	19 f0       	breq	.+6      	; 0x30fa <main+0xaa>
				AutoDial();
    30f4:	0e 94 5e 1a 	call	0x34bc <AutoDial>
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <main+0xae>
			else
				AutoDial2();
    30fa:	0e 94 6f 1b 	call	0x36de <AutoDial2>
		}
		//  AutoDial должна сделать все, что может и даже больше
		//  после нее не должно оставаться единичных битов в g_DefferedSensorsState
		//  если единичные биты остались, то :
		//  	1) не дозвонились или не получили подтверждения
		//		2) датчики сработали уже во время возврата из AutoDial

		//  Поэтому после выхода из AutoDial событие DW_SENDOHRANAEVENT не установлено
		//

		if (!defferedOhranaEvent)
    30fe:	80 91 0e 07 	lds	r24, 0x070E
    3102:	90 91 0f 07 	lds	r25, 0x070F
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	41 f6       	brne	.-112    	; 0x309a <main+0x4a>
		{	//  если не отложили на потом

			if (!g_DefferedSensorsState)
    310a:	80 91 c3 06 	lds	r24, 0x06C3
    310e:	88 23       	and	r24, r24
    3110:	21 f6       	brne	.-120    	; 0x309a <main+0x4a>
				//  сообщили обо всех датчиках
				g_DefferedWork &= ~_BV(DW_SENDOHRANAEVENT);
    3112:	80 91 5d 07 	lds	r24, 0x075D
    3116:	8e 7f       	andi	r24, 0xFE	; 254
    3118:	80 93 5d 07 	sts	0x075D, r24
		}
	}

	goto ww;
    311c:	be cf       	rjmp	.-132    	; 0x309a <main+0x4a>

0000311e <WaitForModePresent>:
}

//  не возвращает, пока в линии присутствует сигнал "mode"
char WaitForModePresent(unsigned char timeout, unsigned char mode,
	unsigned char displaymode)
{
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	27 97       	sbiw	r28, 0x07	; 7
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	89 83       	std	Y+1, r24	; 0x01
    3134:	6a 83       	std	Y+2, r22	; 0x02
    3136:	4b 83       	std	Y+3, r20	; 0x03
	char wfRes;
	unsigned char localTimeOut = timeout;
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	8d 83       	std	Y+5, r24	; 0x05

	while (mode == linemode)
    313c:	9a 81       	ldd	r25, Y+2	; 0x02
    313e:	80 91 f4 06 	lds	r24, 0x06F4
    3142:	98 17       	cp	r25, r24
    3144:	31 f5       	brne	.+76     	; 0x3192 <WaitForModePresent+0x74>
	{
		StartLineAnalize(0);					//  запустить анализ
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	0e 94 38 20 	call	0x4070 <StartLineAnalize>

		//  ожидаем завершения и показываем текущий режим
		wfRes = WaitForLineModeDefining(timeout, displaymode);
    314c:	6b 81       	ldd	r22, Y+3	; 0x03
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	0e 94 d8 18 	call	0x31b0 <WaitForLineModeDefining>
    3154:	8c 83       	std	Y+4, r24	; 0x04

		if (WR_TIMEOUT == wfRes)
    3156:	8c 81       	ldd	r24, Y+4	; 0x04
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	29 f4       	brne	.+10     	; 0x3166 <WaitForModePresent+0x48>
			return WR_TIMEOUT;
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	9f 83       	std	Y+7, r25	; 0x07
    3162:	8e 83       	std	Y+6, r24	; 0x06
    3164:	1a c0       	rjmp	.+52     	; 0x319a <WaitForModePresent+0x7c>
		else
		if ((WR_LM == wfRes) && (mode == linemode))
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	41 f7       	brne	.-48     	; 0x313c <WaitForModePresent+0x1e>
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	80 91 f4 06 	lds	r24, 0x06F4
    3172:	98 17       	cp	r25, r24
    3174:	19 f7       	brne	.-58     	; 0x313c <WaitForModePresent+0x1e>
		{
			if (timeout)
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	88 23       	and	r24, r24
    317a:	01 f3       	breq	.-64     	; 0x313c <WaitForModePresent+0x1e>
			{	//  отсчитываем свой таймаут
				//  900 миллисекунд вместо 1000 - а потому, что WaitForLineModeDefining
				//  для определения состояния сама в себе затрачивает время
				//delayms(900);
				localTimeOut--;
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	81 50       	subi	r24, 0x01	; 1
    3180:	8d 83       	std	Y+5, r24	; 0x05

				if (!localTimeOut)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	88 23       	and	r24, r24
    3186:	d1 f6       	brne	.-76     	; 0x313c <WaitForModePresent+0x1e>
					return WR_TIMEOUT;
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9f 83       	std	Y+7, r25	; 0x07
    318e:	8e 83       	std	Y+6, r24	; 0x06
    3190:	04 c0       	rjmp	.+8      	; 0x319a <WaitForModePresent+0x7c>
			}
		}

		//  а если цикл пойдет по второму кругу, timeout ждать заново?
	}

	return WR_LM;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9f 83       	std	Y+7, r25	; 0x07
    3198:	8e 83       	std	Y+6, r24	; 0x06
}
    319a:	8e 81       	ldd	r24, Y+6	; 0x06
    319c:	9f 81       	ldd	r25, Y+7	; 0x07
    319e:	27 96       	adiw	r28, 0x07	; 7
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	08 95       	ret

000031b0 <WaitForLineModeDefining>:

//  ожидает завершение определения состояния сигнала а линии...
char WaitForLineModeDefining(unsigned char timeout, unsigned char mode)
{
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	25 97       	sbiw	r28, 0x05	; 5
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	6a 83       	std	Y+2, r22	; 0x02
	unsigned char k;

	if (timeout)
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	88 23       	and	r24, r24
    31cc:	19 f0       	breq	.+6      	; 0x31d4 <WaitForLineModeDefining+0x24>
		g_secCnt = timeout;
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	80 93 41 06 	sts	0x0641, r24

	while (!linemode)
    31d4:	80 91 f4 06 	lds	r24, 0x06F4
    31d8:	88 23       	and	r24, r24
    31da:	09 f0       	breq	.+2      	; 0x31de <WaitForLineModeDefining+0x2e>
    31dc:	59 c0       	rjmp	.+178    	; 0x3290 <WaitForLineModeDefining+0xe0>
	{	//  цикл ожидания завершения определения состояния сигнала а линии...

		ClearSecondLine();
    31de:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>

		if (linemode)
    31e2:	80 91 f4 06 	lds	r24, 0x06F4
    31e6:	88 23       	and	r24, r24
    31e8:	29 f0       	breq	.+10     	; 0x31f4 <WaitForLineModeDefining+0x44>
			return WR_LM;						//  чтобы пораньше вернуться
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	9d 83       	std	Y+5, r25	; 0x05
    31f0:	8c 83       	std	Y+4, r24	; 0x04
    31f2:	52 c0       	rjmp	.+164    	; 0x3298 <WaitForLineModeDefining+0xe8>

		for (k = 0; k < 30; k++)
    31f4:	1b 82       	std	Y+3, r1	; 0x03
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	8e 31       	cpi	r24, 0x1E	; 30
    31fa:	88 f4       	brcc	.+34     	; 0x321e <WaitForLineModeDefining+0x6e>
		{
			delayms(10);
    31fc:	8a e0       	ldi	r24, 0x0A	; 10
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 ba 38 	call	0x7174 <delayms>
			if (linemode)
    3204:	80 91 f4 06 	lds	r24, 0x06F4
    3208:	88 23       	and	r24, r24
    320a:	29 f0       	breq	.+10     	; 0x3216 <WaitForLineModeDefining+0x66>
				return WR_LM;					//  чтобы пораньше вернуться
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9d 83       	std	Y+5, r25	; 0x05
    3212:	8c 83       	std	Y+4, r24	; 0x04
    3214:	41 c0       	rjmp	.+130    	; 0x3298 <WaitForLineModeDefining+0xe8>
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	8b 83       	std	Y+3, r24	; 0x03
    321c:	ec cf       	rjmp	.-40     	; 0x31f6 <WaitForLineModeDefining+0x46>
		}

		OutStr(g_linemodes[mode]);
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	28 2f       	mov	r18, r24
    3222:	33 27       	eor	r19, r19
    3224:	c9 01       	movw	r24, r18
    3226:	82 0f       	add	r24, r18
    3228:	93 1f       	adc	r25, r19
    322a:	fc 01       	movw	r30, r24
    322c:	eb 50       	subi	r30, 0x0B	; 11
    322e:	fc 4f       	sbci	r31, 0xFC	; 252
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	0e 94 24 29 	call	0x5248 <OutStr>

		if (linemode)
    3238:	80 91 f4 06 	lds	r24, 0x06F4
    323c:	88 23       	and	r24, r24
    323e:	29 f0       	breq	.+10     	; 0x324a <WaitForLineModeDefining+0x9a>
			return WR_LM;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	9d 83       	std	Y+5, r25	; 0x05
    3246:	8c 83       	std	Y+4, r24	; 0x04
    3248:	27 c0       	rjmp	.+78     	; 0x3298 <WaitForLineModeDefining+0xe8>

		for (k = 0; k < 30; k++)
    324a:	1b 82       	std	Y+3, r1	; 0x03
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	8e 31       	cpi	r24, 0x1E	; 30
    3250:	88 f4       	brcc	.+34     	; 0x3274 <WaitForLineModeDefining+0xc4>
		{
			delayms(10);
    3252:	8a e0       	ldi	r24, 0x0A	; 10
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 ba 38 	call	0x7174 <delayms>
			if (linemode)
    325a:	80 91 f4 06 	lds	r24, 0x06F4
    325e:	88 23       	and	r24, r24
    3260:	29 f0       	breq	.+10     	; 0x326c <WaitForLineModeDefining+0xbc>
				return WR_LM;					//  чтобы пораньше вернуться
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9d 83       	std	Y+5, r25	; 0x05
    3268:	8c 83       	std	Y+4, r24	; 0x04
    326a:	16 c0       	rjmp	.+44     	; 0x3298 <WaitForLineModeDefining+0xe8>
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	8b 83       	std	Y+3, r24	; 0x03
    3272:	ec cf       	rjmp	.-40     	; 0x324c <WaitForLineModeDefining+0x9c>
		}

		if (timeout)							//  если таймер вообще запускали
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	88 23       	and	r24, r24
    3278:	09 f4       	brne	.+2      	; 0x327c <WaitForLineModeDefining+0xcc>
    327a:	ac cf       	rjmp	.-168    	; 0x31d4 <WaitForLineModeDefining+0x24>
			if (!g_secCnt)						//  и он весь протикал
    327c:	80 91 41 06 	lds	r24, 0x0641
    3280:	88 23       	and	r24, r24
    3282:	09 f0       	breq	.+2      	; 0x3286 <WaitForLineModeDefining+0xd6>
    3284:	a7 cf       	rjmp	.-178    	; 0x31d4 <WaitForLineModeDefining+0x24>
				return WR_TIMEOUT;
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9d 83       	std	Y+5, r25	; 0x05
    328c:	8c 83       	std	Y+4, r24	; 0x04
    328e:	04 c0       	rjmp	.+8      	; 0x3298 <WaitForLineModeDefining+0xe8>
	}

	return WR_LM;
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	9d 83       	std	Y+5, r25	; 0x05
    3296:	8c 83       	std	Y+4, r24	; 0x04
}
    3298:	8c 81       	ldd	r24, Y+4	; 0x04
    329a:	9d 81       	ldd	r25, Y+5	; 0x05
    329c:	25 96       	adiw	r28, 0x05	; 5
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	08 95       	ret

000032ae <SheduleOhranaEvent>:

void SheduleOhranaEvent(void)
{
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
	if (g_DefferedSensorsState)			//  все таки не получилось - отложим
    32b6:	80 91 c3 06 	lds	r24, 0x06C3
    32ba:	88 23       	and	r24, r24
    32bc:	a1 f1       	breq	.+104    	; 0x3326 <SheduleOhranaEvent+0x78>
	{
		if (!g_DefferStage)
    32be:	80 91 3b 06 	lds	r24, 0x063B
    32c2:	88 23       	and	r24, r24
    32c4:	39 f4       	brne	.+14     	; 0x32d4 <SheduleOhranaEvent+0x26>
			defferedOhranaEvent = 180;			//  три минуты
    32c6:	84 eb       	ldi	r24, 0xB4	; 180
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	90 93 0f 07 	sts	0x070F, r25
    32ce:	80 93 0e 07 	sts	0x070E, r24
    32d2:	1c c0       	rjmp	.+56     	; 0x330c <SheduleOhranaEvent+0x5e>
		else
		if (1 == g_DefferStage)
    32d4:	80 91 3b 06 	lds	r24, 0x063B
    32d8:	81 30       	cpi	r24, 0x01	; 1
    32da:	39 f4       	brne	.+14     	; 0x32ea <SheduleOhranaEvent+0x3c>
			defferedOhranaEvent = 600;			//  10 минут
    32dc:	88 e5       	ldi	r24, 0x58	; 88
    32de:	92 e0       	ldi	r25, 0x02	; 2
    32e0:	90 93 0f 07 	sts	0x070F, r25
    32e4:	80 93 0e 07 	sts	0x070E, r24
    32e8:	11 c0       	rjmp	.+34     	; 0x330c <SheduleOhranaEvent+0x5e>
		else
		if (2 == g_DefferStage)
    32ea:	80 91 3b 06 	lds	r24, 0x063B
    32ee:	82 30       	cpi	r24, 0x02	; 2
    32f0:	39 f4       	brne	.+14     	; 0x3300 <SheduleOhranaEvent+0x52>
			defferedOhranaEvent = 1800;			//  полчаса
    32f2:	88 e0       	ldi	r24, 0x08	; 8
    32f4:	97 e0       	ldi	r25, 0x07	; 7
    32f6:	90 93 0f 07 	sts	0x070F, r25
    32fa:	80 93 0e 07 	sts	0x070E, r24
    32fe:	06 c0       	rjmp	.+12     	; 0x330c <SheduleOhranaEvent+0x5e>
		else
			defferedOhranaEvent = 3600;			//  час
    3300:	80 e1       	ldi	r24, 0x10	; 16
    3302:	9e e0       	ldi	r25, 0x0E	; 14
    3304:	90 93 0f 07 	sts	0x070F, r25
    3308:	80 93 0e 07 	sts	0x070E, r24

		g_DefferStage++;
    330c:	80 91 3b 06 	lds	r24, 0x063B
    3310:	8f 5f       	subi	r24, 0xFF	; 255
    3312:	80 93 3b 06 	sts	0x063B, r24

		if (10 == g_DefferStage)
    3316:	80 91 3b 06 	lds	r24, 0x063B
    331a:	8a 30       	cpi	r24, 0x0A	; 10
    331c:	21 f4       	brne	.+8      	; 0x3326 <SheduleOhranaEvent+0x78>
		{	//  через 10 часов нарушение потеряет актуальность
			g_DefferStage = 0;
    331e:	10 92 3b 06 	sts	0x063B, r1
			g_DefferedSensorsState = 0;
    3322:	10 92 c3 06 	sts	0x06C3, r1
		}
	}

	g_DefferedWork &= ~_BV(DW_SENDOHRANAEVENT);
    3326:	80 91 5d 07 	lds	r24, 0x075D
    332a:	8e 7f       	andi	r24, 0xFE	; 254
    332c:	80 93 5d 07 	sts	0x075D, r24
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	08 95       	ret

00003336 <AutoDialToNumber>:
}
//  дозванивается до нужного номера и ожидает поднятия трубки
//  если трубку за время Х не подняли
char AutoDialToNumber(unsigned char n)
{
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	25 97       	sbiw	r28, 0x05	; 5
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	89 83       	std	Y+1, r24	; 0x01
	char wfRes = 0;
    334c:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char tryCount = 0;		//  число попыток услышать ответ станции
    334e:	1b 82       	std	Y+3, r1	; 0x03

	g_ShowTime = FALSE;
    3350:	10 92 f7 06 	sts	0x06F7, r1
	TELUP;					//  трубку поднимаем
    3354:	80 91 23 00 	lds	r24, 0x0023
    3358:	88 60       	ori	r24, 0x08	; 8
    335a:	80 93 23 00 	sts	0x0023, r24
	g_dtmfPSWOk = 0;				//  пароль в новом сеансе еще не введен
    335e:	10 92 f5 06 	sts	0x06F5, r1
#ifdef REDUCE
	g_dtmfPasswordPermission = 0;
    3362:	10 92 c4 06 	sts	0x06C4, r1
#endif
	delayms(100);
    3366:	84 e6       	ldi	r24, 0x64	; 100
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 ba 38 	call	0x7174 <delayms>

hoho:

	tryCount++;
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	8f 5f       	subi	r24, 0xFF	; 255
    3372:	8b 83       	std	Y+3, r24	; 0x03

	//  определяем состояние линии - а есть ли ответ станции
	g_wasOne = 0;
    3374:	10 92 c1 06 	sts	0x06C1, r1
	StartLineAnalize(0);
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	0e 94 38 20 	call	0x4070 <StartLineAnalize>

	//  ожидание установления определенного состояния линии
	wfRes = WaitForLineModeDefining(g_params[PARAM_OS_WAIT_TIME], 0);
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	80 91 14 04 	lds	r24, 0x0414
    3384:	0e 94 d8 18 	call	0x31b0 <WaitForLineModeDefining>
    3388:	8a 83       	std	Y+2, r24	; 0x02

	if (WR_TIMEOUT == wfRes)
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	82 30       	cpi	r24, 0x02	; 2
    338e:	29 f4       	brne	.+10     	; 0x339a <AutoDialToNumber+0x64>
		return LM_OS_ABSENT;					//  недождались "Ответ станции"
    3390:	86 e0       	ldi	r24, 0x06	; 6
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	9d 83       	std	Y+5, r25	; 0x05
    3396:	8c 83       	std	Y+4, r24	; 0x04
    3398:	86 c0       	rjmp	.+268    	; 0x34a6 <AutoDialToNumber+0x170>

	if (LM_OS_OR_DOWN == linemode)
    339a:	80 91 f4 06 	lds	r24, 0x06F4
    339e:	83 30       	cpi	r24, 0x03	; 3
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <AutoDialToNumber+0x6e>
    33a2:	79 c0       	rjmp	.+242    	; 0x3496 <AutoDialToNumber+0x160>
	{	//  есть ответ станции

		//  DialNumber всегда набирает только g_szLastNumber
		memcpy(g_szLastNumber, g_szAutoDialNumbers[n], MAX_INPUT);
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	28 2f       	mov	r18, r24
    33a8:	33 27       	eor	r19, r19
    33aa:	c9 01       	movw	r24, r18
    33ac:	82 0f       	add	r24, r18
    33ae:	93 1f       	adc	r25, r19
    33b0:	fc 01       	movw	r30, r24
    33b2:	e3 54       	subi	r30, 0x43	; 67
    33b4:	fc 4f       	sbci	r31, 0xFC	; 252
    33b6:	40 e1       	ldi	r20, 0x10	; 16
    33b8:	50 e0       	ldi	r21, 0x00	; 0
    33ba:	60 81       	ld	r22, Z
    33bc:	71 81       	ldd	r23, Z+1	; 0x01
    33be:	85 e8       	ldi	r24, 0x85	; 133
    33c0:	96 e0       	ldi	r25, 0x06	; 6
    33c2:	0e 94 04 4f 	call	0x9e08 <memcpy>

		ClearSecondLine();
    33c6:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>
		OutData(n + 0x31);
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	8f 5c       	subi	r24, 0xCF	; 207
    33ce:	0e 94 e7 28 	call	0x51ce <OutData>
		OutData('.');
    33d2:	8e e2       	ldi	r24, 0x2E	; 46
    33d4:	0e 94 e7 28 	call	0x51ce <OutData>
		OutStr(g_szLastNumber);
    33d8:	85 e8       	ldi	r24, 0x85	; 133
    33da:	96 e0       	ldi	r25, 0x06	; 6
    33dc:	0e 94 24 29 	call	0x5248 <OutStr>

		g_needHello = 1;					//  выдавать необходимо
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 00 07 	sts	0x0700, r24
		g_wasRequest = 0;
    33e6:	10 92 ea 06 	sts	0x06EA, r1

		EIMSK &= ~_BV(INT6);
    33ea:	80 91 59 00 	lds	r24, 0x0059
    33ee:	8f 7b       	andi	r24, 0xBF	; 191
    33f0:	80 93 59 00 	sts	0x0059, r24
		DialNumber();
    33f4:	0e 94 2b 12 	call	0x2456 <DialNumber>

		g_wasOne = 0;
    33f8:	10 92 c1 06 	sts	0x06C1, r1
		StartLineAnalize(0);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	0e 94 38 20 	call	0x4070 <StartLineAnalize>

		wfRes = WaitForLineModeDefining(g_params[PARAM_FIRST_GUDOK_WAIT_TIME], 0);
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	80 91 16 04 	lds	r24, 0x0416
    3408:	0e 94 d8 18 	call	0x31b0 <WaitForLineModeDefining>
    340c:	8a 83       	std	Y+2, r24	; 0x02
		if (WR_TIMEOUT == wfRes)
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	82 30       	cpi	r24, 0x02	; 2
    3412:	29 f4       	brne	.+10     	; 0x341e <AutoDialToNumber+0xe8>
			return LM_FAULT;				//  недождались начала любого гудка ????
    3414:	85 e0       	ldi	r24, 0x05	; 5
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	9d 83       	std	Y+5, r25	; 0x05
    341a:	8c 83       	std	Y+4, r24	; 0x04
    341c:	44 c0       	rjmp	.+136    	; 0x34a6 <AutoDialToNumber+0x170>

		ShowLineMode();
    341e:	0e 94 aa 20 	call	0x4154 <ShowLineMode>

		if (LM_BUSY == linemode)
    3422:	80 91 f4 06 	lds	r24, 0x06F4
    3426:	82 30       	cpi	r24, 0x02	; 2
    3428:	29 f4       	brne	.+10     	; 0x3434 <AutoDialToNumber+0xfe>
			return LM_BUSY;
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	9d 83       	std	Y+5, r25	; 0x05
    3430:	8c 83       	std	Y+4, r24	; 0x04
    3432:	39 c0       	rjmp	.+114    	; 0x34a6 <AutoDialToNumber+0x170>

		if (LM_KPV == linemode)
    3434:	80 91 f4 06 	lds	r24, 0x06F4
    3438:	81 30       	cpi	r24, 0x01	; 1
    343a:	89 f5       	brne	.+98     	; 0x349e <AutoDialToNumber+0x168>
		{	//  пошел КПВ по трубам...(из Гоблина Руслана)
			g_wasOne = 1;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	80 93 c1 06 	sts	0x06C1, r24

haha:		wfRes = WaitForModePresent(7, LM_KPV, LM_KPV);
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	87 e0       	ldi	r24, 0x07	; 7
    3448:	0e 94 8f 18 	call	0x311e <WaitForModePresent>
    344c:	8a 83       	std	Y+2, r24	; 0x02
			if (WR_TIMEOUT == wfRes)
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	82 30       	cpi	r24, 0x02	; 2
    3452:	29 f4       	brne	.+10     	; 0x345e <AutoDialToNumber+0x128>
				return LM_KPV;			//  значит хужаин так и не взял трубку
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9d 83       	std	Y+5, r25	; 0x05
    345a:	8c 83       	std	Y+4, r24	; 0x04
    345c:	24 c0       	rjmp	.+72     	; 0x34a6 <AutoDialToNumber+0x170>

			if (LM_BUSY == linemode)
    345e:	80 91 f4 06 	lds	r24, 0x06F4
    3462:	82 30       	cpi	r24, 0x02	; 2
    3464:	29 f4       	brne	.+10     	; 0x3470 <AutoDialToNumber+0x13a>
			{
				//  для соток - пока шел КПВ, девушка говорила,что телефон выключен
				return LM_FAULT;
    3466:	85 e0       	ldi	r24, 0x05	; 5
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9d 83       	std	Y+5, r25	; 0x05
    346c:	8c 83       	std	Y+4, r24	; 0x04
    346e:	1b c0       	rjmp	.+54     	; 0x34a6 <AutoDialToNumber+0x170>
			}

			if ((LM_UP == linemode) || (LM_OS_OR_DOWN == linemode))
    3470:	80 91 f4 06 	lds	r24, 0x06F4
    3474:	84 30       	cpi	r24, 0x04	; 4
    3476:	29 f0       	breq	.+10     	; 0x3482 <AutoDialToNumber+0x14c>
    3478:	80 91 f4 06 	lds	r24, 0x06F4
    347c:	83 30       	cpi	r24, 0x03	; 3
    347e:	09 f0       	breq	.+2      	; 0x3482 <AutoDialToNumber+0x14c>
    3480:	e0 cf       	rjmp	.-64     	; 0x3442 <AutoDialToNumber+0x10c>
			{	//  хозяин поднял трубку (или поднял и положил (или отключил))

				ShowLineMode();
    3482:	0e 94 aa 20 	call	0x4154 <ShowLineMode>
				return linemode;
    3486:	80 91 f4 06 	lds	r24, 0x06F4
    348a:	99 27       	eor	r25, r25
    348c:	87 fd       	sbrc	r24, 7
    348e:	90 95       	com	r25
    3490:	9d 83       	std	Y+5, r25	; 0x05
    3492:	8c 83       	std	Y+4, r24	; 0x04
    3494:	08 c0       	rjmp	.+16     	; 0x34a6 <AutoDialToNumber+0x170>
			}

			goto haha;
		}
	}else
		if (2 > tryCount)
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	82 30       	cpi	r24, 0x02	; 2
    349a:	08 f4       	brcc	.+2      	; 0x349e <AutoDialToNumber+0x168>
			goto hoho;
    349c:	68 cf       	rjmp	.-304    	; 0x336e <AutoDialToNumber+0x38>

	return 34;				//  придумать, что это такое...
    349e:	82 e2       	ldi	r24, 0x22	; 34
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9d 83       	std	Y+5, r25	; 0x05
    34a4:	8c 83       	std	Y+4, r24	; 0x04
}
    34a6:	8c 81       	ldd	r24, Y+4	; 0x04
    34a8:	9d 81       	ldd	r25, Y+5	; 0x05
    34aa:	25 96       	adiw	r28, 0x05	; 5
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	08 95       	ret

000034bc <AutoDial>:

//  выполняется в главном цикле программы - вызывается из main
void AutoDial(void)
{
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	22 97       	sbiw	r28, 0x02	; 2
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
	unsigned char number = 0, res;
    34d0:	19 82       	std	Y+1, r1	; 0x01

	if (!g_sendOhranaEventMsgInProgress)
    34d2:	80 91 5a 07 	lds	r24, 0x075A
    34d6:	88 23       	and	r24, r24
    34d8:	09 f0       	breq	.+2      	; 0x34dc <AutoDial+0x20>
    34da:	a7 c0       	rjmp	.+334    	; 0x362a <AutoDial+0x16e>
	{	//  если в данный момент разговор не происходит

		ClearScreen();
    34dc:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		OutStr(szTrevoga);
    34e0:	87 e8       	ldi	r24, 0x87	; 135
    34e2:	94 e0       	ldi	r25, 0x04	; 4
    34e4:	0e 94 24 29 	call	0x5248 <OutStr>
		ClearInput();
    34e8:	0e 94 98 0b 	call	0x1730 <ClearInput>
		SetCaret(LINE_2_START_POS);
    34ec:	80 e4       	ldi	r24, 0x40	; 64
    34ee:	0e 94 47 29 	call	0x528e <SetCaret>

		modeBeforeZvonok = MD_OHRANA;		//  чтобы положив, оказались в охране
    34f2:	84 e0       	ldi	r24, 0x04	; 4
    34f4:	80 93 fd 06 	sts	0x06FD, r24
		g_attemptCounterTheSameNumber = 0;
    34f8:	10 92 e8 06 	sts	0x06E8, r1

		//  цикл по номерам записной книжки
		while (number < MAX_TEL_AUTO_DIAL_NUMBERS_ITEMS)
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	86 30       	cpi	r24, 0x06	; 6
    3500:	08 f0       	brcs	.+2      	; 0x3504 <AutoDial+0x48>
    3502:	8e c0       	rjmp	.+284    	; 0x3620 <AutoDial+0x164>
		{
			if ('.' == g_szAutoDialNumbers[number][1])
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	33 27       	eor	r19, r19
    350a:	c9 01       	movw	r24, r18
    350c:	82 0f       	add	r24, r18
    350e:	93 1f       	adc	r25, r19
    3510:	fc 01       	movw	r30, r24
    3512:	e3 54       	subi	r30, 0x43	; 67
    3514:	fc 4f       	sbci	r31, 0xFC	; 252
    3516:	80 81       	ld	r24, Z
    3518:	91 81       	ldd	r25, Z+1	; 0x01
    351a:	fc 01       	movw	r30, r24
    351c:	31 96       	adiw	r30, 0x01	; 1
    351e:	80 81       	ld	r24, Z
    3520:	8e 32       	cpi	r24, 0x2E	; 46
    3522:	09 f4       	brne	.+2      	; 0x3526 <AutoDial+0x6a>
				break;						//  попался первый пустой номер
    3524:	7d c0       	rjmp	.+250    	; 0x3620 <AutoDial+0x164>

			g_DefferedSensorsState_ = 0;
    3526:	10 92 82 06 	sts	0x0682, r1
			res = AutoDialToNumber(number);	//производим дозвон (удар. на первом слоге)
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	0e 94 9b 19 	call	0x3336 <AutoDialToNumber>
    3530:	8a 83       	std	Y+2, r24	; 0x02

			if (LM_UP == res)
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	84 30       	cpi	r24, 0x04	; 4
    3536:	09 f0       	breq	.+2      	; 0x353a <AutoDial+0x7e>
    3538:	5c c0       	rjmp	.+184    	; 0x35f2 <AutoDial+0x136>
			{	// взял таки трубку

				g_sendOhranaEventMsgInProgress = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	80 93 5a 07 	sts	0x075A, r24

				if (g_needHello)
    3540:	80 91 00 07 	lds	r24, 0x0700
    3544:	88 23       	and	r24, r24
    3546:	69 f0       	breq	.+26     	; 0x3562 <AutoDial+0xa6>
				{
					//  в течении этого времени должен подтвердить поднятие - пароль
					confirmUp = MAX_RAZGOVOR_TIME;
    3548:	84 e1       	ldi	r24, 0x14	; 20
    354a:	80 93 42 06 	sts	0x0642, r24
					SendVoice(VOICE_HELLO, 0);		//  посылаем ему приветствие
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	88 e7       	ldi	r24, 0x78	; 120
    3552:	95 e0       	ldi	r25, 0x05	; 5
    3554:	0e 94 61 1c 	call	0x38c2 <SendVoice>
					while(ring);				//  ждем, пока звук кончится
    3558:	80 91 37 06 	lds	r24, 0x0637
    355c:	88 23       	and	r24, r24
    355e:	09 f0       	breq	.+2      	; 0x3562 <AutoDial+0xa6>
    3560:	fb cf       	rjmp	.-10     	; 0x3558 <AutoDial+0x9c>
				}

hehe:			ShowLineMode();
    3562:	0e 94 aa 20 	call	0x4154 <ShowLineMode>
				delayms(200);
    3566:	88 ec       	ldi	r24, 0xC8	; 200
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 ba 38 	call	0x7174 <delayms>

				//  гудок буд-то бы был, чтобы первый же следующий длинный
				//	служил сигналом OS_OR_DOWN
				g_wasOne = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 c1 06 	sts	0x06C1, r24

				//  весь сеанс протекает в следующей функции
				WaitForModePresent(0, linemode, LM_UP);
    3574:	44 e0       	ldi	r20, 0x04	; 4
    3576:	60 91 f4 06 	lds	r22, 0x06F4
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	0e 94 8f 18 	call	0x311e <WaitForModePresent>

				if ((LM_OS_OR_DOWN == linemode) || (LM_BUSY == linemode))
    3580:	80 91 f4 06 	lds	r24, 0x06F4
    3584:	83 30       	cpi	r24, 0x03	; 3
    3586:	29 f0       	breq	.+10     	; 0x3592 <AutoDial+0xd6>
    3588:	80 91 f4 06 	lds	r24, 0x06F4
    358c:	82 30       	cpi	r24, 0x02	; 2
    358e:	09 f0       	breq	.+2      	; 0x3592 <AutoDial+0xd6>
    3590:	e8 cf       	rjmp	.-48     	; 0x3562 <AutoDial+0xa6>
				{	//  положили трубку - LM_BUSY - городская, LM_OS~ - наша
					ShowLineMode();
    3592:	0e 94 aa 20 	call	0x4154 <ShowLineMode>
					delayms(1000);
    3596:	88 ee       	ldi	r24, 0xE8	; 232
    3598:	93 e0       	ldi	r25, 0x03	; 3
    359a:	0e 94 ba 38 	call	0x7174 <delayms>
					RingOff();
    359e:	0e 94 6b 20 	call	0x40d6 <RingOff>

					if (!g_wasRequest)
    35a2:	80 91 ea 06 	lds	r24, 0x06EA
    35a6:	88 23       	and	r24, r24
    35a8:	81 f4       	brne	.+32     	; 0x35ca <AutoDial+0x10e>
					{	//  может и подняли, но запроса состояния не давали
						g_attemptCounterTheSameNumber++;
    35aa:	80 91 e8 06 	lds	r24, 0x06E8
    35ae:	8f 5f       	subi	r24, 0xFF	; 255
    35b0:	80 93 e8 06 	sts	0x06E8, r24
						if (3 == g_attemptCounterTheSameNumber)
    35b4:	80 91 e8 06 	lds	r24, 0x06E8
    35b8:	83 30       	cpi	r24, 0x03	; 3
    35ba:	09 f0       	breq	.+2      	; 0x35be <AutoDial+0x102>
    35bc:	9f cf       	rjmp	.-194    	; 0x34fc <AutoDial+0x40>
						{	//  хватит с одним номером возиться - есть другие
							number++;
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	89 83       	std	Y+1, r24	; 0x01
							g_attemptCounterTheSameNumber = 0;
    35c4:	10 92 e8 06 	sts	0x06E8, r1
    35c8:	99 cf       	rjmp	.-206    	; 0x34fc <AutoDial+0x40>
						}
						//continue;
					}else
					if (g_DefferedSensorsState)
    35ca:	80 91 c3 06 	lds	r24, 0x06C3
    35ce:	88 23       	and	r24, r24
    35d0:	39 f1       	breq	.+78     	; 0x3620 <AutoDial+0x164>
					{	//  или не нажали подтверждение "2" (которое обнуляет)
						//  или сработало, пока болтали

						g_attemptCounterTheSameNumber++;
    35d2:	80 91 e8 06 	lds	r24, 0x06E8
    35d6:	8f 5f       	subi	r24, 0xFF	; 255
    35d8:	80 93 e8 06 	sts	0x06E8, r24
						if (3 == g_attemptCounterTheSameNumber)
    35dc:	80 91 e8 06 	lds	r24, 0x06E8
    35e0:	83 30       	cpi	r24, 0x03	; 3
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <AutoDial+0x12a>
    35e4:	8b cf       	rjmp	.-234    	; 0x34fc <AutoDial+0x40>
						{	//  хватит с одним номером возиться - есть другие
							number++;
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	8f 5f       	subi	r24, 0xFF	; 255
    35ea:	89 83       	std	Y+1, r24	; 0x01
							g_attemptCounterTheSameNumber = 0;
    35ec:	10 92 e8 06 	sts	0x06E8, r1
    35f0:	85 cf       	rjmp	.-246    	; 0x34fc <AutoDial+0x40>
						}
					}else
						break;			//  все удачно - все получилось
				}else
				{

					goto hehe;
				}
			}
			else
			{	//  трубку не подняли
				RingOff();
    35f2:	0e 94 6b 20 	call	0x40d6 <RingOff>
				ShowLineMode();
    35f6:	0e 94 aa 20 	call	0x4154 <ShowLineMode>

				g_attemptCounterTheSameNumber++;
    35fa:	80 91 e8 06 	lds	r24, 0x06E8
    35fe:	8f 5f       	subi	r24, 0xFF	; 255
    3600:	80 93 e8 06 	sts	0x06E8, r24
				if (3 == g_attemptCounterTheSameNumber)
    3604:	80 91 e8 06 	lds	r24, 0x06E8
    3608:	83 30       	cpi	r24, 0x03	; 3
    360a:	29 f4       	brne	.+10     	; 0x3616 <AutoDial+0x15a>
				{	//  хватит с одним номером возиться - есть другие
					number++;
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	8f 5f       	subi	r24, 0xFF	; 255
    3610:	89 83       	std	Y+1, r24	; 0x01
					g_attemptCounterTheSameNumber = 0;
    3612:	10 92 e8 06 	sts	0x06E8, r1
				}
/*
				if (LM_KPV == res)
				{	//  трубку не взял, вышли по таймауту или просто занято
					//  звоним еще раз


				}else
				if ((LM_BUSY == res) || (LM_FAULT == res))
				{	//  трубку не взял, вышли по таймауту или просто занято
					//  или аппарат выключен, или недоступен или вне зоны обслуживания

					g_attemptCounterTheSameNumber++;
					if (3 == g_attemptCounterTheSameNumber)
					{	//  хватит с одним номером возиться - есть другие
						number++;
						g_attemptCounterTheSameNumber = 0;
					}

				}else
				{
					number++;
					g_attemptCounterTheSameNumber = 0;
				}
*/
				delayms(1000);
    3616:	88 ee       	ldi	r24, 0xE8	; 232
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	0e 94 ba 38 	call	0x7174 <delayms>
    361e:	6e cf       	rjmp	.-292    	; 0x34fc <AutoDial+0x40>
			}
		}

		SetCaret(LINE_2_START_POS);
    3620:	80 e4       	ldi	r24, 0x40	; 64
    3622:	0e 94 47 29 	call	0x528e <SetCaret>

		SheduleOhranaEvent();
    3626:	0e 94 57 19 	call	0x32ae <SheduleOhranaEvent>
    362a:	22 96       	adiw	r28, 0x02	; 2
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	de bf       	out	0x3e, r29	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	df 91       	pop	r29
    3638:	cf 91       	pop	r28
    363a:	08 95       	ret

0000363c <AutoDialToNumber2>:
	}
}

void AutoDialToNumber2(unsigned char n)
{
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	21 97       	sbiw	r28, 0x01	; 1
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	89 83       	std	Y+1, r24	; 0x01
	g_ShowTime = FALSE;
    3652:	10 92 f7 06 	sts	0x06F7, r1
	TELUP;						//  трубку поднимаем
    3656:	80 91 23 00 	lds	r24, 0x0023
    365a:	88 60       	ori	r24, 0x08	; 8
    365c:	80 93 23 00 	sts	0x0023, r24
	g_dtmfPSWOk = 0;				//  пароль в новом сеансе еще не введен
    3660:	10 92 f5 06 	sts	0x06F5, r1
#ifdef REDUCE
	g_dtmfPasswordPermission = 0;
    3664:	10 92 c4 06 	sts	0x06C4, r1
#endif
	delayms(100);
    3668:	84 e6       	ldi	r24, 0x64	; 100
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	0e 94 ba 38 	call	0x7174 <delayms>

	//  DialNumber всегда набирает только g_szLastNumber
	memcpy(g_szLastNumber, g_szAutoDialNumbers[n], MAX_INPUT);
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	28 2f       	mov	r18, r24
    3674:	33 27       	eor	r19, r19
    3676:	c9 01       	movw	r24, r18
    3678:	82 0f       	add	r24, r18
    367a:	93 1f       	adc	r25, r19
    367c:	fc 01       	movw	r30, r24
    367e:	e3 54       	subi	r30, 0x43	; 67
    3680:	fc 4f       	sbci	r31, 0xFC	; 252
    3682:	40 e1       	ldi	r20, 0x10	; 16
    3684:	50 e0       	ldi	r21, 0x00	; 0
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	85 e8       	ldi	r24, 0x85	; 133
    368c:	96 e0       	ldi	r25, 0x06	; 6
    368e:	0e 94 04 4f 	call	0x9e08 <memcpy>

	ClearSecondLine();
    3692:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>
	OutData(n + 0x31);
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	8f 5c       	subi	r24, 0xCF	; 207
    369a:	0e 94 e7 28 	call	0x51ce <OutData>
	OutData('.');
    369e:	8e e2       	ldi	r24, 0x2E	; 46
    36a0:	0e 94 e7 28 	call	0x51ce <OutData>
	OutStr(g_szLastNumber);
    36a4:	85 e8       	ldi	r24, 0x85	; 133
    36a6:	96 e0       	ldi	r25, 0x06	; 6
    36a8:	0e 94 24 29 	call	0x5248 <OutStr>

	g_needHello = 0;					//  выдавать не нужно
    36ac:	10 92 00 07 	sts	0x0700, r1
	g_wasRequest = 0;				//  запроса не было ("1")
    36b0:	10 92 ea 06 	sts	0x06EA, r1
	g_wasConfirm = 0;
    36b4:	10 92 e7 06 	sts	0x06E7, r1

	EIMSK &= ~_BV(INT6);
    36b8:	80 91 59 00 	lds	r24, 0x0059
    36bc:	8f 7b       	andi	r24, 0xBF	; 191
    36be:	80 93 59 00 	sts	0x0059, r24
	DialNumber();
    36c2:	0e 94 2b 12 	call	0x2456 <DialNumber>
	confirmUp = MAX_RAZGOVOR_TIME;
    36c6:	84 e1       	ldi	r24, 0x14	; 20
    36c8:	80 93 42 06 	sts	0x0642, r24
    36cc:	21 96       	adiw	r28, 0x01	; 1
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	df 91       	pop	r29
    36da:	cf 91       	pop	r28
    36dc:	08 95       	ret

000036de <AutoDial2>:
}

void AutoDial2(void)
{
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	23 97       	sbiw	r28, 0x03	; 3
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
	unsigned char number = 0, someNumberTry, contin;
    36f2:	19 82       	std	Y+1, r1	; 0x01

	//if (!g_sendOhranaEventMsgInProgress)
	{	//  если в данный момент разговор не происходит

		someNumberTry = 0;
    36f4:	1a 82       	std	Y+2, r1	; 0x02

		ClearScreen();
    36f6:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		OutStr(szTrevoga);
    36fa:	87 e8       	ldi	r24, 0x87	; 135
    36fc:	94 e0       	ldi	r25, 0x04	; 4
    36fe:	0e 94 24 29 	call	0x5248 <OutStr>
		ClearInput();
    3702:	0e 94 98 0b 	call	0x1730 <ClearInput>
		SetCaret(LINE_2_START_POS);
    3706:	80 e4       	ldi	r24, 0x40	; 64
    3708:	0e 94 47 29 	call	0x528e <SetCaret>

		modeBeforeZvonok = MD_OHRANA;		//  чтобы положив, оказались в охране
    370c:	84 e0       	ldi	r24, 0x04	; 4
    370e:	80 93 fd 06 	sts	0x06FD, r24
		g_attemptCounterTheSameNumber = 0;
    3712:	10 92 e8 06 	sts	0x06E8, r1

		//  цикл по номерам записной книжки
		while (number < MAX_TEL_AUTO_DIAL_NUMBERS_ITEMS)
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	86 30       	cpi	r24, 0x06	; 6
    371a:	08 f0       	brcs	.+2      	; 0x371e <AutoDial2+0x40>
    371c:	53 c0       	rjmp	.+166    	; 0x37c4 <AutoDial2+0xe6>
		{
			if ('.' == g_szAutoDialNumbers[number][1])
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	28 2f       	mov	r18, r24
    3722:	33 27       	eor	r19, r19
    3724:	c9 01       	movw	r24, r18
    3726:	82 0f       	add	r24, r18
    3728:	93 1f       	adc	r25, r19
    372a:	fc 01       	movw	r30, r24
    372c:	e3 54       	subi	r30, 0x43	; 67
    372e:	fc 4f       	sbci	r31, 0xFC	; 252
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	fc 01       	movw	r30, r24
    3736:	31 96       	adiw	r30, 0x01	; 1
    3738:	80 81       	ld	r24, Z
    373a:	8e 32       	cpi	r24, 0x2E	; 46
    373c:	09 f4       	brne	.+2      	; 0x3740 <AutoDial2+0x62>
				break;					//  попался первый пустой номер
    373e:	42 c0       	rjmp	.+132    	; 0x37c4 <AutoDial2+0xe6>

			g_DefferedSensorsState_ = 0;
    3740:	10 92 82 06 	sts	0x0682, r1
			RingOff();
    3744:	0e 94 6b 20 	call	0x40d6 <RingOff>
			contin = 0;
    3748:	1b 82       	std	Y+3, r1	; 0x03
			AutoDialToNumber2(number);	//производим дозвон (удар. на первом слоге)
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	0e 94 1e 1b 	call	0x363c <AutoDialToNumber2>

			//  ждем поднятия и запроса результатов сработки
			while (!g_wasRequest)
    3750:	80 91 ea 06 	lds	r24, 0x06EA
    3754:	88 23       	and	r24, r24
    3756:	89 f4       	brne	.+34     	; 0x377a <AutoDial2+0x9c>
			{
				if (!confirmUp)
    3758:	80 91 42 06 	lds	r24, 0x0642
    375c:	88 23       	and	r24, r24
    375e:	c1 f7       	brne	.-16     	; 0x3750 <AutoDial2+0x72>
				{	//  пока ждали - таймаут
					TimeExpiried();
    3760:	0e 94 ef 1b 	call	0x37de <TimeExpiried>
					if (++someNumberTry == 3)
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	8f 5f       	subi	r24, 0xFF	; 255
    3768:	8a 83       	std	Y+2, r24	; 0x02
    376a:	83 30       	cpi	r24, 0x03	; 3
    376c:	21 f4       	brne	.+8      	; 0x3776 <AutoDial2+0x98>
					{
						someNumberTry = 0;
    376e:	1a 82       	std	Y+2, r1	; 0x02
						number++;
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	8f 5f       	subi	r24, 0xFF	; 255
    3774:	89 83       	std	Y+1, r24	; 0x01
					}

					contin = 1;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	8b 83       	std	Y+3, r24	; 0x03
					break;
				}
			}

			if (contin)
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	88 23       	and	r24, r24
    377e:	09 f0       	breq	.+2      	; 0x3782 <AutoDial2+0xa4>
				continue;
    3780:	ca cf       	rjmp	.-108    	; 0x3716 <AutoDial2+0x38>

			//  дождались подтверждения поднятия - заводим таймер снова
			confirmUp = MAX_RAZGOVOR_TIME;
    3782:	84 e1       	ldi	r24, 0x14	; 20
    3784:	80 93 42 06 	sts	0x0642, r24

			//  ждем нажатия подтверждения уведомления ("2")
			while (!g_wasConfirm)
    3788:	80 91 e7 06 	lds	r24, 0x06E7
    378c:	88 23       	and	r24, r24
    378e:	89 f4       	brne	.+34     	; 0x37b2 <AutoDial2+0xd4>
			{
				if (!confirmUp)
    3790:	80 91 42 06 	lds	r24, 0x0642
    3794:	88 23       	and	r24, r24
    3796:	c1 f7       	brne	.-16     	; 0x3788 <AutoDial2+0xaa>
				{	//  пока ждали - таймаут
					TimeExpiried();
    3798:	0e 94 ef 1b 	call	0x37de <TimeExpiried>
					if (++someNumberTry == 4)
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	8f 5f       	subi	r24, 0xFF	; 255
    37a0:	8a 83       	std	Y+2, r24	; 0x02
    37a2:	84 30       	cpi	r24, 0x04	; 4
    37a4:	21 f4       	brne	.+8      	; 0x37ae <AutoDial2+0xd0>
					{
						someNumberTry = 0;
    37a6:	1a 82       	std	Y+2, r1	; 0x02
						number++;
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	8f 5f       	subi	r24, 0xFF	; 255
    37ac:	89 83       	std	Y+1, r24	; 0x01
					}

					contin = 1;
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	8b 83       	std	Y+3, r24	; 0x03
					break;
				}
			}

			if (contin)
    37b2:	8b 81       	ldd	r24, Y+3	; 0x03
    37b4:	88 23       	and	r24, r24
    37b6:	09 f0       	breq	.+2      	; 0x37ba <AutoDial2+0xdc>
				continue;
    37b8:	ae cf       	rjmp	.-164    	; 0x3716 <AutoDial2+0x38>

			if (!g_DefferedSensorsState)
    37ba:	80 91 c3 06 	lds	r24, 0x06C3
    37be:	88 23       	and	r24, r24
    37c0:	09 f0       	breq	.+2      	; 0x37c4 <AutoDial2+0xe6>
    37c2:	a9 cf       	rjmp	.-174    	; 0x3716 <AutoDial2+0x38>
				break;
		}

		SheduleOhranaEvent();
    37c4:	0e 94 57 19 	call	0x32ae <SheduleOhranaEvent>

		RingOff();
    37c8:	0e 94 6b 20 	call	0x40d6 <RingOff>
    37cc:	23 96       	adiw	r28, 0x03	; 3
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	cd bf       	out	0x3d, r28	; 61
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	08 95       	ret

000037de <TimeExpiried>:
	}
}

void TimeExpiried(void)
{
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
	RingOff();
    37e6:	0e 94 6b 20 	call	0x40d6 <RingOff>
	ClearScreen();
    37ea:	0e 94 79 29 	call	0x52f2 <ClearScreen>
	OutStr("Time expiried");
    37ee:	8f e8       	ldi	r24, 0x8F	; 143
    37f0:	94 e0       	ldi	r25, 0x04	; 4
    37f2:	0e 94 24 29 	call	0x5248 <OutStr>
	delayms(300);
    37f6:	8c e2       	ldi	r24, 0x2C	; 44
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	0e 94 ba 38 	call	0x7174 <delayms>
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	08 95       	ret

00003804 <SaveDialNumberToEEPROM>:
}

//  сохраняет номер автодозвона номер number в EEPROM...
void SaveDialNumberToEEPROM(unsigned char number)
{
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	21 97       	sbiw	r28, 0x01	; 1
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	89 83       	std	Y+1, r24	; 0x01
	epmwbl(g_szAutoDialNumbers[number],
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	99 27       	eor	r25, r25
    381e:	82 95       	swap	r24
    3820:	92 95       	swap	r25
    3822:	90 7f       	andi	r25, 0xF0	; 240
    3824:	98 27       	eor	r25, r24
    3826:	80 7f       	andi	r24, 0xF0	; 240
    3828:	98 27       	eor	r25, r24
    382a:	bc 01       	movw	r22, r24
    382c:	68 5e       	subi	r22, 0xE8	; 232
    382e:	7f 4f       	sbci	r23, 0xFF	; 255
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	28 2f       	mov	r18, r24
    3834:	33 27       	eor	r19, r19
    3836:	c9 01       	movw	r24, r18
    3838:	82 0f       	add	r24, r18
    383a:	93 1f       	adc	r25, r19
    383c:	fc 01       	movw	r30, r24
    383e:	e3 54       	subi	r30, 0x43	; 67
    3840:	fc 4f       	sbci	r31, 0xFC	; 252
    3842:	40 e1       	ldi	r20, 0x10	; 16
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	80 81       	ld	r24, Z
    3848:	91 81       	ldd	r25, Z+1	; 0x01
    384a:	0e 94 45 39 	call	0x728a <epmwbl>
    384e:	21 96       	adiw	r28, 0x01	; 1
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	08 95       	ret

00003860 <Ohrana_>:
		(void*)(EADR_AUTO_DIAL_NUMBERS + number*(INPUT_LEN_TEL + 1)),
		(INPUT_LEN_TEL + 1));
}
#ifndef REDUCE
void HandsFree(void)
{/*
	if ((MD_HELLO == g_Mode) || (MD_TEL == g_Mode))
	{
		if (g_hf)
		{	//  если HF уже нажимали - отключаем режим HF

			SetSpeakerVolume(0);
			PORTD &= ~PWA;

			if (g_telon)
			{	//  при поднятой трубке отключаем только динамик

			}else
			{	//  при опущеной трубке разрываем линию
				PORTF &= ~TELON;
				PrepareToMode(MD_HELLO);
			}
		}else
		{	//  если нажимаем первый раз
			PORTD |= PWA;
			SetSpeakerVolume(g_speakerVolume * 16);

			if (!g_telon)
			{	//  если трубка лежит - имитируем поднятие трубки
				PORTF |= TELON;
				//  и переходим в режим прямого набора номера
				Telephone();
			}
			else
				;//  нажатие клавиши HF при поднятой трубке влияет только на динамик
		}

		g_hf = !g_hf;
	}*/
}
#endif
void Ohrana_(void)
{
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
	builtinSensorsPollInterval = 0;
    3868:	10 92 70 07 	sts	0x0770, r1
	helloCounter = 0;
    386c:	10 92 a8 06 	sts	0x06A8, r1
	ClearScreen();
    3870:	0e 94 79 29 	call	0x52f2 <ClearScreen>
	ClearInput();
    3874:	0e 94 98 0b 	call	0x1730 <ClearInput>

#ifndef NEWVG
	unsigned char k;

	OutStr(szPoisk);		//  Поиск
	StartProgress();
	HideCaret();

	for (k = 3; k < 5; k++)
	{
		//REDUCEClearSecondLine();
		itoa(k, g_szInput, 10);

		g_CurDev.adr = k;

		// подключаемся к устройству и ждем ответа от него - максимум 1 секунда
		if (ConnectToDevice())
		{
			//REDUCEOutStr(strcat(g_szInput, sz_est));	//  - есть

			delayms(300);

			//  устанавливает в состояние охраны и ждет подтверждения
			if (SetOhranaState(k, 1))
			{
				//REDUCEClearSecondLine();
				//  Устр под охраной
				//REDUCEOutStr(szUstrPodOhr);
				delayms(300);
			}
		}
		else
		{
			//REDUCEOutStr(strcat(g_szInput, sz_net));		//  - нет
			delayms(300);
		}
	}

	progress = FALSE;
	//  только теперь разрешаем опрос устройств
	EnablePoll(1);
#endif
	PrepareToMode(MD_OHRANA);
    3878:	84 e0       	ldi	r24, 0x04	; 4
    387a:	0e 94 78 09 	call	0x12f0 <PrepareToMode>

	g_ShowTime = TRUE;			//  можно, если не запрещено
    387e:	8f ef       	ldi	r24, 0xFF	; 255
    3880:	80 93 f7 06 	sts	0x06F7, r24

	g_DefferedWork &= ~_BV(DW_SENDOHRANAEVENT);
    3884:	80 91 5d 07 	lds	r24, 0x075D
    3888:	8e 7f       	andi	r24, 0xFE	; 254
    388a:	80 93 5d 07 	sts	0x075D, r24
	g_DefferedSensorsState = 0;
    388e:	10 92 c3 06 	sts	0x06C3, r1
	g_DefferStage = 0;
    3892:	10 92 3b 06 	sts	0x063B, r1
	defferedOhranaEvent = 0;
    3896:	10 92 0f 07 	sts	0x070F, r1
    389a:	10 92 0e 07 	sts	0x070E, r1
	sensors = 0;
    389e:	10 92 6e 07 	sts	0x076E, r1
	dontStartConfirmTimer = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	80 93 d0 06 	sts	0x06D0, r24
	SendVoice(VOICE_SYSTEM_POD_OHRANOY, 1);
    38a8:	61 e0       	ldi	r22, 0x01	; 1
    38aa:	8c ed       	ldi	r24, 0xDC	; 220
    38ac:	95 e0       	ldi	r25, 0x05	; 5
    38ae:	0e 94 61 1c 	call	0x38c2 <SendVoice>

	HFON;				//  включаем питание датчиков
    38b2:	80 91 38 00 	lds	r24, 0x0038
    38b6:	80 68       	ori	r24, 0x80	; 128
    38b8:	80 93 38 00 	sts	0x0038, r24
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	08 95       	ret

000038c2 <SendVoice>:
}

void SendVoice(unsigned short startPage, unsigned char speacAction)
{
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	23 97       	sbiw	r28, 0x03	; 3
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	9a 83       	std	Y+2, r25	; 0x02
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	6b 83       	std	Y+3, r22	; 0x03
	tmp = startPage;
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	80 93 7e 06 	sts	0x067E, r24
#ifndef PROTEUS
	if (startPage < 4090)
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	9a 81       	ldd	r25, Y+2	; 0x02
    38e6:	2f e0       	ldi	r18, 0x0F	; 15
    38e8:	8a 3f       	cpi	r24, 0xFA	; 250
    38ea:	92 07       	cpc	r25, r18
    38ec:	28 f4       	brcc	.+10     	; 0x38f8 <SendVoice+0x36>
	{
		//delayms(300);
		StartPlay(startPage, speacAction);
    38ee:	6b 81       	ldd	r22, Y+3	; 0x03
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	0e 94 7b 00 	call	0xf6 <StartPlay>
    38f8:	23 96       	adiw	r28, 0x03	; 3
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	08 95       	ret

0000390a <DTMFCmdStorer>:
	}
#endif
}

void DTMFCmdStorer(unsigned char dtmfCod)
{
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	23 97       	sbiw	r28, 0x03	; 3
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	89 83       	std	Y+1, r24	; 0x01
	unsigned short dtmfCod_;

	if (DTMF_CMD_ESCAPE == dtmfCod)
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	8b 30       	cpi	r24, 0x0B	; 11
    3924:	29 f4       	brne	.+10     	; 0x3930 <DTMFCmdStorer+0x26>
	{	//  обнуление буфера команд и сброс текущего режима
		g_dtmfMode = DTMF_MODE_NORMAL;
    3926:	10 92 16 07 	sts	0x0716, r1
		g_dtmfCmdBufPos = 0;
    392a:	10 92 3c 06 	sts	0x063C, r1
    392e:	db c0       	rjmp	.+438    	; 0x3ae6 <DTMFCmdStorer+0x1dc>
	}else

	if (DTMF_CMD_ENTER == dtmfCod)
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	8c 30       	cpi	r24, 0x0C	; 12
    3934:	09 f0       	breq	.+2      	; 0x3938 <DTMFCmdStorer+0x2e>
    3936:	80 c0       	rjmp	.+256    	; 0x3a38 <DTMFCmdStorer+0x12e>
	{	//  выполнить DTMF команду, содержащуюся в буфере

		//  перезапустим - пытается набрать пароль, не будем ему вредить
		//if (!g_dtmfPSWOk)
			confirmUp = MAX_RAZGOVOR_TIME;
    3938:	84 e1       	ldi	r24, 0x14	; 20
    393a:	80 93 42 06 	sts	0x0642, r24

		if (g_dtmfPSWOk)
    393e:	80 91 f5 06 	lds	r24, 0x06F5
    3942:	88 23       	and	r24, r24
    3944:	f1 f0       	breq	.+60     	; 0x3982 <DTMFCmdStorer+0x78>
		{
			if ((DTMF_MODE_AUTO_DIAL_NUMBER_CHANGE == g_dtmfMode) &&
    3946:	80 91 16 07 	lds	r24, 0x0716
    394a:	82 30       	cpi	r24, 0x02	; 2
    394c:	91 f4       	brne	.+36     	; 0x3972 <DTMFCmdStorer+0x68>
    394e:	80 91 3c 06 	lds	r24, 0x063C
    3952:	81 30       	cpi	r24, 0x01	; 1
    3954:	71 f4       	brne	.+28     	; 0x3972 <DTMFCmdStorer+0x68>
				(1 == g_dtmfCmdBufPos)
				)
			{	//  особый случай - ввод паузы в телефонный номер
				g_dtmfCmdBuf[g_dtmfCmdBufPos] = DIAL_PAUSE - 0x30;
    3956:	80 91 3c 06 	lds	r24, 0x063C
    395a:	99 27       	eor	r25, r25
    395c:	fc 01       	movw	r30, r24
    395e:	ee 5f       	subi	r30, 0xFE	; 254
    3960:	f8 4f       	sbci	r31, 0xF8	; 248
    3962:	8e e8       	ldi	r24, 0x8E	; 142
    3964:	80 83       	st	Z, r24
				g_dtmfCmdBufPos++;
    3966:	80 91 3c 06 	lds	r24, 0x063C
    396a:	8f 5f       	subi	r24, 0xFF	; 255
    396c:	80 93 3c 06 	sts	0x063C, r24
				return;
    3970:	bd c0       	rjmp	.+378    	; 0x3aec <DTMFCmdStorer+0x1e2>
			}

			if (g_dtmfCmdBufPos)
    3972:	80 91 3c 06 	lds	r24, 0x063C
    3976:	88 23       	and	r24, r24
    3978:	09 f4       	brne	.+2      	; 0x397c <DTMFCmdStorer+0x72>
    397a:	5b c0       	rjmp	.+182    	; 0x3a32 <DTMFCmdStorer+0x128>
				DTMFCommandHandle();		//  если в буфере команды есть команда
    397c:	0e 94 7f 1d 	call	0x3afe <DTMFCommandHandle>
    3980:	58 c0       	rjmp	.+176    	; 0x3a32 <DTMFCmdStorer+0x128>
			else;
			// простое нажатие # повторяет предыдущую команду(если ее можно повторить)
		}else
		{	//  наверное это пароль
#ifdef REDUCE
			if (!g_dtmfPasswordPermission)
    3982:	80 91 c4 06 	lds	r24, 0x06C4
    3986:	88 23       	and	r24, r24
    3988:	b1 f4       	brne	.+44     	; 0x39b6 <DTMFCmdStorer+0xac>
			{	// если пароль еще вводить нельзя

				if (DTMF_CMD_ENTER == g_lastDTMFCod)
    398a:	80 91 7f 06 	lds	r24, 0x067F
    398e:	8c 30       	cpi	r24, 0x0C	; 12
    3990:	71 f4       	brne	.+28     	; 0x39ae <DTMFCmdStorer+0xa4>
				{
					if(++g_DTMFEnterPressCounter == 5)
    3992:	80 91 57 07 	lds	r24, 0x0757
    3996:	8f 5f       	subi	r24, 0xFF	; 255
    3998:	80 93 57 07 	sts	0x0757, r24
    399c:	85 30       	cpi	r24, 0x05	; 5
    399e:	09 f0       	breq	.+2      	; 0x39a2 <DTMFCmdStorer+0x98>
    39a0:	48 c0       	rjmp	.+144    	; 0x3a32 <DTMFCmdStorer+0x128>
					{	//  пять нажатий решетки подряд открывают дорогу ко вводу
						//  пароля, без этого считается, что вводятся команды
						//  усеченного режима
						g_dtmfPasswordPermission = TRUE;
    39a2:	8f ef       	ldi	r24, 0xFF	; 255
    39a4:	80 93 c4 06 	sts	0x06C4, r24
						g_DTMFEnterPressCounter = 0;
    39a8:	10 92 57 07 	sts	0x0757, r1
    39ac:	42 c0       	rjmp	.+132    	; 0x3a32 <DTMFCmdStorer+0x128>
					}
				}else
					//  все предыдущие накопленные нажатия обнуляются
					g_DTMFEnterPressCounter = 1;
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	80 93 57 07 	sts	0x0757, r24
    39b4:	3e c0       	rjmp	.+124    	; 0x3a32 <DTMFCmdStorer+0x128>

			} else
#endif
			{	//  пароль вводить можно, он ли это

				//  ставим ноль-терминатор...
				g_dtmfCmdBuf[g_dtmfCmdBufPos] = 0;
    39b6:	80 91 3c 06 	lds	r24, 0x063C
    39ba:	99 27       	eor	r25, r25
    39bc:	fc 01       	movw	r30, r24
    39be:	ee 5f       	subi	r30, 0xFE	; 254
    39c0:	f8 4f       	sbci	r31, 0xF8	; 248
    39c2:	10 82       	st	Z, r1
				ClearScreen();
    39c4:	0e 94 79 29 	call	0x52f2 <ClearScreen>

				if (!strncmp(g_dtmfCmdBuf, g_szSetupPassword,
    39c8:	85 ec       	ldi	r24, 0xC5	; 197
    39ca:	96 e0       	ldi	r25, 0x06	; 6
    39cc:	0e 94 37 4f 	call	0x9e6e <strlen>
    39d0:	ac 01       	movw	r20, r24
    39d2:	65 ec       	ldi	r22, 0xC5	; 197
    39d4:	76 e0       	ldi	r23, 0x06	; 6
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	97 e0       	ldi	r25, 0x07	; 7
    39da:	0e 94 40 4f 	call	0x9e80 <strncmp>
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	71 f4       	brne	.+28     	; 0x39fe <DTMFCmdStorer+0xf4>
					strlen(g_szSetupPassword)))
				{
					OutStr("Password - GOOD");
    39e2:	8d e9       	ldi	r24, 0x9D	; 157
    39e4:	94 e0       	ldi	r25, 0x04	; 4
    39e6:	0e 94 24 29 	call	0x5248 <OutStr>
					g_dtmfPSWOk = 1;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	80 93 f5 06 	sts	0x06F5, r24
					dtmfCod_ = VOICE_ARTEM_POZDRAVLYAEM;
    39f0:	84 ed       	ldi	r24, 0xD4	; 212
    39f2:	96 e0       	ldi	r25, 0x06	; 6
    39f4:	9b 83       	std	Y+3, r25	; 0x03
    39f6:	8a 83       	std	Y+2, r24	; 0x02
					//  теперь может держать трубку сколько хочет
					confirmUp = 0;
    39f8:	10 92 42 06 	sts	0x0642, r1
    39fc:	08 c0       	rjmp	.+16     	; 0x3a0e <DTMFCmdStorer+0x104>
				}
				else
				{
					OutStr("Password - BAD");
    39fe:	8d ea       	ldi	r24, 0xAD	; 173
    3a00:	94 e0       	ldi	r25, 0x04	; 4
    3a02:	0e 94 24 29 	call	0x5248 <OutStr>
					//  выдать фразу - пароль неверен!
					dtmfCod_ = VOICE_ARTEM_WRONGPWD;
    3a06:	87 eb       	ldi	r24, 0xB7	; 183
    3a08:	96 e0       	ldi	r25, 0x06	; 6
    3a0a:	9b 83       	std	Y+3, r25	; 0x03
    3a0c:	8a 83       	std	Y+2, r24	; 0x02
				}

				if ((VOICE_ARTEM_POZDRAVLYAEM == dtmfCod_) &&
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	26 e0       	ldi	r18, 0x06	; 6
    3a14:	84 3d       	cpi	r24, 0xD4	; 212
    3a16:	92 07       	cpc	r25, r18
    3a18:	39 f4       	brne	.+14     	; 0x3a28 <DTMFCmdStorer+0x11e>
    3a1a:	80 91 c3 06 	lds	r24, 0x06C3
    3a1e:	88 23       	and	r24, r24
    3a20:	19 f0       	breq	.+6      	; 0x3a28 <DTMFCmdStorer+0x11e>
					(g_DefferedSensorsState))
				{	//  если пароль введен правильно и есть инфа о сработавших
					//  датчиках, вместо подтверждения о правильном пароле
					//  дадим ему датчики...

					SendAllVoice();
    3a22:	0e 94 3a 23 	call	0x4674 <SendAllVoice>
    3a26:	05 c0       	rjmp	.+10     	; 0x3a32 <DTMFCmdStorer+0x128>
				}else
					PlayVoice(dtmfCod_, 0);
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2e:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
			}
		}

		g_dtmfCmdBufPos = 0;			//  сброс буфера команд
    3a32:	10 92 3c 06 	sts	0x063C, r1
    3a36:	57 c0       	rjmp	.+174    	; 0x3ae6 <DTMFCmdStorer+0x1dc>
	}
	else
	if (g_dtmfCmdBufPos < DTMF_CMD_BUF_LEN)
    3a38:	80 91 3c 06 	lds	r24, 0x063C
    3a3c:	8a 30       	cpi	r24, 0x0A	; 10
    3a3e:	08 f0       	brcs	.+2      	; 0x3a42 <DTMFCmdStorer+0x138>
    3a40:	52 c0       	rjmp	.+164    	; 0x3ae6 <DTMFCmdStorer+0x1dc>
	{
		if (0x0A == dtmfCod)
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	8a 30       	cpi	r24, 0x0A	; 10
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <DTMFCmdStorer+0x140>
			dtmfCod = 0;
    3a48:	19 82       	std	Y+1, r1	; 0x01

		if ((!g_dtmfPSWOk) || (DTMF_MODE_PSWD_CHANGE == g_dtmfMode))
    3a4a:	80 91 f5 06 	lds	r24, 0x06F5
    3a4e:	88 23       	and	r24, r24
    3a50:	29 f0       	breq	.+10     	; 0x3a5c <DTMFCmdStorer+0x152>
    3a52:	80 91 16 07 	lds	r24, 0x0716
    3a56:	81 30       	cpi	r24, 0x01	; 1
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <DTMFCmdStorer+0x152>
    3a5a:	03 c0       	rjmp	.+6      	; 0x3a62 <DTMFCmdStorer+0x158>
										//  если в текущем сеансе пароль не введен
			dtmfCod = dtmfCod + 0x30;	//  ожидаем только его, а сравнивать лучше
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	80 5d       	subi	r24, 0xD0	; 208
    3a60:	89 83       	std	Y+1, r24	; 0x01
										//	строки с ASCII цифровыми символами

		g_dtmfCmdBuf[g_dtmfCmdBufPos] = dtmfCod;
    3a62:	80 91 3c 06 	lds	r24, 0x063C
    3a66:	99 27       	eor	r25, r25
    3a68:	fc 01       	movw	r30, r24
    3a6a:	ee 5f       	subi	r30, 0xFE	; 254
    3a6c:	f8 4f       	sbci	r31, 0xF8	; 248
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	80 83       	st	Z, r24
		g_dtmfCmdBufPos++;
    3a72:	80 91 3c 06 	lds	r24, 0x063C
    3a76:	8f 5f       	subi	r24, 0xFF	; 255
    3a78:	80 93 3c 06 	sts	0x063C, r24
#ifdef REDUCE
		if (!g_dtmfPasswordPermission)
    3a7c:	80 91 c4 06 	lds	r24, 0x06C4
    3a80:	88 23       	and	r24, r24
    3a82:	89 f5       	brne	.+98     	; 0x3ae6 <DTMFCmdStorer+0x1dc>
		{	//  раз пароль вводить нельзя, то не было подряд пяти нажатий #
			//  если не было пяти нажатий, сейчас действует усеченный режим
			if (0x31 == dtmfCod)
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	81 33       	cpi	r24, 0x31	; 49
    3a88:	69 f4       	brne	.+26     	; 0x3aa4 <DTMFCmdStorer+0x19a>
			{
				g_wasRequest = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	80 93 ea 06 	sts	0x06EA, r24
				confirmUp = MAX_RAZGOVOR_TIME;
    3a90:	84 e1       	ldi	r24, 0x14	; 20
    3a92:	80 93 42 06 	sts	0x0642, r24
				//  запоминаем, какие сообщения посылаем
				g_DefferedSensorsState_ = g_DefferedSensorsState;
    3a96:	80 91 c3 06 	lds	r24, 0x06C3
    3a9a:	80 93 82 06 	sts	0x0682, r24
				SendAllVoice();
    3a9e:	0e 94 3a 23 	call	0x4674 <SendAllVoice>
    3aa2:	1f c0       	rjmp	.+62     	; 0x3ae2 <DTMFCmdStorer+0x1d8>
			}else
			if (0x32 == dtmfCod)
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	82 33       	cpi	r24, 0x32	; 50
    3aa8:	e1 f4       	brne	.+56     	; 0x3ae2 <DTMFCmdStorer+0x1d8>
			{	//  подтвердить услышанное сообщение

				//  ведь есть два типа звонка: входящий - запрос состояния и
				//  исходящий - автодозвон. Исходящий выполняется из функции
				//  AutoDial, которая вызывается из main, и нам надо корректно
				//	из нее выйти

				if (g_wasRequest)
    3aaa:	80 91 ea 06 	lds	r24, 0x06EA
    3aae:	88 23       	and	r24, r24
    3ab0:	81 f0       	breq	.+32     	; 0x3ad2 <DTMFCmdStorer+0x1c8>
				{	//  не просто нажали двойку, а осмысленно подтвердили

					//  сбрасываем только те биты, про датчики которых было сказано
					//  и подтверждено, ведь во время звука могли появится новые
					g_DefferedSensorsState &= ~g_DefferedSensorsState_;
    3ab2:	80 91 82 06 	lds	r24, 0x0682
    3ab6:	98 2f       	mov	r25, r24
    3ab8:	90 95       	com	r25
    3aba:	80 91 c3 06 	lds	r24, 0x06C3
    3abe:	89 23       	and	r24, r25
    3ac0:	80 93 c3 06 	sts	0x06C3, r24
					defferedOhranaEvent = 0;
    3ac4:	10 92 0f 07 	sts	0x070F, r1
    3ac8:	10 92 0e 07 	sts	0x070E, r1
					g_wasConfirm = 1;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	80 93 e7 06 	sts	0x06E7, r24
				}

				ring = 0;
    3ad2:	10 92 37 06 	sts	0x0637, r1
				linemode = LM_BUSY;
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	80 93 f4 06 	sts	0x06F4, r24
				confirmUp = 1;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	80 93 42 06 	sts	0x0642, r24

			}else
			if (0x33 == dtmfCod)
			{	//  поставить или снять с охраны
			};

			//  сбрасываем буфер DTMF-команд
			g_dtmfCmdBufPos = 0;
    3ae2:	10 92 3c 06 	sts	0x063C, r1
		}
#endif
	}
#ifdef REDUCE
	g_lastDTMFCod = dtmfCod;
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	80 93 7f 06 	sts	0x067F, r24
    3aec:	23 96       	adiw	r28, 0x03	; 3
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <DTMFCommandHandle>:
#endif
}

void DTMFCommandHandle(void)
{
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	63 97       	sbiw	r28, 0x13	; 19
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;
	unsigned char b0 = g_dtmfCmdBuf[0];
    3b12:	80 91 02 07 	lds	r24, 0x0702
    3b16:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char b1 = g_dtmfCmdBuf[1];
    3b18:	80 91 03 07 	lds	r24, 0x0703
    3b1c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char b2 = g_dtmfCmdBuf[2];
    3b1e:	80 91 04 07 	lds	r24, 0x0704
    3b22:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char b3 = g_dtmfCmdBuf[3];
    3b24:	80 91 05 07 	lds	r24, 0x0705
    3b28:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char dtmfMode = g_dtmfMode;
    3b2a:	80 91 16 07 	lds	r24, 0x0716
    3b2e:	8e 83       	std	Y+6, r24	; 0x06
	unsigned char dtmfTmp = g_dtmfTmp;
    3b30:	80 91 e6 06 	lds	r24, 0x06E6
    3b34:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char dtmfCmdBufPos = g_dtmfCmdBufPos;
    3b36:	80 91 3c 06 	lds	r24, 0x063C
    3b3a:	88 87       	std	Y+8, r24	; 0x08
	unsigned short param, param2;

	if (DTMF_MODE_NORMAL == dtmfMode)
    3b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b3e:	88 23       	and	r24, r24
    3b40:	09 f0       	breq	.+2      	; 0x3b44 <DTMFCommandHandle+0x46>
    3b42:	42 c1       	rjmp	.+644    	; 0x3dc8 <DTMFCommandHandle+0x2ca>
	{
		if (!b0)
    3b44:	8a 81       	ldd	r24, Y+2	; 0x02
    3b46:	88 23       	and	r24, r24
    3b48:	09 f0       	breq	.+2      	; 0x3b4c <DTMFCommandHandle+0x4e>
    3b4a:	38 c1       	rjmp	.+624    	; 0x3dbc <DTMFCommandHandle+0x2be>
		{	//  команда для главного устройства
			if (2 == dtmfCmdBufPos)	//  двухсимвольные команды  - только
    3b4c:	88 85       	ldd	r24, Y+8	; 0x08
    3b4e:	82 30       	cpi	r24, 0x02	; 2
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <DTMFCommandHandle+0x56>
				b2 = 0;				//  для краткости, на самом деле добавляется ноль
    3b52:	1c 82       	std	Y+4, r1	; 0x04

			if (!b1)
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	88 23       	and	r24, r24
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <DTMFCommandHandle+0x5e>
    3b5a:	aa c0       	rjmp	.+340    	; 0x3cb0 <DTMFCommandHandle+0x1b2>
			{
				if (2 == dtmfCmdBufPos)
    3b5c:	88 85       	ldd	r24, Y+8	; 0x08
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <DTMFCommandHandle+0x66>
    3b62:	e1 c0       	rjmp	.+450    	; 0x3d26 <DTMFCommandHandle+0x228>
				{	//  снять с охраны	 - а пароль?????
				}else
				{	//  специальные функции	00xx#
					if (0 == b2)	ClearScreen(); else
    3b64:	8c 81       	ldd	r24, Y+4	; 0x04
    3b66:	88 23       	and	r24, r24
    3b68:	19 f4       	brne	.+6      	; 0x3b70 <DTMFCommandHandle+0x72>
    3b6a:	0e 94 79 29 	call	0x52f2 <ClearScreen>
    3b6e:	db c0       	rjmp	.+438    	; 0x3d26 <DTMFCommandHandle+0x228>
					if (1 == b2)	g_ShowTime = 1; else
    3b70:	8c 81       	ldd	r24, Y+4	; 0x04
    3b72:	81 30       	cpi	r24, 0x01	; 1
    3b74:	21 f4       	brne	.+8      	; 0x3b7e <DTMFCommandHandle+0x80>
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	80 93 f7 06 	sts	0x06F7, r24
    3b7c:	d4 c0       	rjmp	.+424    	; 0x3d26 <DTMFCommandHandle+0x228>
					if (2 == b2)	g_ShowTime = 0; else
    3b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b80:	82 30       	cpi	r24, 0x02	; 2
    3b82:	19 f4       	brne	.+6      	; 0x3b8a <DTMFCommandHandle+0x8c>
    3b84:	10 92 f7 06 	sts	0x06F7, r1
    3b88:	ce c0       	rjmp	.+412    	; 0x3d26 <DTMFCommandHandle+0x228>
					if (3 == b2)
    3b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b8c:	83 30       	cpi	r24, 0x03	; 3
    3b8e:	49 f4       	brne	.+18     	; 0x3ba2 <DTMFCommandHandle+0xa4>
					{
						useLocalDTMF = 0;
    3b90:	10 92 01 07 	sts	0x0701, r1
						ClearScreen();
    3b94:	0e 94 79 29 	call	0x52f2 <ClearScreen>
						OutStr("LocalDTMF - NO");
    3b98:	8c eb       	ldi	r24, 0xBC	; 188
    3b9a:	94 e0       	ldi	r25, 0x04	; 4
    3b9c:	0e 94 24 29 	call	0x5248 <OutStr>
    3ba0:	c2 c0       	rjmp	.+388    	; 0x3d26 <DTMFCommandHandle+0x228>

					}else
					if (5 == b2)
    3ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba4:	85 30       	cpi	r24, 0x05	; 5
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <DTMFCommandHandle+0xac>
    3ba8:	7d c0       	rjmp	.+250    	; 0x3ca4 <DTMFCommandHandle+0x1a6>
					{	// изменить внутреннюю переменную
						if (dtmfCmdBufPos > 5)
    3baa:	88 85       	ldd	r24, Y+8	; 0x08
    3bac:	86 30       	cpi	r24, 0x06	; 6
    3bae:	08 f4       	brcc	.+2      	; 0x3bb2 <DTMFCommandHandle+0xb4>
    3bb0:	73 c0       	rjmp	.+230    	; 0x3c98 <DTMFCommandHandle+0x19a>
						{	// если есть и индекс переменной и новое значение

							param2 = 0;
    3bb2:	1c 86       	std	Y+12, r1	; 0x0c
    3bb4:	1b 86       	std	Y+11, r1	; 0x0b
							//  индекс переменной всегда двузначный
							b0 = g_dtmfCmdBuf[3] * 10 + g_dtmfCmdBuf[4];
    3bb6:	90 91 05 07 	lds	r25, 0x0705
    3bba:	8a e0       	ldi	r24, 0x0A	; 10
    3bbc:	98 9f       	mul	r25, r24
    3bbe:	c0 01       	movw	r24, r0
    3bc0:	11 24       	eor	r1, r1
    3bc2:	20 91 06 07 	lds	r18, 0x0706
    3bc6:	82 0f       	add	r24, r18
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
							param = 0;
    3bca:	1a 86       	std	Y+10, r1	; 0x0a
    3bcc:	19 86       	std	Y+9, r1	; 0x09

							for (k = 0; k < dtmfCmdBufPos - 5; k++)
    3bce:	19 82       	std	Y+1, r1	; 0x01
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	28 2f       	mov	r18, r24
    3bd4:	33 27       	eor	r19, r19
    3bd6:	88 85       	ldd	r24, Y+8	; 0x08
    3bd8:	99 27       	eor	r25, r25
    3bda:	05 97       	sbiw	r24, 0x05	; 5
    3bdc:	28 17       	cp	r18, r24
    3bde:	39 07       	cpc	r19, r25
    3be0:	0c f0       	brlt	.+2      	; 0x3be4 <DTMFCommandHandle+0xe6>
    3be2:	3e c0       	rjmp	.+124    	; 0x3c60 <DTMFCommandHandle+0x162>
							{
								param = 1;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	9a 87       	std	Y+10, r25	; 0x0a
    3bea:	89 87       	std	Y+9, r24	; 0x09
								for (b1 = 0; b1 < k; b1++)
    3bec:	1b 82       	std	Y+3, r1	; 0x03
    3bee:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	98 17       	cp	r25, r24
    3bf4:	98 f4       	brcc	.+38     	; 0x3c1c <DTMFCommandHandle+0x11e>
									param = param * 10;
    3bf6:	29 85       	ldd	r18, Y+9	; 0x09
    3bf8:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bfa:	c9 01       	movw	r24, r18
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	82 0f       	add	r24, r18
    3c0a:	93 1f       	adc	r25, r19
    3c0c:	82 0f       	add	r24, r18
    3c0e:	93 1f       	adc	r25, r19
    3c10:	9a 87       	std	Y+10, r25	; 0x0a
    3c12:	89 87       	std	Y+9, r24	; 0x09
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	8f 5f       	subi	r24, 0xFF	; 255
    3c18:	8b 83       	std	Y+3, r24	; 0x03
    3c1a:	e9 cf       	rjmp	.-46     	; 0x3bee <DTMFCommandHandle+0xf0>
								param2 = param2 + g_dtmfCmdBuf[dtmfCmdBufPos - 1 - k] *
    3c1c:	88 85       	ldd	r24, Y+8	; 0x08
    3c1e:	28 2f       	mov	r18, r24
    3c20:	33 27       	eor	r19, r19
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	99 27       	eor	r25, r25
    3c26:	28 1b       	sub	r18, r24
    3c28:	39 0b       	sbc	r19, r25
    3c2a:	c9 01       	movw	r24, r18
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	ef 5f       	subi	r30, 0xFF	; 255
    3c30:	f8 4f       	sbci	r31, 0xF8	; 248
    3c32:	80 81       	ld	r24, Z
    3c34:	28 2f       	mov	r18, r24
    3c36:	33 27       	eor	r19, r19
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	28 9f       	mul	r18, r24
    3c3e:	a0 01       	movw	r20, r0
    3c40:	29 9f       	mul	r18, r25
    3c42:	50 0d       	add	r21, r0
    3c44:	38 9f       	mul	r19, r24
    3c46:	50 0d       	add	r21, r0
    3c48:	11 24       	eor	r1, r1
    3c4a:	9a 01       	movw	r18, r20
    3c4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c50:	82 0f       	add	r24, r18
    3c52:	93 1f       	adc	r25, r19
    3c54:	9c 87       	std	Y+12, r25	; 0x0c
    3c56:	8b 87       	std	Y+11, r24	; 0x0b
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	8f 5f       	subi	r24, 0xFF	; 255
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	b8 cf       	rjmp	.-144    	; 0x3bd0 <DTMFCommandHandle+0xd2>
									param;
							}

							if (b0 < PARAMS_COUNT)
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	89 30       	cpi	r24, 0x09	; 9
    3c64:	98 f4       	brcc	.+38     	; 0x3c8c <DTMFCommandHandle+0x18e>
							{
								PlayVoice(VOICE_PARAM_ACCEPT, 0);
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	80 ea       	ldi	r24, 0xA0	; 160
    3c6a:	9f e0       	ldi	r25, 0x0F	; 15
    3c6c:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
								g_params[b0] = param2;
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	28 2f       	mov	r18, r24
    3c74:	33 27       	eor	r19, r19
    3c76:	c9 01       	movw	r24, r18
    3c78:	82 0f       	add	r24, r18
    3c7a:	93 1f       	adc	r25, r19
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	e8 5f       	subi	r30, 0xF8	; 248
    3c80:	fb 4f       	sbci	r31, 0xFB	; 251
    3c82:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c84:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
    3c8a:	4d c0       	rjmp	.+154    	; 0x3d26 <DTMFCommandHandle+0x228>
							}else
								PlayVoice(VOICE_PARAM_WRONG, 0);
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	80 ea       	ldi	r24, 0xA0	; 160
    3c90:	9f e0       	ldi	r25, 0x0F	; 15
    3c92:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3c96:	47 c0       	rjmp	.+142    	; 0x3d26 <DTMFCommandHandle+0x228>
						}
						else
							PlayVoice(VOICE_ARTEM_WRONGCMD, 0);
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	84 ea       	ldi	r24, 0xA4	; 164
    3c9c:	96 e0       	ldi	r25, 0x06	; 6
    3c9e:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3ca2:	41 c0       	rjmp	.+130    	; 0x3d26 <DTMFCommandHandle+0x228>
					}else
						PlayVoice(VOICE_ARTEM_WRONGCMD, 0);
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	84 ea       	ldi	r24, 0xA4	; 164
    3ca8:	96 e0       	ldi	r25, 0x06	; 6
    3caa:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3cae:	3b c0       	rjmp	.+118    	; 0x3d26 <DTMFCommandHandle+0x228>
				}

			}else
			if (1 == b1)
    3cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb2:	81 30       	cpi	r24, 0x01	; 1
    3cb4:	39 f4       	brne	.+14     	; 0x3cc4 <DTMFCommandHandle+0x1c6>
			{
				//  повторить последнее сообщение о сработавших датчиках
				g_DefferedSensorsState_ = g_DefferedSensorsState;
    3cb6:	80 91 c3 06 	lds	r24, 0x06C3
    3cba:	80 93 82 06 	sts	0x0682, r24
				SendAllVoice();
    3cbe:	0e 94 3a 23 	call	0x4674 <SendAllVoice>
    3cc2:	31 c0       	rjmp	.+98     	; 0x3d26 <DTMFCommandHandle+0x228>
			}else
			if (2 == b1)
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	82 30       	cpi	r24, 0x02	; 2
    3cc8:	81 f4       	brne	.+32     	; 0x3cea <DTMFCommandHandle+0x1ec>
			{
				g_DefferedSensorsState &= ~g_DefferedSensorsState_;
    3cca:	80 91 82 06 	lds	r24, 0x0682
    3cce:	98 2f       	mov	r25, r24
    3cd0:	90 95       	com	r25
    3cd2:	80 91 c3 06 	lds	r24, 0x06C3
    3cd6:	89 23       	and	r24, r25
    3cd8:	80 93 c3 06 	sts	0x06C3, r24
				linemode = LM_BUSY;
    3cdc:	82 e0       	ldi	r24, 0x02	; 2
    3cde:	80 93 f4 06 	sts	0x06F4, r24
				confirmUp = 1;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	80 93 42 06 	sts	0x0642, r24
    3ce8:	1e c0       	rjmp	.+60     	; 0x3d26 <DTMFCommandHandle+0x228>
			}else
			if (3 == b1)
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	83 30       	cpi	r24, 0x03	; 3
    3cee:	21 f4       	brne	.+8      	; 0x3cf8 <DTMFCommandHandle+0x1fa>
			{	// 	смена пароля
				dtmfMode = DTMF_MODE_PSWD_CHANGE;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	8e 83       	std	Y+6, r24	; 0x06
				dtmfTmp = 0;		//  ожидается ввод старого пароля
    3cf4:	1f 82       	std	Y+7, r1	; 0x07
    3cf6:	17 c0       	rjmp	.+46     	; 0x3d26 <DTMFCommandHandle+0x228>

				//  SendVoice введите 	прежний пароль
			}else
			if (4 == b1)
    3cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfa:	84 30       	cpi	r24, 0x04	; 4
    3cfc:	61 f4       	brne	.+24     	; 0x3d16 <DTMFCommandHandle+0x218>
			{	// 	системное время
				if (1 == b2)
    3cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    3d00:	81 30       	cpi	r24, 0x01	; 1
    3d02:	19 f4       	brne	.+6      	; 0x3d0a <DTMFCommandHandle+0x20c>
					dtmfMode = DTMF_MODE_SET_TIME;
    3d04:	83 e0       	ldi	r24, 0x03	; 3
    3d06:	8e 83       	std	Y+6, r24	; 0x06
    3d08:	0e c0       	rjmp	.+28     	; 0x3d26 <DTMFCommandHandle+0x228>
				else
					PlayVoice(VOICE_ARTEM_WRONGCMD, 0);//  сообщить время
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	84 ea       	ldi	r24, 0xA4	; 164
    3d0e:	96 e0       	ldi	r25, 0x06	; 6
    3d10:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3d14:	08 c0       	rjmp	.+16     	; 0x3d26 <DTMFCommandHandle+0x228>
			}else
			if (5 == b1)
    3d16:	8b 81       	ldd	r24, Y+3	; 0x03
    3d18:	85 30       	cpi	r24, 0x05	; 5
    3d1a:	29 f4       	brne	.+10     	; 0x3d26 <DTMFCommandHandle+0x228>
			{	//  сброс secondCounter - исп. при автоподнятии в режиме телефона
				//confirmUp = 1;		//  чтобы стало нулем и повесило трубку (оно!)
				PlayVoice(VOICE_ARTEM_WRONGCMD, 0);
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	84 ea       	ldi	r24, 0xA4	; 164
    3d20:	96 e0       	ldi	r25, 0x06	; 6
    3d22:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
			}
			if (6 == b1)
    3d26:	8b 81       	ldd	r24, Y+3	; 0x03
    3d28:	86 30       	cpi	r24, 0x06	; 6
    3d2a:	09 f4       	brne	.+2      	; 0x3d2e <DTMFCommandHandle+0x230>
    3d2c:	77 c1       	rjmp	.+750    	; 0x401c <DTMFCommandHandle+0x51e>
			{
			}else
			if (7 == b1)		//  TODO возможность класть трубку без пароля!!!!!!!!
    3d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d30:	87 30       	cpi	r24, 0x07	; 7
    3d32:	31 f4       	brne	.+12     	; 0x3d40 <DTMFCommandHandle+0x242>
			{	//	завершение сеанса  - положить трубку
				//linemode = LM_BUSY;

				PlayVoice(VOICE_ARTEM_WRONGCMD, 0);
    3d34:	60 e0       	ldi	r22, 0x00	; 0
    3d36:	84 ea       	ldi	r24, 0xA4	; 164
    3d38:	96 e0       	ldi	r25, 0x06	; 6
    3d3a:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3d3e:	6e c1       	rjmp	.+732    	; 0x401c <DTMFCommandHandle+0x51e>
				//if (secondCounter)		//  когда система автоматически взяла трубку
				//	secondCounter = 1;
			}else
			if (8 == b1)
    3d40:	8b 81       	ldd	r24, Y+3	; 0x03
    3d42:	88 30       	cpi	r24, 0x08	; 8
    3d44:	29 f5       	brne	.+74     	; 0x3d90 <DTMFCommandHandle+0x292>
			{	//	выдать голосовое сообщения для проверки звучания
				g_dtmfCmdBuf[dtmfCmdBufPos] = 0;
    3d46:	88 85       	ldd	r24, Y+8	; 0x08
    3d48:	99 27       	eor	r25, r25
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	ee 5f       	subi	r30, 0xFE	; 254
    3d4e:	f8 4f       	sbci	r31, 0xF8	; 248
    3d50:	10 82       	st	Z, r1
				for (k = 2; k < dtmfCmdBufPos; k++)
    3d52:	82 e0       	ldi	r24, 0x02	; 2
    3d54:	89 83       	std	Y+1, r24	; 0x01
    3d56:	99 81       	ldd	r25, Y+1	; 0x01
    3d58:	88 85       	ldd	r24, Y+8	; 0x08
    3d5a:	98 17       	cp	r25, r24
    3d5c:	88 f4       	brcc	.+34     	; 0x3d80 <DTMFCommandHandle+0x282>
					g_dtmfCmdBuf[k] = g_dtmfCmdBuf[k] + 0x30;
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	99 27       	eor	r25, r25
    3d62:	dc 01       	movw	r26, r24
    3d64:	ae 5f       	subi	r26, 0xFE	; 254
    3d66:	b8 4f       	sbci	r27, 0xF8	; 248
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	99 27       	eor	r25, r25
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	ee 5f       	subi	r30, 0xFE	; 254
    3d70:	f8 4f       	sbci	r31, 0xF8	; 248
    3d72:	80 81       	ld	r24, Z
    3d74:	80 5d       	subi	r24, 0xD0	; 208
    3d76:	8c 93       	st	X, r24
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	8f 5f       	subi	r24, 0xFF	; 255
    3d7c:	89 83       	std	Y+1, r24	; 0x01
    3d7e:	eb cf       	rjmp	.-42     	; 0x3d56 <DTMFCommandHandle+0x258>

				PlayVoice(atoi(g_dtmfCmdBuf + 2), 0);
    3d80:	84 e0       	ldi	r24, 0x04	; 4
    3d82:	97 e0       	ldi	r25, 0x07	; 7
    3d84:	0e 94 9e 4e 	call	0x9d3c <atoi>
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3d8e:	46 c1       	rjmp	.+652    	; 0x401c <DTMFCommandHandle+0x51e>
				/*
				if (dtmfCmdBufPos > 3)
					dtmfTmp = b2*10 + b3;
				else
					dtmfTmp = b2;

				SendVoice(dtmfTmp, 0);
				*/
			}else
			if (9 == b1)
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	89 30       	cpi	r24, 0x09	; 9
    3d94:	09 f0       	breq	.+2      	; 0x3d98 <DTMFCommandHandle+0x29a>
    3d96:	42 c1       	rjmp	.+644    	; 0x401c <DTMFCommandHandle+0x51e>
			{	//  изменить номер автодозвона
				if (!b2)
    3d98:	8c 81       	ldd	r24, Y+4	; 0x04
    3d9a:	88 23       	and	r24, r24
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <DTMFCommandHandle+0x2a2>
    3d9e:	3e c1       	rjmp	.+636    	; 0x401c <DTMFCommandHandle+0x51e>
				{	//  продиктовать номер автодозвона
				}else
				if (1 == b2)
    3da0:	8c 81       	ldd	r24, Y+4	; 0x04
    3da2:	81 30       	cpi	r24, 0x01	; 1
    3da4:	29 f4       	brne	.+10     	; 0x3db0 <DTMFCommandHandle+0x2b2>
				{
					dtmfMode = DTMF_MODE_AUTO_DIAL_NUMBER_CHANGE;
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	8e 83       	std	Y+6, r24	; 0x06
					dtmfTmp = b3;	//  номер по этому номеру будет изменен...
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	8f 83       	std	Y+7, r24	; 0x07
    3dae:	36 c1       	rjmp	.+620    	; 0x401c <DTMFCommandHandle+0x51e>
				}else
					PlayVoice(VOICE_ARTEM_WRONGCMD, 0);
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	84 ea       	ldi	r24, 0xA4	; 164
    3db4:	96 e0       	ldi	r25, 0x06	; 6
    3db6:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3dba:	30 c1       	rjmp	.+608    	; 0x401c <DTMFCommandHandle+0x51e>
			}
		}else
			PlayVoice(VOICE_ARTEM_WRONGCMD, 0);
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	84 ea       	ldi	r24, 0xA4	; 164
    3dc0:	96 e0       	ldi	r25, 0x06	; 6
    3dc2:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3dc6:	2a c1       	rjmp	.+596    	; 0x401c <DTMFCommandHandle+0x51e>
	}else
	if (DTMF_MODE_PSWD_CHANGE == dtmfMode)
    3dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    3dca:	81 30       	cpi	r24, 0x01	; 1
    3dcc:	09 f0       	breq	.+2      	; 0x3dd0 <DTMFCommandHandle+0x2d2>
    3dce:	74 c0       	rjmp	.+232    	; 0x3eb8 <DTMFCommandHandle+0x3ba>
	{	//  срабатывает три раза, после чего переход в DTMF_MODE_NORMAL
		if (!dtmfTmp)
    3dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    3dd2:	88 23       	and	r24, r24
    3dd4:	c1 f4       	brne	.+48     	; 0x3e06 <DTMFCommandHandle+0x308>
		{	//  ожидается ввод старого пароля
			if (strncmp(g_dtmfCmdBuf, g_szSetupPassword, strlen(g_szSetupPassword)))
    3dd6:	85 ec       	ldi	r24, 0xC5	; 197
    3dd8:	96 e0       	ldi	r25, 0x06	; 6
    3dda:	0e 94 37 4f 	call	0x9e6e <strlen>
    3dde:	ac 01       	movw	r20, r24
    3de0:	65 ec       	ldi	r22, 0xC5	; 197
    3de2:	76 e0       	ldi	r23, 0x06	; 6
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	97 e0       	ldi	r25, 0x07	; 7
    3de8:	0e 94 40 4f 	call	0x9e80 <strncmp>
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	41 f0       	breq	.+16     	; 0x3e00 <DTMFCommandHandle+0x302>
			{	//  старый пароль неверен
				dtmfTmp = 0;
    3df0:	1f 82       	std	Y+7, r1	; 0x07
				dtmfMode = DTMF_MODE_NORMAL;
    3df2:	1e 82       	std	Y+6, r1	; 0x06
				PlayVoice(VOICE_ARTEM_WRONGPWD, 0);
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	87 eb       	ldi	r24, 0xB7	; 183
    3df8:	96 e0       	ldi	r25, 0x06	; 6
    3dfa:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3dfe:	0e c1       	rjmp	.+540    	; 0x401c <DTMFCommandHandle+0x51e>
			}
			else
			{
				dtmfTmp = 1;
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	8f 83       	std	Y+7, r24	; 0x07
    3e04:	0b c1       	rjmp	.+534    	; 0x401c <DTMFCommandHandle+0x51e>
				//  SendVoice введите новый пароль
			}
		}else
		if (1 == dtmfTmp)
    3e06:	8f 81       	ldd	r24, Y+7	; 0x07
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	a9 f4       	brne	.+42     	; 0x3e36 <DTMFCommandHandle+0x338>
		{	//  ожидается ввод нового пароля первый раз
			memcpy(g_szInput, g_dtmfCmdBuf, dtmfCmdBufPos);
    3e0c:	88 85       	ldd	r24, Y+8	; 0x08
    3e0e:	99 27       	eor	r25, r25
    3e10:	ac 01       	movw	r20, r24
    3e12:	62 e0       	ldi	r22, 0x02	; 2
    3e14:	77 e0       	ldi	r23, 0x07	; 7
    3e16:	82 e2       	ldi	r24, 0x22	; 34
    3e18:	96 e0       	ldi	r25, 0x06	; 6
    3e1a:	0e 94 04 4f 	call	0x9e08 <memcpy>
			tmp = dtmfCmdBufPos;				//  длина нового пароля
    3e1e:	88 85       	ldd	r24, Y+8	; 0x08
    3e20:	80 93 7e 06 	sts	0x067E, r24
			g_szInput[dtmfCmdBufPos] = 0;
    3e24:	88 85       	ldd	r24, Y+8	; 0x08
    3e26:	99 27       	eor	r25, r25
    3e28:	fc 01       	movw	r30, r24
    3e2a:	ee 5d       	subi	r30, 0xDE	; 222
    3e2c:	f9 4f       	sbci	r31, 0xF9	; 249
    3e2e:	10 82       	st	Z, r1
			dtmfTmp = 2;						//  последняя стадия смены пароля
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	8f 83       	std	Y+7, r24	; 0x07
    3e34:	f3 c0       	rjmp	.+486    	; 0x401c <DTMFCommandHandle+0x51e>
			//  SendVoice подтвердите новый пароль
		}else
		if (2 == dtmfTmp)
    3e36:	8f 81       	ldd	r24, Y+7	; 0x07
    3e38:	82 30       	cpi	r24, 0x02	; 2
    3e3a:	09 f0       	breq	.+2      	; 0x3e3e <DTMFCommandHandle+0x340>
    3e3c:	ef c0       	rjmp	.+478    	; 0x401c <DTMFCommandHandle+0x51e>
		{	//  ожидается ввод нового пароля второй раз

			if (!(strncmp(g_dtmfCmdBuf, g_szInput, dtmfCmdBufPos)) &&
    3e3e:	88 85       	ldd	r24, Y+8	; 0x08
    3e40:	99 27       	eor	r25, r25
    3e42:	ac 01       	movw	r20, r24
    3e44:	62 e2       	ldi	r22, 0x22	; 34
    3e46:	76 e0       	ldi	r23, 0x06	; 6
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	97 e0       	ldi	r25, 0x07	; 7
    3e4c:	0e 94 40 4f 	call	0x9e80 <strncmp>
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	51 f5       	brne	.+84     	; 0x3ea8 <DTMFCommandHandle+0x3aa>
    3e54:	90 91 7e 06 	lds	r25, 0x067E
    3e58:	88 85       	ldd	r24, Y+8	; 0x08
    3e5a:	98 17       	cp	r25, r24
    3e5c:	29 f5       	brne	.+74     	; 0x3ea8 <DTMFCommandHandle+0x3aa>
				(tmp == dtmfCmdBufPos))
			{
				//  SendVoice пароль изменен успешно
				dtmfTmp = 77;
    3e5e:	8d e4       	ldi	r24, 0x4D	; 77
    3e60:	8f 83       	std	Y+7, r24	; 0x07
				g_dtmfCmdBuf[dtmfCmdBufPos] = 0;
    3e62:	88 85       	ldd	r24, Y+8	; 0x08
    3e64:	99 27       	eor	r25, r25
    3e66:	fc 01       	movw	r30, r24
    3e68:	ee 5f       	subi	r30, 0xFE	; 254
    3e6a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e6c:	10 82       	st	Z, r1
				g_szSetupPassword[dtmfCmdBufPos] = 0;
    3e6e:	88 85       	ldd	r24, Y+8	; 0x08
    3e70:	99 27       	eor	r25, r25
    3e72:	fc 01       	movw	r30, r24
    3e74:	eb 53       	subi	r30, 0x3B	; 59
    3e76:	f9 4f       	sbci	r31, 0xF9	; 249
    3e78:	10 82       	st	Z, r1
				epmwbl(&g_dtmfCmdBuf, (unsigned char*)EADR_DTMF_PSWD,
    3e7a:	4a e0       	ldi	r20, 0x0A	; 10
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	62 ec       	ldi	r22, 0xC2	; 194
    3e80:	70 e0       	ldi	r23, 0x00	; 0
    3e82:	82 e0       	ldi	r24, 0x02	; 2
    3e84:	97 e0       	ldi	r25, 0x07	; 7
    3e86:	0e 94 45 39 	call	0x728a <epmwbl>
					sizeof(g_dtmfCmdBuf));
				strncpy(g_szSetupPassword, g_dtmfCmdBuf, dtmfCmdBufPos);
    3e8a:	88 85       	ldd	r24, Y+8	; 0x08
    3e8c:	99 27       	eor	r25, r25
    3e8e:	ac 01       	movw	r20, r24
    3e90:	62 e0       	ldi	r22, 0x02	; 2
    3e92:	77 e0       	ldi	r23, 0x07	; 7
    3e94:	85 ec       	ldi	r24, 0xC5	; 197
    3e96:	96 e0       	ldi	r25, 0x06	; 6
    3e98:	0e 94 4e 4f 	call	0x9e9c <strncpy>
				PlayVoice(VOICE_ARTEM_POZDRAVLYAEM, 0);
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	84 ed       	ldi	r24, 0xD4	; 212
    3ea0:	96 e0       	ldi	r25, 0x06	; 6
    3ea2:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
    3ea6:	06 c0       	rjmp	.+12     	; 0x3eb4 <DTMFCommandHandle+0x3b6>
			}
			else
			{	//  новый пароль подтвержден неправильно
				dtmfTmp = 0;
    3ea8:	1f 82       	std	Y+7, r1	; 0x07
				PlayVoice(VOICE_ARTEM_WRONGPWD, 0);
    3eaa:	60 e0       	ldi	r22, 0x00	; 0
    3eac:	87 eb       	ldi	r24, 0xB7	; 183
    3eae:	96 e0       	ldi	r25, 0x06	; 6
    3eb0:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
			}

			dtmfMode = DTMF_MODE_NORMAL;
    3eb4:	1e 82       	std	Y+6, r1	; 0x06
    3eb6:	b2 c0       	rjmp	.+356    	; 0x401c <DTMFCommandHandle+0x51e>
		}

	}else
	if (DTMF_MODE_AUTO_DIAL_NUMBER_CHANGE == dtmfMode)
    3eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eba:	82 30       	cpi	r24, 0x02	; 2
    3ebc:	b1 f5       	brne	.+108    	; 0x3f2a <DTMFCommandHandle+0x42c>
	{	//  изменение номера автодозвона

		for (k = 0; k < dtmfCmdBufPos; k++)
    3ebe:	19 82       	std	Y+1, r1	; 0x01
    3ec0:	99 81       	ldd	r25, Y+1	; 0x01
    3ec2:	88 85       	ldd	r24, Y+8	; 0x08
    3ec4:	98 17       	cp	r25, r24
    3ec6:	e8 f4       	brcc	.+58     	; 0x3f02 <DTMFCommandHandle+0x404>
			g_szAutoDialNumbers[dtmfTmp][k] = g_dtmfCmdBuf[k] + 0x30;
    3ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    3eca:	28 2f       	mov	r18, r24
    3ecc:	33 27       	eor	r19, r19
    3ece:	c9 01       	movw	r24, r18
    3ed0:	82 0f       	add	r24, r18
    3ed2:	93 1f       	adc	r25, r19
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	e3 54       	subi	r30, 0x43	; 67
    3ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	28 2f       	mov	r18, r24
    3ede:	33 27       	eor	r19, r19
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	d9 01       	movw	r26, r18
    3ee6:	a8 0f       	add	r26, r24
    3ee8:	b9 1f       	adc	r27, r25
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	99 27       	eor	r25, r25
    3eee:	fc 01       	movw	r30, r24
    3ef0:	ee 5f       	subi	r30, 0xFE	; 254
    3ef2:	f8 4f       	sbci	r31, 0xF8	; 248
    3ef4:	80 81       	ld	r24, Z
    3ef6:	80 5d       	subi	r24, 0xD0	; 208
    3ef8:	8c 93       	st	X, r24
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	8f 5f       	subi	r24, 0xFF	; 255
    3efe:	89 83       	std	Y+1, r24	; 0x01
    3f00:	df cf       	rjmp	.-66     	; 0x3ec0 <DTMFCommandHandle+0x3c2>

		g_szAutoDialNumbers[dtmfTmp][dtmfCmdBufPos] = 0;
    3f02:	8f 81       	ldd	r24, Y+7	; 0x07
    3f04:	28 2f       	mov	r18, r24
    3f06:	33 27       	eor	r19, r19
    3f08:	c9 01       	movw	r24, r18
    3f0a:	82 0f       	add	r24, r18
    3f0c:	93 1f       	adc	r25, r19
    3f0e:	fc 01       	movw	r30, r24
    3f10:	e3 54       	subi	r30, 0x43	; 67
    3f12:	fc 4f       	sbci	r31, 0xFC	; 252
    3f14:	88 85       	ldd	r24, Y+8	; 0x08
    3f16:	28 2f       	mov	r18, r24
    3f18:	33 27       	eor	r19, r19
    3f1a:	80 81       	ld	r24, Z
    3f1c:	91 81       	ldd	r25, Z+1	; 0x01
    3f1e:	f9 01       	movw	r30, r18
    3f20:	e8 0f       	add	r30, r24
    3f22:	f9 1f       	adc	r31, r25
    3f24:	10 82       	st	Z, r1

		dtmfMode = DTMF_MODE_NORMAL;
    3f26:	1e 82       	std	Y+6, r1	; 0x06
    3f28:	79 c0       	rjmp	.+242    	; 0x401c <DTMFCommandHandle+0x51e>

	}else

	if (DTMF_MODE_SET_TIME == dtmfMode)
    3f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f2c:	83 30       	cpi	r24, 0x03	; 3
    3f2e:	09 f0       	breq	.+2      	; 0x3f32 <DTMFCommandHandle+0x434>
    3f30:	75 c0       	rjmp	.+234    	; 0x401c <DTMFCommandHandle+0x51e>
	{	//  меняет время
		dtmfMode = DTMF_MODE_NORMAL;
    3f32:	1e 82       	std	Y+6, r1	; 0x06

		if (dtmfCmdBufPos > 1)
    3f34:	88 85       	ldd	r24, Y+8	; 0x08
    3f36:	82 30       	cpi	r24, 0x02	; 2
    3f38:	08 f4       	brcc	.+2      	; 0x3f3c <DTMFCommandHandle+0x43e>
    3f3a:	70 c0       	rjmp	.+224    	; 0x401c <DTMFCommandHandle+0x51e>
		{	//  если в буфере есть хотя-бы новые минуты

			RTC_TIME rtc;
			ReadTime(&rtc);
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	0d 96       	adiw	r24, 0x0d	; 13
    3f40:	0e 94 ec 2b 	call	0x57d8 <ReadTime>

			rtc.sec = 0;
    3f44:	1d 86       	std	Y+13, r1	; 0x0d
			rtc.min = (b0 << 4) + b1;
    3f46:	8a 81       	ldd	r24, Y+2	; 0x02
    3f48:	99 27       	eor	r25, r25
    3f4a:	82 95       	swap	r24
    3f4c:	92 95       	swap	r25
    3f4e:	90 7f       	andi	r25, 0xF0	; 240
    3f50:	98 27       	eor	r25, r24
    3f52:	80 7f       	andi	r24, 0xF0	; 240
    3f54:	98 27       	eor	r25, r24
    3f56:	2b 81       	ldd	r18, Y+3	; 0x03
    3f58:	82 0f       	add	r24, r18
    3f5a:	8e 87       	std	Y+14, r24	; 0x0e

			if (dtmfCmdBufPos > 3)
    3f5c:	88 85       	ldd	r24, Y+8	; 0x08
    3f5e:	84 30       	cpi	r24, 0x04	; 4
    3f60:	d8 f1       	brcs	.+118    	; 0x3fd8 <DTMFCommandHandle+0x4da>
			{	//  если в буфере есть новые минуты И часы
				rtc.hour = (b2 << 4) + b3;
    3f62:	8c 81       	ldd	r24, Y+4	; 0x04
    3f64:	99 27       	eor	r25, r25
    3f66:	82 95       	swap	r24
    3f68:	92 95       	swap	r25
    3f6a:	90 7f       	andi	r25, 0xF0	; 240
    3f6c:	98 27       	eor	r25, r24
    3f6e:	80 7f       	andi	r24, 0xF0	; 240
    3f70:	98 27       	eor	r25, r24
    3f72:	2d 81       	ldd	r18, Y+5	; 0x05
    3f74:	82 0f       	add	r24, r18
    3f76:	8f 87       	std	Y+15, r24	; 0x0f

				if (dtmfCmdBufPos > 5)
    3f78:	88 85       	ldd	r24, Y+8	; 0x08
    3f7a:	86 30       	cpi	r24, 0x06	; 6
    3f7c:	68 f1       	brcs	.+90     	; 0x3fd8 <DTMFCommandHandle+0x4da>
				{	//  если в буфере есть новые минуты, часы и день
					rtc.day = (g_dtmfCmdBuf[4] << 4) + g_dtmfCmdBuf[5];
    3f7e:	80 91 06 07 	lds	r24, 0x0706
    3f82:	99 27       	eor	r25, r25
    3f84:	82 95       	swap	r24
    3f86:	92 95       	swap	r25
    3f88:	90 7f       	andi	r25, 0xF0	; 240
    3f8a:	98 27       	eor	r25, r24
    3f8c:	80 7f       	andi	r24, 0xF0	; 240
    3f8e:	98 27       	eor	r25, r24
    3f90:	20 91 07 07 	lds	r18, 0x0707
    3f94:	82 0f       	add	r24, r18
    3f96:	89 8b       	std	Y+17, r24	; 0x11

					if (dtmfCmdBufPos > 7)
    3f98:	88 85       	ldd	r24, Y+8	; 0x08
    3f9a:	88 30       	cpi	r24, 0x08	; 8
    3f9c:	e8 f0       	brcs	.+58     	; 0x3fd8 <DTMFCommandHandle+0x4da>
					{	//  если в буфере есть новые минуты, часы, день и месяц
						rtc.month = (g_dtmfCmdBuf[6] << 4) + g_dtmfCmdBuf[7];
    3f9e:	80 91 08 07 	lds	r24, 0x0708
    3fa2:	99 27       	eor	r25, r25
    3fa4:	82 95       	swap	r24
    3fa6:	92 95       	swap	r25
    3fa8:	90 7f       	andi	r25, 0xF0	; 240
    3faa:	98 27       	eor	r25, r24
    3fac:	80 7f       	andi	r24, 0xF0	; 240
    3fae:	98 27       	eor	r25, r24
    3fb0:	20 91 09 07 	lds	r18, 0x0709
    3fb4:	82 0f       	add	r24, r18
    3fb6:	8a 8b       	std	Y+18, r24	; 0x12

						if (dtmfCmdBufPos > 9)
    3fb8:	88 85       	ldd	r24, Y+8	; 0x08
    3fba:	8a 30       	cpi	r24, 0x0A	; 10
    3fbc:	68 f0       	brcs	.+26     	; 0x3fd8 <DTMFCommandHandle+0x4da>
							//  если в буфере есть вся дата
							rtc.year = (g_dtmfCmdBuf[8] << 4) +  g_dtmfCmdBuf[9];
    3fbe:	80 91 0a 07 	lds	r24, 0x070A
    3fc2:	99 27       	eor	r25, r25
    3fc4:	82 95       	swap	r24
    3fc6:	92 95       	swap	r25
    3fc8:	90 7f       	andi	r25, 0xF0	; 240
    3fca:	98 27       	eor	r25, r24
    3fcc:	80 7f       	andi	r24, 0xF0	; 240
    3fce:	98 27       	eor	r25, r24
    3fd0:	20 91 0b 07 	lds	r18, 0x070B
    3fd4:	82 0f       	add	r24, r18
    3fd6:	8b 8b       	std	Y+19, r24	; 0x13
					}
				}
			}

			if ((rtc.hour > 0x23) || (rtc.min > 0x59) || (rtc.sec > 0x59) ||
    3fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fda:	84 32       	cpi	r24, 0x24	; 36
    3fdc:	80 f4       	brcc	.+32     	; 0x3ffe <DTMFCommandHandle+0x500>
    3fde:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fe0:	8a 35       	cpi	r24, 0x5A	; 90
    3fe2:	68 f4       	brcc	.+26     	; 0x3ffe <DTMFCommandHandle+0x500>
    3fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe6:	8a 35       	cpi	r24, 0x5A	; 90
    3fe8:	50 f4       	brcc	.+20     	; 0x3ffe <DTMFCommandHandle+0x500>
    3fea:	89 89       	ldd	r24, Y+17	; 0x11
    3fec:	82 33       	cpi	r24, 0x32	; 50
    3fee:	38 f4       	brcc	.+14     	; 0x3ffe <DTMFCommandHandle+0x500>
    3ff0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ff2:	83 31       	cpi	r24, 0x13	; 19
    3ff4:	20 f4       	brcc	.+8      	; 0x3ffe <DTMFCommandHandle+0x500>
    3ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff8:	86 30       	cpi	r24, 0x06	; 6
    3ffa:	08 f0       	brcs	.+2      	; 0x3ffe <DTMFCommandHandle+0x500>
    3ffc:	06 c0       	rjmp	.+12     	; 0x400a <DTMFCommandHandle+0x50c>
				(rtc.day > 0x31) || (rtc.month > 0x12) || (rtc.year < 0x06))
			{
				PlayVoice(VOICE_PARAM_WRONG, 0);
    3ffe:	60 e0       	ldi	r22, 0x00	; 0
    4000:	80 ea       	ldi	r24, 0xA0	; 160
    4002:	9f e0       	ldi	r25, 0x0F	; 15
    4004:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
				return;
    4008:	0f c0       	rjmp	.+30     	; 0x4028 <DTMFCommandHandle+0x52a>
			}

			WriteTime(&rtc);
    400a:	ce 01       	movw	r24, r28
    400c:	0d 96       	adiw	r24, 0x0d	; 13
    400e:	0e 94 2b 2d 	call	0x5a56 <WriteTime>
			PlayVoice(VOICE_PARAM_ACCEPT, 0);
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	80 ea       	ldi	r24, 0xA0	; 160
    4016:	9f e0       	ldi	r25, 0x0F	; 15
    4018:	0e 94 3a 27 	call	0x4e74 <PlayVoice>
		}
	}

	g_dtmfMode = dtmfMode;
    401c:	8e 81       	ldd	r24, Y+6	; 0x06
    401e:	80 93 16 07 	sts	0x0716, r24
	g_dtmfTmp = dtmfTmp;
    4022:	8f 81       	ldd	r24, Y+7	; 0x07
    4024:	80 93 e6 06 	sts	0x06E6, r24
    4028:	63 96       	adiw	r28, 0x13	; 19
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	08 95       	ret

0000403a <setstart>:
}

void setstart(unsigned short st)
{
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	22 97       	sbiw	r28, 0x02	; 2
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	9a 83       	std	Y+2, r25	; 0x02
    4050:	89 83       	std	Y+1, r24	; 0x01
	zvukpage = st;
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	9a 81       	ldd	r25, Y+2	; 0x02
    4056:	90 93 74 07 	sts	0x0774, r25
    405a:	80 93 73 07 	sts	0x0773, r24
    405e:	22 96       	adiw	r28, 0x02	; 2
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	08 95       	ret

00004070 <StartLineAnalize>:
}

//  запустить анализ сигнала в линии
void StartLineAnalize(unsigned char LineModeAnalizeResultToSPI)
{
    4070:	cf 93       	push	r28
    4072:	df 93       	push	r29
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	21 97       	sbiw	r28, 0x01	; 1
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61
    4084:	89 83       	std	Y+1, r24	; 0x01
	analizeTELIN = 1;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	80 93 d8 06 	sts	0x06D8, r24
	linemode = 0;
    408c:	10 92 f4 06 	sts	0x06F4, r1

	g_LineModeAnalizeResultToSPI = LineModeAnalizeResultToSPI;
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	80 93 83 06 	sts	0x0683, r24

	if (g_LineModeAnalizeResultToSPI)
    4096:	80 91 83 06 	lds	r24, 0x0683
    409a:	88 23       	and	r24, r24
    409c:	51 f0       	breq	.+20     	; 0x40b2 <StartLineAnalize+0x42>
	{
		AT45SetWriteBufferPos(0, 0);
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
		AT45SetWriteBufferPos(1, 0);
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
	}

	voicePresent = 0;
    40b2:	10 92 7d 06 	sts	0x067D, r1
	//g_wasOne = 0;			//  был ли гудок(единица) в текущем сеансе определения
/*	g_IntervalCount = 0;
	adcCur = 0;
	g_sampleCount = 0;
	g_oldSampleDiff = 0;
	g_prevIntervalType = 0;
	g_sameIntervalCounter = 0;
	__WaitForModePresent__ = 0;
	__haha__ = 0;
	lastLinemode = 0;
*/
	OCR1B = 0;
    40b6:	10 92 49 00 	sts	0x0049, r1
    40ba:	10 92 48 00 	sts	0x0048, r1
	TCCR1B = _BV(CS11) | _BV(CS11);
    40be:	82 e0       	ldi	r24, 0x02	; 2
    40c0:	80 93 4e 00 	sts	0x004E, r24
    40c4:	21 96       	adiw	r28, 0x01	; 1
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	08 95       	ret

000040d6 <RingOff>:
}

//  отбой - повесить трубку
void RingOff(void)
{
    40d6:	cf 93       	push	r28
    40d8:	df 93       	push	r29
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
	g_wasEnteringCall = 0;
    40de:	10 92 ff 06 	sts	0x06FF, r1

	LineDown();
    40e2:	0e 94 57 27 	call	0x4eae <LineDown>
//	HFOFF;
	//SetSpeakerVolume(0);

	//  если был в прогрессе процесс определения состояния сигнала в линии
	analizeTELIN = 0;
    40e6:	10 92 d8 06 	sts	0x06D8, r1
	TCCR1B = 0;
    40ea:	10 92 4e 00 	sts	0x004E, r1
	ring = 0;
    40ee:	10 92 37 06 	sts	0x0637, r1
	linemode = LM_OS_OR_DOWN;
    40f2:	83 e0       	ldi	r24, 0x03	; 3
    40f4:	80 93 f4 06 	sts	0x06F4, r24
	confirmUp = 0;
    40f8:	10 92 42 06 	sts	0x0642, r1
	g_sendOhranaEventMsgInProgress = 0;
    40fc:	10 92 5a 07 	sts	0x075A, r1
	g_nextVoice = 0;
    4100:	10 92 13 07 	sts	0x0713, r1
	memset(&g_VoiceQueue, 0, sizeof(g_VoiceQueue));	// чистим очередь
    4104:	40 e4       	ldi	r20, 0x40	; 64
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	70 e0       	ldi	r23, 0x00	; 0
    410c:	87 e1       	ldi	r24, 0x17	; 23
    410e:	97 e0       	ldi	r25, 0x07	; 7
    4110:	0e 94 11 4f 	call	0x9e22 <memset>

	if (MD_OHRANA == modeBeforeZvonok)
    4114:	80 91 fd 06 	lds	r24, 0x06FD
    4118:	84 30       	cpi	r24, 0x04	; 4
    411a:	49 f4       	brne	.+18     	; 0x412e <RingOff+0x58>
	{
		PrepareToMode(MD_OHRANA);
    411c:	84 e0       	ldi	r24, 0x04	; 4
    411e:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
		HideCaret();
    4122:	0e 94 91 29 	call	0x5322 <HideCaret>
		g_ShowTime = TRUE;
    4126:	8f ef       	ldi	r24, 0xFF	; 255
    4128:	80 93 f7 06 	sts	0x06F7, r24
    412c:	10 c0       	rjmp	.+32     	; 0x414e <RingOff+0x78>

	}else
	if (MD_HELLO == modeBeforeZvonok)
    412e:	80 91 fd 06 	lds	r24, 0x06FD
    4132:	83 30       	cpi	r24, 0x03	; 3
    4134:	21 f4       	brne	.+8      	; 0x413e <RingOff+0x68>
		PrepareToMode(MD_HELLO);
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    413c:	08 c0       	rjmp	.+16     	; 0x414e <RingOff+0x78>
	else
	if (MD_SETUP_TEL_AUTO_DIAL_NUMBERS == modeBeforeZvonok)
    413e:	80 91 fd 06 	lds	r24, 0x06FD
    4142:	89 31       	cpi	r24, 0x19	; 25
    4144:	21 f4       	brne	.+8      	; 0x414e <RingOff+0x78>
		MenuAutoDialNumbers(g_SetupItem);
    4146:	80 91 c2 06 	lds	r24, 0x06C2
    414a:	0e 94 59 08 	call	0x10b2 <MenuAutoDialNumbers>
    414e:	df 91       	pop	r29
    4150:	cf 91       	pop	r28
    4152:	08 95       	ret

00004154 <ShowLineMode>:
/*
	delayms(300);
	EIFR = 0;
	delayms(300);

	EIMSK |= _BV(INT6);
*/
}

void ShowLineMode(void)
{
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
	ClearSecondLine();
    415c:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>

	if (linemode < LMMAXCOUNT + 1)
    4160:	80 91 f4 06 	lds	r24, 0x06F4
    4164:	87 30       	cpi	r24, 0x07	; 7
    4166:	78 f4       	brcc	.+30     	; 0x4186 <ShowLineMode+0x32>
		OutStr(g_linemodes[linemode]);
    4168:	80 91 f4 06 	lds	r24, 0x06F4
    416c:	28 2f       	mov	r18, r24
    416e:	33 27       	eor	r19, r19
    4170:	c9 01       	movw	r24, r18
    4172:	82 0f       	add	r24, r18
    4174:	93 1f       	adc	r25, r19
    4176:	fc 01       	movw	r30, r24
    4178:	eb 50       	subi	r30, 0x0B	; 11
    417a:	fc 4f       	sbci	r31, 0xFC	; 252
    417c:	80 81       	ld	r24, Z
    417e:	91 81       	ldd	r25, Z+1	; 0x01
    4180:	0e 94 24 29 	call	0x5248 <OutStr>
    4184:	0b c0       	rjmp	.+22     	; 0x419c <ShowLineMode+0x48>
	else
		OutStr(itoa(linemode, g_szInput, 10));
    4186:	80 91 f4 06 	lds	r24, 0x06F4
    418a:	99 27       	eor	r25, r25
    418c:	4a e0       	ldi	r20, 0x0A	; 10
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	62 e2       	ldi	r22, 0x22	; 34
    4192:	76 e0       	ldi	r23, 0x06	; 6
    4194:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    4198:	0e 94 24 29 	call	0x5248 <OutStr>
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	08 95       	ret

000041a2 <SensorsStateChangeNotify>:
}

//  вызывается из прерывания получения байта SIG_UART0_RECV
//  newstate - новое состояние портов устройства - бит=1 => соотв. датчик сработал
void SensorsStateChangeNotify(unsigned char newstate)
{
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	24 97       	sbiw	r28, 0x04	; 4
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	89 83       	std	Y+1, r24	; 0x01
	unsigned char k, mask, adr;

#ifndef NEWVG
	adr = g_CurDev.adr - 3;
#else
	adr = 0;
    41bc:	1c 82       	std	Y+4, r1	; 0x04
#endif

	//  это нужно делать только в охране, а то не даст изменить g_CurDev.ports
	//  в состоянии редактирования портов в MD_SETUP_SENSORS_LIST_DEVICE_SETPORT
	if (MD_OHRANA == g_Mode)
    41be:	80 91 f0 06 	lds	r24, 0x06F0
    41c2:	84 30       	cpi	r24, 0x04	; 4
    41c4:	99 f4       	brne	.+38     	; 0x41ec <SensorsStateChangeNotify+0x4a>
		//  флаги разрешения всех восьми датчиков устройства
		//  пока получаем из EEPROM, но потом надо от устройств
		g_CurDev.ports = g_devList[adr].ports;
    41c6:	8c 81       	ldd	r24, Y+4	; 0x04
    41c8:	28 2f       	mov	r18, r24
    41ca:	33 27       	eor	r19, r19
    41cc:	85 e1       	ldi	r24, 0x15	; 21
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	28 9f       	mul	r18, r24
    41d2:	a0 01       	movw	r20, r0
    41d4:	29 9f       	mul	r18, r25
    41d6:	50 0d       	add	r21, r0
    41d8:	38 9f       	mul	r19, r24
    41da:	50 0d       	add	r21, r0
    41dc:	11 24       	eor	r1, r1
    41de:	ca 01       	movw	r24, r20
    41e0:	fc 01       	movw	r30, r24
    41e2:	e7 54       	subi	r30, 0x47	; 71
    41e4:	f8 4f       	sbci	r31, 0xF8	; 248
    41e6:	80 81       	ld	r24, Z
    41e8:	80 93 df 07 	sts	0x07DF, r24

	if (MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE == g_Mode)
    41ec:	80 91 f0 06 	lds	r24, 0x06F0
    41f0:	89 30       	cpi	r24, 0x09	; 9
    41f2:	69 f4       	brne	.+26     	; 0x420e <SensorsStateChangeNotify+0x6c>
	{
		if (g_CurDev.ports_state != newstate)
    41f4:	90 91 e0 07 	lds	r25, 0x07E0
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	98 17       	cp	r25, r24
    41fc:	09 f4       	brne	.+2      	; 0x4200 <SensorsStateChangeNotify+0x5e>
    41fe:	ed c0       	rjmp	.+474    	; 0x43da <SensorsStateChangeNotify+0x238>
		{	//  когда не было условия, на больших скоростях опроса мерцание
			g_CurDev.ports_state = newstate;
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	80 93 e0 07 	sts	0x07E0, r24
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SENS_VALUE);
    4206:	89 e0       	ldi	r24, 0x09	; 9
    4208:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    420c:	e6 c0       	rjmp	.+460    	; 0x43da <SensorsStateChangeNotify+0x238>
		}
	}
	else
	if (MD_SETUP_SENSORS_LIST_DEVICE_SETPORT == g_Mode)
    420e:	80 91 f0 06 	lds	r24, 0x06F0
    4212:	88 30       	cpi	r24, 0x08	; 8
    4214:	69 f4       	brne	.+26     	; 0x4230 <SensorsStateChangeNotify+0x8e>
	{	//  если в режиме мониторинга, то изменения будут видны на экране,
		//  если в режиме установки назначения портов, но ничего не изменится
		if (g_CurDev.ports_state != newstate)
    4216:	90 91 e0 07 	lds	r25, 0x07E0
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	98 17       	cp	r25, r24
    421e:	09 f4       	brne	.+2      	; 0x4222 <SensorsStateChangeNotify+0x80>
    4220:	dc c0       	rjmp	.+440    	; 0x43da <SensorsStateChangeNotify+0x238>
		{	//  когда не было условия, на больших скоростях опроса мерцание
			g_CurDev.ports_state = newstate;
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	80 93 e0 07 	sts	0x07E0, r24
			PrepareToMode(MD_SETUP_SENSORS_LIST_DEVICE_SETPORT);
    4228:	88 e0       	ldi	r24, 0x08	; 8
    422a:	0e 94 78 09 	call	0x12f0 <PrepareToMode>
    422e:	d5 c0       	rjmp	.+426    	; 0x43da <SensorsStateChangeNotify+0x238>
		}
	}
	else
	if (g_DefferedSensorsState != newstate)
    4230:	90 91 c3 06 	lds	r25, 0x06C3
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	98 17       	cp	r25, r24
    4238:	09 f4       	brne	.+2      	; 0x423c <SensorsStateChangeNotify+0x9a>
    423a:	cf c0       	rjmp	.+414    	; 0x43da <SensorsStateChangeNotify+0x238>
	{	//  если дополнительно сработал какой-то датчик(ведь у нас могут быть
		//  уже установленные биты в g_DefferedSensorsState)

		//  просматриваем маску портов, разрешенных к обработке
		//  эта маска хранится в g_CurDev.ports, если
		//	соответствующий бит установлен, то этот порт запрещен
		//  ( вообщето надо наоборот, 1 - это вход, "I", но пока так...
		//ports = g_CurDev.ports;

		for (k = 0; k < 8; k++)
    423c:	1a 82       	std	Y+2, r1	; 0x02
    423e:	8a 81       	ldd	r24, Y+2	; 0x02
    4240:	88 30       	cpi	r24, 0x08	; 8
    4242:	08 f0       	brcs	.+2      	; 0x4246 <SensorsStateChangeNotify+0xa4>
    4244:	ac c0       	rjmp	.+344    	; 0x439e <SensorsStateChangeNotify+0x1fc>
		{
			mask = 1 << k;
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	28 2f       	mov	r18, r24
    424a:	33 27       	eor	r19, r19
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	02 2e       	mov	r0, r18
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <SensorsStateChangeNotify+0xb6>
    4254:	88 0f       	add	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	0a 94       	dec	r0
    425a:	e2 f7       	brpl	.-8      	; 0x4254 <SensorsStateChangeNotify+0xb2>
    425c:	8b 83       	std	Y+3, r24	; 0x03

			if (newstate & mask)
    425e:	99 81       	ldd	r25, Y+1	; 0x01
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	89 23       	and	r24, r25
    4264:	88 23       	and	r24, r24
    4266:	09 f4       	brne	.+2      	; 0x426a <SensorsStateChangeNotify+0xc8>
    4268:	96 c0       	rjmp	.+300    	; 0x4396 <SensorsStateChangeNotify+0x1f4>
			{	//  сработал датчик номер к в устройстве с адресом g_CurDev.adr

				//  реакция может быть запрещена двумя способами: или запрещена
				//  совсем или не кончился таймаут от срабатывания, проверяем оба
				if (!(g_CurDev.ports & mask) ||
    426a:	80 91 df 07 	lds	r24, 0x07DF
    426e:	9b 81       	ldd	r25, Y+3	; 0x03
    4270:	89 23       	and	r24, r25
    4272:	88 23       	and	r24, r24
    4274:	e9 f0       	breq	.+58     	; 0x42b0 <SensorsStateChangeNotify+0x10e>
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	48 2f       	mov	r20, r24
    427a:	55 27       	eor	r21, r21
    427c:	8c 81       	ldd	r24, Y+4	; 0x04
    427e:	28 2f       	mov	r18, r24
    4280:	33 27       	eor	r19, r19
    4282:	85 e1       	ldi	r24, 0x15	; 21
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	28 9f       	mul	r18, r24
    4288:	b0 01       	movw	r22, r0
    428a:	29 9f       	mul	r18, r25
    428c:	70 0d       	add	r23, r0
    428e:	38 9f       	mul	r19, r24
    4290:	70 0d       	add	r23, r0
    4292:	11 24       	eor	r1, r1
    4294:	9b 01       	movw	r18, r22
    4296:	ca 01       	movw	r24, r20
    4298:	84 0f       	add	r24, r20
    429a:	95 1f       	adc	r25, r21
    429c:	82 0f       	add	r24, r18
    429e:	93 1f       	adc	r25, r19
    42a0:	fc 01       	movw	r30, r24
    42a2:	e6 54       	subi	r30, 0x46	; 70
    42a4:	f8 4f       	sbci	r31, 0xF8	; 248
    42a6:	80 81       	ld	r24, Z
    42a8:	91 81       	ldd	r25, Z+1	; 0x01
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <SensorsStateChangeNotify+0x10e>
    42ae:	06 c0       	rjmp	.+12     	; 0x42bc <SensorsStateChangeNotify+0x11a>
					(g_devList[adr].sensorTimeout[k]))
				{
					newstate &= ~mask;	//  сбросим, как будто не сработал
    42b0:	8b 81       	ldd	r24, Y+3	; 0x03
    42b2:	98 2f       	mov	r25, r24
    42b4:	90 95       	com	r25
    42b6:	89 81       	ldd	r24, Y+1	; 0x01
    42b8:	89 23       	and	r24, r25
    42ba:	89 83       	std	Y+1, r24	; 0x01
				}
			/*
				//  обновляем значения времени реакции на повторное срабатывание
				if (g_devList[adr].sensorTimeout[k])

				//  но только, если истек предыдущий интервал задержки, иначе мы
				//  постоянно будем устанавливать задержку, не давая ей кончится
			*/
				if (g_CurDev.ports & mask)
    42bc:	80 91 df 07 	lds	r24, 0x07DF
    42c0:	9b 81       	ldd	r25, Y+3	; 0x03
    42c2:	89 23       	and	r24, r25
    42c4:	88 23       	and	r24, r24
    42c6:	09 f4       	brne	.+2      	; 0x42ca <SensorsStateChangeNotify+0x128>
    42c8:	66 c0       	rjmp	.+204    	; 0x4396 <SensorsStateChangeNotify+0x1f4>
				{
					g_devList[adr].sensorTimeout[k] =
    42ca:	8a 81       	ldd	r24, Y+2	; 0x02
    42cc:	48 2f       	mov	r20, r24
    42ce:	55 27       	eor	r21, r21
    42d0:	8c 81       	ldd	r24, Y+4	; 0x04
    42d2:	28 2f       	mov	r18, r24
    42d4:	33 27       	eor	r19, r19
    42d6:	85 e1       	ldi	r24, 0x15	; 21
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	28 9f       	mul	r18, r24
    42dc:	f0 01       	movw	r30, r0
    42de:	29 9f       	mul	r18, r25
    42e0:	f0 0d       	add	r31, r0
    42e2:	38 9f       	mul	r19, r24
    42e4:	f0 0d       	add	r31, r0
    42e6:	11 24       	eor	r1, r1
    42e8:	9f 01       	movw	r18, r30
    42ea:	ca 01       	movw	r24, r20
    42ec:	84 0f       	add	r24, r20
    42ee:	95 1f       	adc	r25, r21
    42f0:	82 0f       	add	r24, r18
    42f2:	93 1f       	adc	r25, r19
    42f4:	8c 01       	movw	r16, r24
    42f6:	06 54       	subi	r16, 0x46	; 70
    42f8:	18 4f       	sbci	r17, 0xF8	; 248
    42fa:	9c 81       	ldd	r25, Y+4	; 0x04
    42fc:	85 e1       	ldi	r24, 0x15	; 21
    42fe:	98 9f       	mul	r25, r24
    4300:	a0 01       	movw	r20, r0
    4302:	11 24       	eor	r1, r1
    4304:	8a 81       	ldd	r24, Y+2	; 0x02
    4306:	28 2f       	mov	r18, r24
    4308:	33 27       	eor	r19, r19
    430a:	c9 01       	movw	r24, r18
    430c:	82 0f       	add	r24, r18
    430e:	93 1f       	adc	r25, r19
    4310:	84 0f       	add	r24, r20
    4312:	95 1f       	adc	r25, r21
    4314:	8d 5f       	subi	r24, 0xFD	; 253
    4316:	9e 4f       	sbci	r25, 0xFE	; 254
    4318:	0e 94 82 39 	call	0x7304 <epmrw>
    431c:	f8 01       	movw	r30, r16
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	80 83       	st	Z, r24
						epmrw((const uint16_t*)(EADR_DEVICE_LIST +
						(adr)*sizeof(XDEVICE) + 3 + 2*k));

					if (0xFFFF == g_devList[adr].sensorTimeout[k])
    4322:	8a 81       	ldd	r24, Y+2	; 0x02
    4324:	48 2f       	mov	r20, r24
    4326:	55 27       	eor	r21, r21
    4328:	8c 81       	ldd	r24, Y+4	; 0x04
    432a:	28 2f       	mov	r18, r24
    432c:	33 27       	eor	r19, r19
    432e:	85 e1       	ldi	r24, 0x15	; 21
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	28 9f       	mul	r18, r24
    4334:	b0 01       	movw	r22, r0
    4336:	29 9f       	mul	r18, r25
    4338:	70 0d       	add	r23, r0
    433a:	38 9f       	mul	r19, r24
    433c:	70 0d       	add	r23, r0
    433e:	11 24       	eor	r1, r1
    4340:	9b 01       	movw	r18, r22
    4342:	ca 01       	movw	r24, r20
    4344:	84 0f       	add	r24, r20
    4346:	95 1f       	adc	r25, r21
    4348:	82 0f       	add	r24, r18
    434a:	93 1f       	adc	r25, r19
    434c:	fc 01       	movw	r30, r24
    434e:	e6 54       	subi	r30, 0x46	; 70
    4350:	f8 4f       	sbci	r31, 0xF8	; 248
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	7f ef       	ldi	r23, 0xFF	; 255
    4358:	8f 3f       	cpi	r24, 0xFF	; 255
    435a:	97 07       	cpc	r25, r23
    435c:	e1 f4       	brne	.+56     	; 0x4396 <SensorsStateChangeNotify+0x1f4>
						g_devList[adr].sensorTimeout[k] = 30;
    435e:	8a 81       	ldd	r24, Y+2	; 0x02
    4360:	48 2f       	mov	r20, r24
    4362:	55 27       	eor	r21, r21
    4364:	8c 81       	ldd	r24, Y+4	; 0x04
    4366:	28 2f       	mov	r18, r24
    4368:	33 27       	eor	r19, r19
    436a:	85 e1       	ldi	r24, 0x15	; 21
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	28 9f       	mul	r18, r24
    4370:	f0 01       	movw	r30, r0
    4372:	29 9f       	mul	r18, r25
    4374:	f0 0d       	add	r31, r0
    4376:	38 9f       	mul	r19, r24
    4378:	f0 0d       	add	r31, r0
    437a:	11 24       	eor	r1, r1
    437c:	9f 01       	movw	r18, r30
    437e:	ca 01       	movw	r24, r20
    4380:	84 0f       	add	r24, r20
    4382:	95 1f       	adc	r25, r21
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	fc 01       	movw	r30, r24
    438a:	e6 54       	subi	r30, 0x46	; 70
    438c:	f8 4f       	sbci	r31, 0xF8	; 248
    438e:	8e e1       	ldi	r24, 0x1E	; 30
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	80 83       	st	Z, r24
    4396:	8a 81       	ldd	r24, Y+2	; 0x02
    4398:	8f 5f       	subi	r24, 0xFF	; 255
    439a:	8a 83       	std	Y+2, r24	; 0x02
    439c:	50 cf       	rjmp	.-352    	; 0x423e <SensorsStateChangeNotify+0x9c>
				}
			}
		}

		if (!newstate)
    439e:	89 81       	ldd	r24, Y+1	; 0x01
    43a0:	88 23       	and	r24, r24
    43a2:	09 f4       	brne	.+2      	; 0x43a6 <SensorsStateChangeNotify+0x204>
		{	//  выходит, сработали только запрещенные датчики, раз
			//  здесь ноль - мы сбросили их биты и получился ноль...
			return;
    43a4:	1a c0       	rjmp	.+52     	; 0x43da <SensorsStateChangeNotify+0x238>
		}

		if ((g_sendOhranaEventMsgInProgress) && (LM_UP == linemode))
    43a6:	80 91 5a 07 	lds	r24, 0x075A
    43aa:	88 23       	and	r24, r24
    43ac:	39 f0       	breq	.+14     	; 0x43bc <SensorsStateChangeNotify+0x21a>
    43ae:	80 91 f4 06 	lds	r24, 0x06F4
    43b2:	84 30       	cpi	r24, 0x04	; 4
    43b4:	19 f4       	brne	.+6      	; 0x43bc <SensorsStateChangeNotify+0x21a>
			SendAllVoice();
    43b6:	0e 94 3a 23 	call	0x4674 <SendAllVoice>
    43ba:	0f c0       	rjmp	.+30     	; 0x43da <SensorsStateChangeNotify+0x238>
		else
		{
			//  прекращаем возможные отложенные звонки - звоним прямо сейчас!
			defferedOhranaEvent = 0;
    43bc:	10 92 0f 07 	sts	0x070F, r1
    43c0:	10 92 0e 07 	sts	0x070E, r1
			//  обработать событие DW_SENDOHRANAEVENT
			g_DefferedWork |= _BV(DW_SENDOHRANAEVENT);
    43c4:	80 91 5d 07 	lds	r24, 0x075D
    43c8:	81 60       	ori	r24, 0x01	; 1
    43ca:	80 93 5d 07 	sts	0x075D, r24
			//  чтобы не уничтожить старое, а присовокупить новое
			g_DefferedSensorsState |= newstate;
    43ce:	90 91 c3 06 	lds	r25, 0x06C3
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	89 2b       	or	r24, r25
    43d6:	80 93 c3 06 	sts	0x06C3, r24
    43da:	24 96       	adiw	r28, 0x04	; 4
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	f8 94       	cli
    43e0:	de bf       	out	0x3e, r29	; 62
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	cd bf       	out	0x3d, r28	; 61
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	08 95       	ret

000043f0 <DialDirectNumber>:
		}
	}
}

//#ifdef DEBUG
unsigned char*  szAutoDialNumbers[6] =
								{
									"105\x0            ",
/*3310582*/							"\x39\xBE\x33\x33\x31\x30\x35\x38\x32\x0      ",
/*3998011*/							"\x39\xBE\x33\x39\x39\x38\x30\x31\x31\x0      ",
/*3671803*/							"\x39\xBE\x33\x36\x37\x31\x38\x30\x33\x0      "
/*3998010*/							"\x39\xBE\x33\x39\x39\x38\x30\x31\x30\x0      ",
/*3938564*/							"\x39\xBE\x33\x39\x33\x38\x35\x36\x34\x0      ",
								};
void DialDirectNumber(unsigned char key)
{
    43f0:	cf 93       	push	r28
    43f2:	df 93       	push	r29
    43f4:	cd b7       	in	r28, 0x3d	; 61
    43f6:	de b7       	in	r29, 0x3e	; 62
    43f8:	21 97       	sbiw	r28, 0x01	; 1
    43fa:	0f b6       	in	r0, 0x3f	; 63
    43fc:	f8 94       	cli
    43fe:	de bf       	out	0x3e, r29	; 62
    4400:	0f be       	out	0x3f, r0	; 63
    4402:	cd bf       	out	0x3d, r28	; 61
    4404:	89 83       	std	Y+1, r24	; 0x01
	memcpy(g_szAutoDialNumbers[0], szAutoDialNumbers[key], 16);
    4406:	89 81       	ldd	r24, Y+1	; 0x01
    4408:	28 2f       	mov	r18, r24
    440a:	33 27       	eor	r19, r19
    440c:	c9 01       	movw	r24, r18
    440e:	82 0f       	add	r24, r18
    4410:	93 1f       	adc	r25, r19
    4412:	fc 01       	movw	r30, r24
    4414:	e1 5e       	subi	r30, 0xE1	; 225
    4416:	fa 4f       	sbci	r31, 0xFA	; 250
    4418:	40 e1       	ldi	r20, 0x10	; 16
    441a:	50 e0       	ldi	r21, 0x00	; 0
    441c:	60 81       	ld	r22, Z
    441e:	71 81       	ldd	r23, Z+1	; 0x01
    4420:	80 91 bd 03 	lds	r24, 0x03BD
    4424:	90 91 be 03 	lds	r25, 0x03BE
    4428:	0e 94 04 4f 	call	0x9e08 <memcpy>
	g_DefferedWork |= _BV(DW_SENDOHRANAEVENT);
    442c:	80 91 5d 07 	lds	r24, 0x075D
    4430:	81 60       	ori	r24, 0x01	; 1
    4432:	80 93 5d 07 	sts	0x075D, r24
	g_DefferedSensorsState = 2;
    4436:	82 e0       	ldi	r24, 0x02	; 2
    4438:	80 93 c3 06 	sts	0x06C3, r24
    443c:	21 96       	adiw	r28, 0x01	; 1
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	de bf       	out	0x3e, r29	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	cd bf       	out	0x3d, r28	; 61
    4448:	df 91       	pop	r29
    444a:	cf 91       	pop	r28
    444c:	08 95       	ret

0000444e <AutoDialNumbersOperations>:
}
//#endif

//  нажали цифровую клавишу на одном из номеров в списке номеров автодозвона
void AutoDialNumbersOperations(unsigned char key)
{
    444e:	cf 93       	push	r28
    4450:	df 93       	push	r29
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	22 97       	sbiw	r28, 0x02	; 2
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	f8 94       	cli
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	cd bf       	out	0x3d, r28	; 61
    4462:	89 83       	std	Y+1, r24	; 0x01
	unsigned char res;

	if (VK_1 == key)
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	81 31       	cpi	r24, 0x11	; 17
    4468:	a1 f4       	brne	.+40     	; 0x4492 <AutoDialNumbersOperations+0x44>
	{	//  просто позвонить по этому номеру
		strcpy(g_szLastNumber, g_szAutoDialNumbers[g_SetupItem]);
    446a:	80 91 c2 06 	lds	r24, 0x06C2
    446e:	28 2f       	mov	r18, r24
    4470:	33 27       	eor	r19, r19
    4472:	c9 01       	movw	r24, r18
    4474:	82 0f       	add	r24, r18
    4476:	93 1f       	adc	r25, r19
    4478:	fc 01       	movw	r30, r24
    447a:	e3 54       	subi	r30, 0x43	; 67
    447c:	fc 4f       	sbci	r31, 0xFC	; 252
    447e:	60 81       	ld	r22, Z
    4480:	71 81       	ldd	r23, Z+1	; 0x01
    4482:	85 e8       	ldi	r24, 0x85	; 133
    4484:	96 e0       	ldi	r25, 0x06	; 6
    4486:	0e 94 30 4f 	call	0x9e60 <strcpy>
		//REDUCERedial();
		modeBeforeZvonok = MD_SETUP_TEL_AUTO_DIAL_NUMBERS;
    448a:	89 e1       	ldi	r24, 0x19	; 25
    448c:	80 93 fd 06 	sts	0x06FD, r24
    4490:	70 c0       	rjmp	.+224    	; 0x4572 <AutoDialNumbersOperations+0x124>
	}else
	if (VK_2 == key)
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	82 31       	cpi	r24, 0x12	; 18
    4496:	09 f0       	breq	.+2      	; 0x449a <AutoDialNumbersOperations+0x4c>
    4498:	49 c0       	rjmp	.+146    	; 0x452c <AutoDialNumbersOperations+0xde>
	{	//	опеределить максимальную паузу для этого номера

		ClearScreen();
    449a:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		ClearInput();
    449e:	0e 94 98 0b 	call	0x1730 <ClearInput>
		ShowCaret();
    44a2:	0e 94 87 29 	call	0x530e <ShowCaret>
		SetCaret(LINE_2_START_POS);
    44a6:	80 e4       	ldi	r24, 0x40	; 64
    44a8:	0e 94 47 29 	call	0x528e <SetCaret>

		if ('.' == g_szAutoDialNumbers[g_SetupItem][1])
    44ac:	80 91 c2 06 	lds	r24, 0x06C2
    44b0:	28 2f       	mov	r18, r24
    44b2:	33 27       	eor	r19, r19
    44b4:	c9 01       	movw	r24, r18
    44b6:	82 0f       	add	r24, r18
    44b8:	93 1f       	adc	r25, r19
    44ba:	fc 01       	movw	r30, r24
    44bc:	e3 54       	subi	r30, 0x43	; 67
    44be:	fc 4f       	sbci	r31, 0xFC	; 252
    44c0:	80 81       	ld	r24, Z
    44c2:	91 81       	ldd	r25, Z+1	; 0x01
    44c4:	fc 01       	movw	r30, r24
    44c6:	31 96       	adiw	r30, 0x01	; 1
    44c8:	80 81       	ld	r24, Z
    44ca:	8e 32       	cpi	r24, 0x2E	; 46
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <AutoDialNumbersOperations+0x82>
			return;
    44ce:	51 c0       	rjmp	.+162    	; 0x4572 <AutoDialNumbersOperations+0x124>

		modeBeforeZvonok = MD_SETUP_TEL_AUTO_DIAL_NUMBERS;
    44d0:	89 e1       	ldi	r24, 0x19	; 25
    44d2:	80 93 fd 06 	sts	0x06FD, r24

		if (advancedLineMode)
    44d6:	80 91 d1 06 	lds	r24, 0x06D1
    44da:	88 23       	and	r24, r24
    44dc:	d9 f0       	breq	.+54     	; 0x4514 <AutoDialNumbersOperations+0xc6>
		{
			res = AutoDialToNumber(g_SetupItem);
    44de:	80 91 c2 06 	lds	r24, 0x06C2
    44e2:	0e 94 9b 19 	call	0x3336 <AutoDialToNumber>
    44e6:	8a 83       	std	Y+2, r24	; 0x02

			if (LM_UP == res)
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	84 30       	cpi	r24, 0x04	; 4
    44ec:	51 f4       	brne	.+20     	; 0x4502 <AutoDialNumbersOperations+0xb4>
			{
				//  гудок буд-то бы был, чтобы первый же следующий длинный
				//	служил сигналом OS_OR_DOWN
				g_wasOne = 1;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	80 93 c1 06 	sts	0x06C1, r24

				//  весь разговор протекает в следующей функции
				WaitForModePresent(0, linemode, LM_UP);
    44f4:	44 e0       	ldi	r20, 0x04	; 4
    44f6:	60 91 f4 06 	lds	r22, 0x06F4
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	0e 94 8f 18 	call	0x311e <WaitForModePresent>
    4500:	06 c0       	rjmp	.+12     	; 0x450e <AutoDialNumbersOperations+0xc0>
			}else
			{
				ShowLineMode();
    4502:	0e 94 aa 20 	call	0x4154 <ShowLineMode>
				delayms(1000);
    4506:	88 ee       	ldi	r24, 0xE8	; 232
    4508:	93 e0       	ldi	r25, 0x03	; 3
    450a:	0e 94 ba 38 	call	0x7174 <delayms>
			}

			RingOff();
    450e:	0e 94 6b 20 	call	0x40d6 <RingOff>
    4512:	2f c0       	rjmp	.+94     	; 0x4572 <AutoDialNumbersOperations+0x124>
		}
		else
		{
			AutoDialToNumber2(g_SetupItem);
    4514:	80 91 c2 06 	lds	r24, 0x06C2
    4518:	0e 94 1e 1b 	call	0x363c <AutoDialToNumber2>
			while (confirmUp);
    451c:	80 91 42 06 	lds	r24, 0x0642
    4520:	88 23       	and	r24, r24
    4522:	09 f0       	breq	.+2      	; 0x4526 <AutoDialNumbersOperations+0xd8>
    4524:	fb cf       	rjmp	.-10     	; 0x451c <AutoDialNumbersOperations+0xce>
			RingOff();
    4526:	0e 94 6b 20 	call	0x40d6 <RingOff>
    452a:	23 c0       	rjmp	.+70     	; 0x4572 <AutoDialNumbersOperations+0x124>
		}

	}else
	if (VK_3 == key)
    452c:	89 81       	ldd	r24, Y+1	; 0x01
    452e:	83 31       	cpi	r24, 0x13	; 19
    4530:	41 f4       	brne	.+16     	; 0x4542 <AutoDialNumbersOperations+0xf4>
	{	//  передвинуть данный номер вверх
		if (g_SetupItem)
    4532:	80 91 c2 06 	lds	r24, 0x06C2
    4536:	88 23       	and	r24, r24
    4538:	e1 f0       	breq	.+56     	; 0x4572 <AutoDialNumbersOperations+0x124>
			ChangeMenuItems(-1);
    453a:	8f ef       	ldi	r24, 0xFF	; 255
    453c:	0e 94 ee 06 	call	0xddc <ChangeMenuItems>
    4540:	18 c0       	rjmp	.+48     	; 0x4572 <AutoDialNumbersOperations+0x124>
	}else
	if (VK_6 == key)
    4542:	89 81       	ldd	r24, Y+1	; 0x01
    4544:	87 30       	cpi	r24, 0x07	; 7
    4546:	41 f4       	brne	.+16     	; 0x4558 <AutoDialNumbersOperations+0x10a>
	{	//  передвинуть данный вниз
		if (g_SetupItem < 8)
    4548:	80 91 c2 06 	lds	r24, 0x06C2
    454c:	88 30       	cpi	r24, 0x08	; 8
    454e:	88 f4       	brcc	.+34     	; 0x4572 <AutoDialNumbersOperations+0x124>
			ChangeMenuItems(1);
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	0e 94 ee 06 	call	0xddc <ChangeMenuItems>
    4556:	0d c0       	rjmp	.+26     	; 0x4572 <AutoDialNumbersOperations+0x124>
	}else
	if (VK_0 == key)
    4558:	89 81       	ldd	r24, Y+1	; 0x01
    455a:	8e 30       	cpi	r24, 0x0E	; 14
    455c:	51 f4       	brne	.+20     	; 0x4572 <AutoDialNumbersOperations+0x124>
	{	//  стереть номер
		EraseNumber(g_SetupItem);
    455e:	80 91 c2 06 	lds	r24, 0x06C2
    4562:	0e 94 13 24 	call	0x4826 <EraseNumber>
		MenuItemsInitAndDraw(g_SetupFirstLine, g_SetupCurItem);
    4566:	60 91 34 06 	lds	r22, 0x0634
    456a:	80 91 35 06 	lds	r24, 0x0635
    456e:	0e 94 79 08 	call	0x10f2 <MenuItemsInitAndDraw>
    4572:	22 96       	adiw	r28, 0x02	; 2
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	08 95       	ret

00004584 <QueueVoice>:
	}
}

//  поставить звуковое сообщение номер voiceNum в очередь
void QueueVoice(unsigned short voicePos)
{
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	23 97       	sbiw	r28, 0x03	; 3
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	9a 83       	std	Y+2, r25	; 0x02
    459a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char k;

	for (k = 0; k < MAX_VOICE_QUEUE + 2; k++)
    459c:	1b 82       	std	Y+3, r1	; 0x03
    459e:	8b 81       	ldd	r24, Y+3	; 0x03
    45a0:	82 32       	cpi	r24, 0x22	; 34
    45a2:	b8 f5       	brcc	.+110    	; 0x4612 <QueueVoice+0x8e>
		if (!g_VoiceQueue[k])
    45a4:	8b 81       	ldd	r24, Y+3	; 0x03
    45a6:	28 2f       	mov	r18, r24
    45a8:	33 27       	eor	r19, r19
    45aa:	c9 01       	movw	r24, r18
    45ac:	82 0f       	add	r24, r18
    45ae:	93 1f       	adc	r25, r19
    45b0:	fc 01       	movw	r30, r24
    45b2:	e9 5e       	subi	r30, 0xE9	; 233
    45b4:	f8 4f       	sbci	r31, 0xF8	; 248
    45b6:	80 81       	ld	r24, Z
    45b8:	91 81       	ldd	r25, Z+1	; 0x01
    45ba:	00 97       	sbiw	r24, 0x00	; 0
    45bc:	31 f5       	brne	.+76     	; 0x460a <QueueVoice+0x86>
		{
			g_VoiceQueue[k] = VOICE_PAUSE;
    45be:	8b 81       	ldd	r24, Y+3	; 0x03
    45c0:	28 2f       	mov	r18, r24
    45c2:	33 27       	eor	r19, r19
    45c4:	c9 01       	movw	r24, r18
    45c6:	82 0f       	add	r24, r18
    45c8:	93 1f       	adc	r25, r19
    45ca:	fc 01       	movw	r30, r24
    45cc:	e9 5e       	subi	r30, 0xE9	; 233
    45ce:	f8 4f       	sbci	r31, 0xF8	; 248
    45d0:	88 e3       	ldi	r24, 0x38	; 56
    45d2:	94 e0       	ldi	r25, 0x04	; 4
    45d4:	91 83       	std	Z+1, r25	; 0x01
    45d6:	80 83       	st	Z, r24
			g_VoiceQueue[k + 1] = voicePos;
    45d8:	8b 81       	ldd	r24, Y+3	; 0x03
    45da:	28 2f       	mov	r18, r24
    45dc:	33 27       	eor	r19, r19
    45de:	c9 01       	movw	r24, r18
    45e0:	82 0f       	add	r24, r18
    45e2:	93 1f       	adc	r25, r19
    45e4:	fc 01       	movw	r30, r24
    45e6:	e7 5e       	subi	r30, 0xE7	; 231
    45e8:	f8 4f       	sbci	r31, 0xF8	; 248
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	9a 81       	ldd	r25, Y+2	; 0x02
    45ee:	91 83       	std	Z+1, r25	; 0x01
    45f0:	80 83       	st	Z, r24
			g_VoiceQueue[k + 2] = 0;		//  там бывало что-то недосказанное
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	28 2f       	mov	r18, r24
    45f6:	33 27       	eor	r19, r19
    45f8:	c9 01       	movw	r24, r18
    45fa:	82 0f       	add	r24, r18
    45fc:	93 1f       	adc	r25, r19
    45fe:	fc 01       	movw	r30, r24
    4600:	e5 5e       	subi	r30, 0xE5	; 229
    4602:	f8 4f       	sbci	r31, 0xF8	; 248
    4604:	11 82       	std	Z+1, r1	; 0x01
    4606:	10 82       	st	Z, r1
											//  и возникали накладки
			return;
    4608:	04 c0       	rjmp	.+8      	; 0x4612 <QueueVoice+0x8e>
    460a:	8b 81       	ldd	r24, Y+3	; 0x03
    460c:	8f 5f       	subi	r24, 0xFF	; 255
    460e:	8b 83       	std	Y+3, r24	; 0x03
    4610:	c6 cf       	rjmp	.-116    	; 0x459e <QueueVoice+0x1a>
    4612:	23 96       	adiw	r28, 0x03	; 3
    4614:	0f b6       	in	r0, 0x3f	; 63
    4616:	f8 94       	cli
    4618:	de bf       	out	0x3e, r29	; 62
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	cd bf       	out	0x3d, r28	; 61
    461e:	df 91       	pop	r29
    4620:	cf 91       	pop	r28
    4622:	08 95       	ret

00004624 <PlayQueue>:
		}
}

//  проиграть все звуковые сообщения в очереди
void PlayQueue(unsigned char voice)
{
    4624:	cf 93       	push	r28
    4626:	df 93       	push	r29
    4628:	cd b7       	in	r28, 0x3d	; 61
    462a:	de b7       	in	r29, 0x3e	; 62
    462c:	21 97       	sbiw	r28, 0x01	; 1
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	89 83       	std	Y+1, r24	; 0x01
	if (g_VoiceQueue[0])
    463a:	80 91 17 07 	lds	r24, 0x0717
    463e:	90 91 18 07 	lds	r25, 0x0718
    4642:	00 97       	sbiw	r24, 0x00	; 0
    4644:	71 f0       	breq	.+28     	; 0x4662 <PlayQueue+0x3e>
	{
		g_nextVoice = 1;
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	80 93 13 07 	sts	0x0713, r24
		SendVoice(g_VoiceQueue[0], voice);
    464c:	69 81       	ldd	r22, Y+1	; 0x01
    464e:	80 91 17 07 	lds	r24, 0x0717
    4652:	90 91 18 07 	lds	r25, 0x0718
    4656:	0e 94 61 1c 	call	0x38c2 <SendVoice>
		g_VoiceQueue[0] = 0;
    465a:	10 92 18 07 	sts	0x0718, r1
    465e:	10 92 17 07 	sts	0x0717, r1
    4662:	21 96       	adiw	r28, 0x01	; 1
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	de bf       	out	0x3e, r29	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	08 95       	ret

00004674 <SendAllVoice>:
	}
}

void SendAllVoice(void)
{
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	22 97       	sbiw	r28, 0x02	; 2
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	cd bf       	out	0x3d, r28	; 61
	unsigned char i,k;

	if (!g_DefferedSensorsState)
    4688:	80 91 c3 06 	lds	r24, 0x06C3
    468c:	88 23       	and	r24, r24
    468e:	61 f4       	brne	.+24     	; 0x46a8 <SendAllVoice+0x34>
	{
		for (k = 0; k < 3; k++)
    4690:	1a 82       	std	Y+2, r1	; 0x02
    4692:	8a 81       	ldd	r24, Y+2	; 0x02
    4694:	83 30       	cpi	r24, 0x03	; 3
    4696:	88 f5       	brcc	.+98     	; 0x46fa <SendAllVoice+0x86>
			QueueVoice(VOICE_OK);
    4698:	8a ea       	ldi	r24, 0xAA	; 170
    469a:	95 e0       	ldi	r25, 0x05	; 5
    469c:	0e 94 c2 22 	call	0x4584 <QueueVoice>
    46a0:	8a 81       	ldd	r24, Y+2	; 0x02
    46a2:	8f 5f       	subi	r24, 0xFF	; 255
    46a4:	8a 83       	std	Y+2, r24	; 0x02
    46a6:	f5 cf       	rjmp	.-22     	; 0x4692 <SendAllVoice+0x1e>
	}
	else

	for (i = 0; i < 3; i++)
    46a8:	19 82       	std	Y+1, r1	; 0x01
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	83 30       	cpi	r24, 0x03	; 3
    46ae:	28 f5       	brcc	.+74     	; 0x46fa <SendAllVoice+0x86>
	{	//  три раза

		for (k = 0; k < 8; k++)
    46b0:	1a 82       	std	Y+2, r1	; 0x02
    46b2:	8a 81       	ldd	r24, Y+2	; 0x02
    46b4:	88 30       	cpi	r24, 0x08	; 8
    46b6:	e8 f4       	brcc	.+58     	; 0x46f2 <SendAllVoice+0x7e>
			if (g_DefferedSensorsState & (1 << k))
    46b8:	80 91 c3 06 	lds	r24, 0x06C3
    46bc:	28 2f       	mov	r18, r24
    46be:	33 27       	eor	r19, r19
    46c0:	8a 81       	ldd	r24, Y+2	; 0x02
    46c2:	99 27       	eor	r25, r25
    46c4:	02 c0       	rjmp	.+4      	; 0x46ca <SendAllVoice+0x56>
    46c6:	35 95       	asr	r19
    46c8:	27 95       	ror	r18
    46ca:	8a 95       	dec	r24
    46cc:	e2 f7       	brpl	.-8      	; 0x46c6 <SendAllVoice+0x52>
    46ce:	c9 01       	movw	r24, r18
    46d0:	81 70       	andi	r24, 0x01	; 1
    46d2:	90 70       	andi	r25, 0x00	; 0
    46d4:	00 97       	sbiw	r24, 0x00	; 0
    46d6:	49 f0       	breq	.+18     	; 0x46ea <SendAllVoice+0x76>
			{
				QueueVoice(1000 + 50*k);
    46d8:	9a 81       	ldd	r25, Y+2	; 0x02
    46da:	82 e3       	ldi	r24, 0x32	; 50
    46dc:	98 9f       	mul	r25, r24
    46de:	c0 01       	movw	r24, r0
    46e0:	11 24       	eor	r1, r1
    46e2:	88 51       	subi	r24, 0x18	; 24
    46e4:	9c 4f       	sbci	r25, 0xFC	; 252
    46e6:	0e 94 c2 22 	call	0x4584 <QueueVoice>
    46ea:	8a 81       	ldd	r24, Y+2	; 0x02
    46ec:	8f 5f       	subi	r24, 0xFF	; 255
    46ee:	8a 83       	std	Y+2, r24	; 0x02
    46f0:	e0 cf       	rjmp	.-64     	; 0x46b2 <SendAllVoice+0x3e>
    46f2:	89 81       	ldd	r24, Y+1	; 0x01
    46f4:	8f 5f       	subi	r24, 0xFF	; 255
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	d8 cf       	rjmp	.-80     	; 0x46aa <SendAllVoice+0x36>
			}
	}

	PlayQueue(0);
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	0e 94 12 23 	call	0x4624 <PlayQueue>
    4700:	22 96       	adiw	r28, 0x02	; 2
    4702:	0f b6       	in	r0, 0x3f	; 63
    4704:	f8 94       	cli
    4706:	de bf       	out	0x3e, r29	; 62
    4708:	0f be       	out	0x3f, r0	; 63
    470a:	cd bf       	out	0x3d, r28	; 61
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	08 95       	ret

00004712 <SetDefaultSettings>:
}

//  устанавливает "заводские" настройки
void SetDefaultSettings(void)
{
    4712:	cf 93       	push	r28
    4714:	df 93       	push	r29
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	25 97       	sbiw	r28, 0x05	; 5
    471c:	0f b6       	in	r0, 0x3f	; 63
    471e:	f8 94       	cli
    4720:	de bf       	out	0x3e, r29	; 62
    4722:	0f be       	out	0x3f, r0	; 63
    4724:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;
	unsigned short i;
	unsigned char* adr;

	//  обнуление пароля
	memset(&g_szSetupPassword, 0x30, 4);
    4726:	44 e0       	ldi	r20, 0x04	; 4
    4728:	50 e0       	ldi	r21, 0x00	; 0
    472a:	60 e3       	ldi	r22, 0x30	; 48
    472c:	70 e0       	ldi	r23, 0x00	; 0
    472e:	85 ec       	ldi	r24, 0xC5	; 197
    4730:	96 e0       	ldi	r25, 0x06	; 6
    4732:	0e 94 11 4f 	call	0x9e22 <memset>
	g_szSetupPassword[4] = 0;
    4736:	10 92 c9 06 	sts	0x06C9, r1
	epmwbl(&g_szSetupPassword, (unsigned char*)EADR_SETUP_PSWD,
    473a:	4a e0       	ldi	r20, 0x0A	; 10
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	62 ed       	ldi	r22, 0xD2	; 210
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	85 ec       	ldi	r24, 0xC5	; 197
    4744:	96 e0       	ldi	r25, 0x06	; 6
    4746:	0e 94 45 39 	call	0x728a <epmwbl>
		MAX_PASSWORD_LEN);

	//  обнуление таймаутов повторного срабатывания
	for (k = 0; k < MAX_DEVICE_COUNT; k++)
    474a:	19 82       	std	Y+1, r1	; 0x01
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	88 23       	and	r24, r24
    4750:	61 f5       	brne	.+88     	; 0x47aa <SetDefaultSettings+0x98>
	{
		adr = (unsigned char*)EADR_DEVICE_LIST + k*sizeof(XDEVICE) + 3;
    4752:	99 81       	ldd	r25, Y+1	; 0x01
    4754:	85 e1       	ldi	r24, 0x15	; 21
    4756:	98 9f       	mul	r25, r24
    4758:	c0 01       	movw	r24, r0
    475a:	11 24       	eor	r1, r1
    475c:	8d 5f       	subi	r24, 0xFD	; 253
    475e:	9e 4f       	sbci	r25, 0xFE	; 254
    4760:	9d 83       	std	Y+5, r25	; 0x05
    4762:	8c 83       	std	Y+4, r24	; 0x04

		for (i = (unsigned short)adr; i < (unsigned short)adr + 16; i = i + 2)
    4764:	8c 81       	ldd	r24, Y+4	; 0x04
    4766:	9d 81       	ldd	r25, Y+5	; 0x05
    4768:	9b 83       	std	Y+3, r25	; 0x03
    476a:	8a 83       	std	Y+2, r24	; 0x02
    476c:	8c 81       	ldd	r24, Y+4	; 0x04
    476e:	9d 81       	ldd	r25, Y+5	; 0x05
    4770:	9c 01       	movw	r18, r24
    4772:	20 5f       	subi	r18, 0xF0	; 240
    4774:	3f 4f       	sbci	r19, 0xFF	; 255
    4776:	8a 81       	ldd	r24, Y+2	; 0x02
    4778:	9b 81       	ldd	r25, Y+3	; 0x03
    477a:	82 17       	cp	r24, r18
    477c:	93 07       	cpc	r25, r19
    477e:	88 f4       	brcc	.+34     	; 0x47a2 <SetDefaultSettings+0x90>
		{
			eeprom_write_byte_1((unsigned char*)i, 30);
    4780:	6e e1       	ldi	r22, 0x1E	; 30
    4782:	8a 81       	ldd	r24, Y+2	; 0x02
    4784:	9b 81       	ldd	r25, Y+3	; 0x03
    4786:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
			eeprom_write_byte_1((unsigned char*)i + 1, 0);
    478a:	8a 81       	ldd	r24, Y+2	; 0x02
    478c:	9b 81       	ldd	r25, Y+3	; 0x03
    478e:	01 96       	adiw	r24, 0x01	; 1
    4790:	60 e0       	ldi	r22, 0x00	; 0
    4792:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
    4796:	8a 81       	ldd	r24, Y+2	; 0x02
    4798:	9b 81       	ldd	r25, Y+3	; 0x03
    479a:	02 96       	adiw	r24, 0x02	; 2
    479c:	9b 83       	std	Y+3, r25	; 0x03
    479e:	8a 83       	std	Y+2, r24	; 0x02
    47a0:	e5 cf       	rjmp	.-54     	; 0x476c <SetDefaultSettings+0x5a>
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	8f 5f       	subi	r24, 0xFF	; 255
    47a6:	89 83       	std	Y+1, r24	; 0x01
    47a8:	d1 cf       	rjmp	.-94     	; 0x474c <SetDefaultSettings+0x3a>
		}
	}

	// Baudrate По умолчанию - 9600
	eeprom_write_byte_1((void*)EADR_USART_BAUDRATE, 2);
    47aa:	62 e0       	ldi	r22, 0x02	; 2
    47ac:	81 e1       	ldi	r24, 0x11	; 17
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	uart_init();
    47b4:	0e 94 9e 2b 	call	0x573c <uart_init>

	eeprom_write_byte_1((void*)EADR_VOLUME_DINAMIC, 0);
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	84 e1       	ldi	r24, 0x14	; 20
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	g_speakerVolume = 0;
    47c2:	10 92 f1 06 	sts	0x06F1, r1

	SetDefBuiltinTimeout(3);
    47c6:	83 e0       	ldi	r24, 0x03	; 3
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	0e 94 88 38 	call	0x7110 <SetDefBuiltinTimeout>

	eeprom_write_byte_1((void*)EADR_ADV_LINE_MODE, 0);
    47ce:	60 e0       	ldi	r22, 0x00	; 0
    47d0:	83 ee       	ldi	r24, 0xE3	; 227
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	advancedLineMode = 0;
    47d8:	10 92 d1 06 	sts	0x06D1, r1

	eeprom_write_byte_1((void*)EADR_X232_INTERVAL, 10);
    47dc:	6a e0       	ldi	r22, 0x0A	; 10
    47de:	87 e1       	ldi	r24, 0x17	; 23
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	g_BuiltSensorsPollInterval = 10;
    47e6:	8a e0       	ldi	r24, 0x0A	; 10
    47e8:	80 93 bf 06 	sts	0x06BF, r24
	g_x232Interval = 10;
    47ec:	8a e0       	ldi	r24, 0x0A	; 10
    47ee:	80 93 8d 07 	sts	0x078D, r24

	eeprom_write_byte_1((void*)EADR_CAN_SHOW_TIME, 0);
    47f2:	60 e0       	ldi	r22, 0x00	; 0
    47f4:	84 ee       	ldi	r24, 0xE4	; 228
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	g_canShowTime = 0;
    47fc:	10 92 c0 06 	sts	0x06C0, r1

	SetCaret(LINE_2_START_POS + 15);
    4800:	8f e4       	ldi	r24, 0x4F	; 79
    4802:	0e 94 47 29 	call	0x528e <SetCaret>
	OutData(0x23);					//  признак того, что сброс отработал
    4806:	83 e2       	ldi	r24, 0x23	; 35
    4808:	0e 94 e7 28 	call	0x51ce <OutData>

	g_CurDev.ports = 0;
    480c:	10 92 df 07 	sts	0x07DF, r1
	ChangePortPurpose();
    4810:	0e 94 dc 32 	call	0x65b8 <ChangePortPurpose>
    4814:	25 96       	adiw	r28, 0x05	; 5
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	f8 94       	cli
    481a:	de bf       	out	0x3e, r29	; 62
    481c:	0f be       	out	0x3f, r0	; 63
    481e:	cd bf       	out	0x3d, r28	; 61
    4820:	df 91       	pop	r29
    4822:	cf 91       	pop	r28
    4824:	08 95       	ret

00004826 <EraseNumber>:
}

//  очистить телефонный номер номер num в списке автодозвона
void EraseNumber(unsigned char num)
{
    4826:	cf 93       	push	r28
    4828:	df 93       	push	r29
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	23 97       	sbiw	r28, 0x03	; 3
    4830:	0f b6       	in	r0, 0x3f	; 63
    4832:	f8 94       	cli
    4834:	de bf       	out	0x3e, r29	; 62
    4836:	0f be       	out	0x3f, r0	; 63
    4838:	cd bf       	out	0x3d, r28	; 61
    483a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char* sz;

	*(sz = &g_szAutoDialNumbers[num][0]) = 0x31 + num;		//  ставим номер номера
    483c:	89 81       	ldd	r24, Y+1	; 0x01
    483e:	28 2f       	mov	r18, r24
    4840:	33 27       	eor	r19, r19
    4842:	c9 01       	movw	r24, r18
    4844:	82 0f       	add	r24, r18
    4846:	93 1f       	adc	r25, r19
    4848:	fc 01       	movw	r30, r24
    484a:	e3 54       	subi	r30, 0x43	; 67
    484c:	fc 4f       	sbci	r31, 0xFC	; 252
    484e:	01 90       	ld	r0, Z+
    4850:	f0 81       	ld	r31, Z
    4852:	e0 2d       	mov	r30, r0
    4854:	fb 83       	std	Y+3, r31	; 0x03
    4856:	ea 83       	std	Y+2, r30	; 0x02
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	8f 5c       	subi	r24, 0xCF	; 207
    485c:	80 83       	st	Z, r24

	memset((unsigned char*)(sz + 1), 0, 15);
    485e:	8a 81       	ldd	r24, Y+2	; 0x02
    4860:	9b 81       	ldd	r25, Y+3	; 0x03
    4862:	01 96       	adiw	r24, 0x01	; 1
    4864:	4f e0       	ldi	r20, 0x0F	; 15
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	60 e0       	ldi	r22, 0x00	; 0
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	0e 94 11 4f 	call	0x9e22 <memset>
	memset((unsigned char*)(sz + 1), '.', 9);
    4870:	8a 81       	ldd	r24, Y+2	; 0x02
    4872:	9b 81       	ldd	r25, Y+3	; 0x03
    4874:	01 96       	adiw	r24, 0x01	; 1
    4876:	49 e0       	ldi	r20, 0x09	; 9
    4878:	50 e0       	ldi	r21, 0x00	; 0
    487a:	6e e2       	ldi	r22, 0x2E	; 46
    487c:	70 e0       	ldi	r23, 0x00	; 0
    487e:	0e 94 11 4f 	call	0x9e22 <memset>
    4882:	23 96       	adiw	r28, 0x03	; 3
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	08 95       	ret

00004894 <ShowRunStr>:
}

unsigned char* runstr = "\x42\x61\x63\x20\xBE\x70\xB8\xB3\x65\xBF\x63\xBF\xB3\x79\x65\xBF\x20\x63\xB8\x63\xBF\x65\xBC\x61\x20\x56\x6F\x69\x63\x65\x47\x75\x61\x72\x64\x20\x31\x2E\x30\x20";

void ShowRunStr(void)
{
    4894:	0f 93       	push	r16
    4896:	1f 93       	push	r17
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
    489c:	cd b7       	in	r28, 0x3d	; 61
    489e:	de b7       	in	r29, 0x3e	; 62
    48a0:	26 97       	sbiw	r28, 0x06	; 6
    48a2:	0f b6       	in	r0, 0x3f	; 63
    48a4:	f8 94       	cli
    48a6:	de bf       	out	0x3e, r29	; 62
    48a8:	0f be       	out	0x3f, r0	; 63
    48aa:	cd bf       	out	0x3d, r28	; 61
	unsigned char key, i, k, pos, pos2, pos3;

	pos = 15;
    48ac:	8f e0       	ldi	r24, 0x0F	; 15
    48ae:	8c 83       	std	Y+4, r24	; 0x04
	pos2 = 0;
    48b0:	1d 82       	std	Y+5, r1	; 0x05
	pos3 = 0;
    48b2:	1e 82       	std	Y+6, r1	; 0x06

	for (k = 0; k < strlen(runstr) + 16; k++)
    48b4:	1b 82       	std	Y+3, r1	; 0x03
    48b6:	8b 81       	ldd	r24, Y+3	; 0x03
    48b8:	08 2f       	mov	r16, r24
    48ba:	11 27       	eor	r17, r17
    48bc:	80 91 54 05 	lds	r24, 0x0554
    48c0:	90 91 55 05 	lds	r25, 0x0555
    48c4:	0e 94 37 4f 	call	0x9e6e <strlen>
    48c8:	40 96       	adiw	r24, 0x10	; 16
    48ca:	08 17       	cp	r16, r24
    48cc:	19 07       	cpc	r17, r25
    48ce:	08 f0       	brcs	.+2      	; 0x48d2 <ShowRunStr+0x3e>
    48d0:	59 c0       	rjmp	.+178    	; 0x4984 <ShowRunStr+0xf0>
	{
		SetCaret(pos);
    48d2:	8c 81       	ldd	r24, Y+4	; 0x04
    48d4:	0e 94 47 29 	call	0x528e <SetCaret>

		for (i = pos2; i < 16 - pos + pos2 - pos3; i++)
    48d8:	8d 81       	ldd	r24, Y+5	; 0x05
    48da:	8a 83       	std	Y+2, r24	; 0x02
    48dc:	8a 81       	ldd	r24, Y+2	; 0x02
    48de:	48 2f       	mov	r20, r24
    48e0:	55 27       	eor	r21, r21
    48e2:	8d 81       	ldd	r24, Y+5	; 0x05
    48e4:	28 2f       	mov	r18, r24
    48e6:	33 27       	eor	r19, r19
    48e8:	8c 81       	ldd	r24, Y+4	; 0x04
    48ea:	99 27       	eor	r25, r25
    48ec:	28 1b       	sub	r18, r24
    48ee:	39 0b       	sbc	r19, r25
    48f0:	8e 81       	ldd	r24, Y+6	; 0x06
    48f2:	99 27       	eor	r25, r25
    48f4:	28 1b       	sub	r18, r24
    48f6:	39 0b       	sbc	r19, r25
    48f8:	c9 01       	movw	r24, r18
    48fa:	40 96       	adiw	r24, 0x10	; 16
    48fc:	48 17       	cp	r20, r24
    48fe:	59 07       	cpc	r21, r25
    4900:	8c f4       	brge	.+34     	; 0x4924 <ShowRunStr+0x90>
			OutData(runstr[i]);
    4902:	8a 81       	ldd	r24, Y+2	; 0x02
    4904:	28 2f       	mov	r18, r24
    4906:	33 27       	eor	r19, r19
    4908:	80 91 54 05 	lds	r24, 0x0554
    490c:	90 91 55 05 	lds	r25, 0x0555
    4910:	f9 01       	movw	r30, r18
    4912:	e8 0f       	add	r30, r24
    4914:	f9 1f       	adc	r31, r25
    4916:	80 81       	ld	r24, Z
    4918:	0e 94 e7 28 	call	0x51ce <OutData>
    491c:	8a 81       	ldd	r24, Y+2	; 0x02
    491e:	8f 5f       	subi	r24, 0xFF	; 255
    4920:	8a 83       	std	Y+2, r24	; 0x02
    4922:	dc cf       	rjmp	.-72     	; 0x48dc <ShowRunStr+0x48>

		delayms(250);
    4924:	8a ef       	ldi	r24, 0xFA	; 250
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	0e 94 ba 38 	call	0x7174 <delayms>

		if (pos)
    492c:	8c 81       	ldd	r24, Y+4	; 0x04
    492e:	88 23       	and	r24, r24
    4930:	21 f0       	breq	.+8      	; 0x493a <ShowRunStr+0xa6>
			pos--;
    4932:	8c 81       	ldd	r24, Y+4	; 0x04
    4934:	81 50       	subi	r24, 0x01	; 1
    4936:	8c 83       	std	Y+4, r24	; 0x04
    4938:	03 c0       	rjmp	.+6      	; 0x4940 <ShowRunStr+0xac>
		else
			pos2++;
    493a:	8d 81       	ldd	r24, Y+5	; 0x05
    493c:	8f 5f       	subi	r24, 0xFF	; 255
    493e:	8d 83       	std	Y+5, r24	; 0x05

		if (i >= strlen(runstr))
    4940:	8a 81       	ldd	r24, Y+2	; 0x02
    4942:	08 2f       	mov	r16, r24
    4944:	11 27       	eor	r17, r17
    4946:	80 91 54 05 	lds	r24, 0x0554
    494a:	90 91 55 05 	lds	r25, 0x0555
    494e:	0e 94 37 4f 	call	0x9e6e <strlen>
    4952:	08 17       	cp	r16, r24
    4954:	19 07       	cpc	r17, r25
    4956:	18 f0       	brcs	.+6      	; 0x495e <ShowRunStr+0xca>
			pos3++;
    4958:	8e 81       	ldd	r24, Y+6	; 0x06
    495a:	8f 5f       	subi	r24, 0xFF	; 255
    495c:	8e 83       	std	Y+6, r24	; 0x06

		ScanKbd();
    495e:	0e 94 41 2a 	call	0x5482 <ScanKbd>
		key = getcha();
    4962:	0e 94 1d 2b 	call	0x563a <getcha>
    4966:	89 83       	std	Y+1, r24	; 0x01

		if (key)
    4968:	89 81       	ldd	r24, Y+1	; 0x01
    496a:	88 23       	and	r24, r24
    496c:	39 f0       	breq	.+14     	; 0x497c <ShowRunStr+0xe8>
		{
			ClearScreen();
    496e:	0e 94 79 29 	call	0x52f2 <ClearScreen>
			OutData(0x30+key);
    4972:	89 81       	ldd	r24, Y+1	; 0x01
    4974:	80 5d       	subi	r24, 0xD0	; 208
    4976:	0e 94 e7 28 	call	0x51ce <OutData>
			return;
    497a:	04 c0       	rjmp	.+8      	; 0x4984 <ShowRunStr+0xf0>
    497c:	8b 81       	ldd	r24, Y+3	; 0x03
    497e:	8f 5f       	subi	r24, 0xFF	; 255
    4980:	8b 83       	std	Y+3, r24	; 0x03
    4982:	99 cf       	rjmp	.-206    	; 0x48b6 <ShowRunStr+0x22>
    4984:	26 96       	adiw	r28, 0x06	; 6
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	1f 91       	pop	r17
    4996:	0f 91       	pop	r16
    4998:	08 95       	ret

0000499a <StartProgress>:
		}
	}
}

//	запустить прогрессбар на второй строке диспея
void StartProgress(void)
{
    499a:	cf 93       	push	r28
    499c:	df 93       	push	r29
    499e:	cd b7       	in	r28, 0x3d	; 61
    49a0:	de b7       	in	r29, 0x3e	; 62
	HideCaret();
    49a2:	0e 94 91 29 	call	0x5322 <HideCaret>
	progressPos = 0;
    49a6:	10 92 e9 06 	sts	0x06E9, r1
	progress = 1;
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	80 93 fe 06 	sts	0x06FE, r24
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	08 95       	ret

000049b6 <ReduceOhrana>:
}

void ReduceOhrana(void)
{
    49b6:	cf 93       	push	r28
    49b8:	df 93       	push	r29
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
	progress = 0;
    49be:	10 92 fe 06 	sts	0x06FE, r1
	Ohrana_();
    49c2:	0e 94 30 1c 	call	0x3860 <Ohrana_>
	if (eeprom_read_byte_1((unsigned char*)EADR_LAST_MODE) != MD_OHRANA)
    49c6:	82 ee       	ldi	r24, 0xE2	; 226
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    49ce:	84 30       	cpi	r24, 0x04	; 4
    49d0:	29 f0       	breq	.+10     	; 0x49dc <ReduceOhrana+0x26>
		eeprom_write_byte_1((unsigned char*)EADR_LAST_MODE, MD_OHRANA);
    49d2:	64 e0       	ldi	r22, 0x04	; 4
    49d4:	82 ee       	ldi	r24, 0xE2	; 226
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>

	//  задержка перед началом опроса датчиков для того, чтобы все устаканилось
	cli();
    49dc:	f8 94       	cli
	delayms(2000);
    49de:	80 ed       	ldi	r24, 0xD0	; 208
    49e0:	97 e0       	ldi	r25, 0x07	; 7
    49e2:	0e 94 ba 38 	call	0x7174 <delayms>
	sei();
    49e6:	78 94       	sei

	builtinSensorsPollInterval = g_BuiltSensorsPollInterval;
    49e8:	80 91 bf 06 	lds	r24, 0x06BF
    49ec:	80 93 70 07 	sts	0x0770, r24
    49f0:	df 91       	pop	r29
    49f2:	cf 91       	pop	r28
    49f4:	08 95       	ret

000049f6 <Pulse>:
}

void Pulse(void)
{
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
	TELDOWN;
    49fe:	80 91 23 00 	lds	r24, 0x0023
    4a02:	87 7f       	andi	r24, 0xF7	; 247
    4a04:	80 93 23 00 	sts	0x0023, r24
	delayms(40);
    4a08:	88 e2       	ldi	r24, 0x28	; 40
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	0e 94 ba 38 	call	0x7174 <delayms>
	TELUP;
    4a10:	80 91 23 00 	lds	r24, 0x0023
    4a14:	88 60       	ori	r24, 0x08	; 8
    4a16:	80 93 23 00 	sts	0x0023, r24
	delayms(20);
    4a1a:	84 e1       	ldi	r24, 0x14	; 20
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	0e 94 ba 38 	call	0x7174 <delayms>
    4a22:	df 91       	pop	r29
    4a24:	cf 91       	pop	r28
    4a26:	08 95       	ret

00004a28 <DialDigit>:
}

//  набор одной цифры импульсным способом
void DialDigit(unsigned char number)
{
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	23 97       	sbiw	r28, 0x03	; 3
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	f8 94       	cli
    4a36:	de bf       	out	0x3e, r29	; 62
    4a38:	0f be       	out	0x3f, r0	; 63
    4a3a:	cd bf       	out	0x3d, r28	; 61
    4a3c:	89 83       	std	Y+1, r24	; 0x01
	unsigned char count, k;

	if (!number)
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	88 23       	and	r24, r24
    4a42:	19 f4       	brne	.+6      	; 0x4a4a <DialDigit+0x22>
		count = 10;
    4a44:	8a e0       	ldi	r24, 0x0A	; 10
    4a46:	8a 83       	std	Y+2, r24	; 0x02
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <DialDigit+0x26>
	else
		count = number;
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	8a 83       	std	Y+2, r24	; 0x02

	for (k = 0; k < count; k++)
    4a4e:	1b 82       	std	Y+3, r1	; 0x03
    4a50:	9b 81       	ldd	r25, Y+3	; 0x03
    4a52:	8a 81       	ldd	r24, Y+2	; 0x02
    4a54:	98 17       	cp	r25, r24
    4a56:	30 f4       	brcc	.+12     	; 0x4a64 <DialDigit+0x3c>
		Pulse();
    4a58:	0e 94 fb 24 	call	0x49f6 <Pulse>
    4a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5e:	8f 5f       	subi	r24, 0xFF	; 255
    4a60:	8b 83       	std	Y+3, r24	; 0x03
    4a62:	f6 cf       	rjmp	.-20     	; 0x4a50 <DialDigit+0x28>
    4a64:	23 96       	adiw	r28, 0x03	; 3
    4a66:	0f b6       	in	r0, 0x3f	; 63
    4a68:	f8 94       	cli
    4a6a:	de bf       	out	0x3e, r29	; 62
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	cd bf       	out	0x3d, r28	; 61
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	08 95       	ret

00004a76 <SendDTMFDigit>:
}

void SendDTMFDigit(unsigned short voxpos)
{
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	22 97       	sbiw	r28, 0x02	; 2
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	9a 83       	std	Y+2, r25	; 0x02
    4a8c:	89 83       	std	Y+1, r24	; 0x01
//	unsigned char k;

	memset(&g_VoiceQueue, 0, sizeof(g_VoiceQueue));
    4a8e:	40 e4       	ldi	r20, 0x40	; 64
    4a90:	50 e0       	ldi	r21, 0x00	; 0
    4a92:	60 e0       	ldi	r22, 0x00	; 0
    4a94:	70 e0       	ldi	r23, 0x00	; 0
    4a96:	87 e1       	ldi	r24, 0x17	; 23
    4a98:	97 e0       	ldi	r25, 0x07	; 7
    4a9a:	0e 94 11 4f 	call	0x9e22 <memset>

	//for (k = 0; k < 2; k++)
	QueueVoice(voxpos);
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	0e 94 c2 22 	call	0x4584 <QueueVoice>

	PlayQueue(0);
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	0e 94 12 23 	call	0x4624 <PlayQueue>
    4aac:	22 96       	adiw	r28, 0x02	; 2
    4aae:	0f b6       	in	r0, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	de bf       	out	0x3e, r29	; 62
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	cd bf       	out	0x3d, r28	; 61
    4ab8:	df 91       	pop	r29
    4aba:	cf 91       	pop	r28
    4abc:	08 95       	ret

00004abe <AdjustLimits>:
}

//  измеряем напряжение питания в зависимости
void AdjustLimits(void)
{
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	cd b7       	in	r28, 0x3d	; 61
    4ac4:	de b7       	in	r29, 0x3e	; 62
    4ac6:	24 97       	sbiw	r28, 0x04	; 4
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	f8 94       	cli
    4acc:	de bf       	out	0x3e, r29	; 62
    4ace:	0f be       	out	0x3f, r0	; 63
    4ad0:	cd bf       	out	0x3d, r28	; 61
#ifndef PROTEUS
	pwr = a2dConvert10bit(PF3);		//  измеряет Uпит
    4ad2:	83 e0       	ldi	r24, 0x03	; 3
    4ad4:	0e 94 f0 47 	call	0x8fe0 <a2dConvert10bit>
    4ad8:	90 93 ab 06 	sts	0x06AB, r25
    4adc:	80 93 aa 06 	sts	0x06AA, r24
	unorm = pwr / 1.12;
    4ae0:	80 91 aa 06 	lds	r24, 0x06AA
    4ae4:	90 91 ab 06 	lds	r25, 0x06AB
    4ae8:	aa 27       	eor	r26, r26
    4aea:	97 fd       	sbrc	r25, 7
    4aec:	a0 95       	com	r26
    4aee:	ba 2f       	mov	r27, r26
    4af0:	bc 01       	movw	r22, r24
    4af2:	cd 01       	movw	r24, r26
    4af4:	0e 94 13 4c 	call	0x9826 <__floatsisf>
    4af8:	69 83       	std	Y+1, r22	; 0x01
    4afa:	7a 83       	std	Y+2, r23	; 0x02
    4afc:	8b 83       	std	Y+3, r24	; 0x03
    4afe:	9c 83       	std	Y+4, r25	; 0x04
    4b00:	80 91 aa 06 	lds	r24, 0x06AA
    4b04:	90 91 ab 06 	lds	r25, 0x06AB
    4b08:	99 23       	and	r25, r25
    4b0a:	84 f4       	brge	.+32     	; 0x4b2c <AdjustLimits+0x6e>
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	40 e8       	ldi	r20, 0x80	; 128
    4b12:	57 e4       	ldi	r21, 0x47	; 71
    4b14:	69 81       	ldd	r22, Y+1	; 0x01
    4b16:	7a 81       	ldd	r23, Y+2	; 0x02
    4b18:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1c:	0e 94 ac 49 	call	0x9358 <__addsf3>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	89 83       	std	Y+1, r24	; 0x01
    4b26:	9a 83       	std	Y+2, r25	; 0x02
    4b28:	ab 83       	std	Y+3, r26	; 0x03
    4b2a:	bc 83       	std	Y+4, r27	; 0x04
    4b2c:	29 e2       	ldi	r18, 0x29	; 41
    4b2e:	3c e5       	ldi	r19, 0x5C	; 92
    4b30:	4f e8       	ldi	r20, 0x8F	; 143
    4b32:	5f e3       	ldi	r21, 0x3F	; 63
    4b34:	69 81       	ldd	r22, Y+1	; 0x01
    4b36:	7a 81       	ldd	r23, Y+2	; 0x02
    4b38:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3c:	0e 94 2d 4b 	call	0x965a <__divsf3>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	80 93 77 06 	sts	0x0677, r24
    4b48:	90 93 78 06 	sts	0x0678, r25
    4b4c:	a0 93 79 06 	sts	0x0679, r26
    4b50:	b0 93 7a 06 	sts	0x067A, r27
	sensorsTopLimit = 1.05 * unorm;
    4b54:	26 e6       	ldi	r18, 0x66	; 102
    4b56:	36 e6       	ldi	r19, 0x66	; 102
    4b58:	46 e8       	ldi	r20, 0x86	; 134
    4b5a:	5f e3       	ldi	r21, 0x3F	; 63
    4b5c:	60 91 77 06 	lds	r22, 0x0677
    4b60:	70 91 78 06 	lds	r23, 0x0678
    4b64:	80 91 79 06 	lds	r24, 0x0679
    4b68:	90 91 7a 06 	lds	r25, 0x067A
    4b6c:	0e 94 12 4a 	call	0x9424 <__mulsf3>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	80 93 f9 06 	sts	0x06F9, r24
    4b78:	90 93 fa 06 	sts	0x06FA, r25
    4b7c:	a0 93 fb 06 	sts	0x06FB, r26
    4b80:	b0 93 fc 06 	sts	0x06FC, r27
	sensorsBottomLimit = 0.95 * unorm;
    4b84:	23 e3       	ldi	r18, 0x33	; 51
    4b86:	33 e3       	ldi	r19, 0x33	; 51
    4b88:	43 e7       	ldi	r20, 0x73	; 115
    4b8a:	5f e3       	ldi	r21, 0x3F	; 63
    4b8c:	60 91 77 06 	lds	r22, 0x0677
    4b90:	70 91 78 06 	lds	r23, 0x0678
    4b94:	80 91 79 06 	lds	r24, 0x0679
    4b98:	90 91 7a 06 	lds	r25, 0x067A
    4b9c:	0e 94 12 4a 	call	0x9424 <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	80 93 d2 06 	sts	0x06D2, r24
    4ba8:	90 93 d3 06 	sts	0x06D3, r25
    4bac:	a0 93 d4 06 	sts	0x06D4, r26
    4bb0:	b0 93 d5 06 	sts	0x06D5, r27
	sensorsTopLimit2 = sensorsTopLimit;
    4bb4:	60 91 f9 06 	lds	r22, 0x06F9
    4bb8:	70 91 fa 06 	lds	r23, 0x06FA
    4bbc:	80 91 fb 06 	lds	r24, 0x06FB
    4bc0:	90 91 fc 06 	lds	r25, 0x06FC
    4bc4:	0e 94 5e 48 	call	0x90bc <__fixunssfsi>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	90 93 ad 06 	sts	0x06AD, r25
    4bd0:	80 93 ac 06 	sts	0x06AC, r24
	sensorsBottomLimit2 = sensorsBottomLimit;
    4bd4:	60 91 d2 06 	lds	r22, 0x06D2
    4bd8:	70 91 d3 06 	lds	r23, 0x06D3
    4bdc:	80 91 d4 06 	lds	r24, 0x06D4
    4be0:	90 91 d5 06 	lds	r25, 0x06D5
    4be4:	0e 94 5e 48 	call	0x90bc <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	90 93 ed 06 	sts	0x06ED, r25
    4bf0:	80 93 ec 06 	sts	0x06EC, r24
    4bf4:	24 96       	adiw	r28, 0x04	; 4
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	f8 94       	cli
    4bfa:	de bf       	out	0x3e, r29	; 62
    4bfc:	0f be       	out	0x3f, r0	; 63
    4bfe:	cd bf       	out	0x3d, r28	; 61
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	08 95       	ret

00004c06 <AttachSensor>:
#endif
}

//	PASSIV MODULE PART

// подключает очередной датчик номер psvSensor_num к мультиплексору
void AttachSensor(void)
{
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	cd b7       	in	r28, 0x3d	; 61
    4c0c:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(_BV(PC5) | _BV(PC6) | _BV(PC7));	//	вход A мультиплектора
    4c0e:	9f e1       	ldi	r25, 0x1F	; 31
    4c10:	80 91 35 00 	lds	r24, 0x0035
    4c14:	89 23       	and	r24, r25
    4c16:	80 93 35 00 	sts	0x0035, r24

	if (psvSensor_num & 0x01)
    4c1a:	80 91 f2 06 	lds	r24, 0x06F2
    4c1e:	99 27       	eor	r25, r25
    4c20:	81 70       	andi	r24, 0x01	; 1
    4c22:	90 70       	andi	r25, 0x00	; 0
    4c24:	00 97       	sbiw	r24, 0x00	; 0
    4c26:	29 f0       	breq	.+10     	; 0x4c32 <AttachSensor+0x2c>
		PORTC |= _BV(PC5);
    4c28:	80 91 35 00 	lds	r24, 0x0035
    4c2c:	80 62       	ori	r24, 0x20	; 32
    4c2e:	80 93 35 00 	sts	0x0035, r24
	if (psvSensor_num & 0x02)
    4c32:	80 91 f2 06 	lds	r24, 0x06F2
    4c36:	99 27       	eor	r25, r25
    4c38:	82 70       	andi	r24, 0x02	; 2
    4c3a:	90 70       	andi	r25, 0x00	; 0
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	29 f0       	breq	.+10     	; 0x4c4a <AttachSensor+0x44>
		PORTC |= _BV(PC6);
    4c40:	80 91 35 00 	lds	r24, 0x0035
    4c44:	80 64       	ori	r24, 0x40	; 64
    4c46:	80 93 35 00 	sts	0x0035, r24
	if (psvSensor_num & 0x04)
    4c4a:	80 91 f2 06 	lds	r24, 0x06F2
    4c4e:	99 27       	eor	r25, r25
    4c50:	84 70       	andi	r24, 0x04	; 4
    4c52:	90 70       	andi	r25, 0x00	; 0
    4c54:	00 97       	sbiw	r24, 0x00	; 0
    4c56:	29 f0       	breq	.+10     	; 0x4c62 <AttachSensor+0x5c>
		PORTC |= _BV(PC7);
    4c58:	80 91 35 00 	lds	r24, 0x0035
    4c5c:	80 68       	ori	r24, 0x80	; 128
    4c5e:	80 93 35 00 	sts	0x0035, r24
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	08 95       	ret

00004c68 <PollBuiltinSensors2>:
}
/*
void PollBuiltinSensors(void)
{
	unsigned char k;
	unsigned short adc;

	for (k = 0; k < 8; k++)
	{
		psvSensor_num = k;
		AttachSensor();
		//delayms(4);

		adc = a2dConvert10bit(PF2);

		if ((adc < dacThresholdLOW[k]) ||(adc > dacThresholdHIGHT[k]))
		{	//  датчик сработал
			sensors |= _BV(k);
		}
		else
			sensors &= ~_BV(k);
	}
}
*/
//  опрос одного датчика и подготовка к следующему
//  должна вызываться в прерывании 3-4 раза в секунду
void PollBuiltinSensors2(void)
{
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	22 97       	sbiw	r28, 0x02	; 2
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	cd bf       	out	0x3d, r28	; 61
	unsigned short adc;

	AdjustLimits();
    4c7c:	0e 94 5f 25 	call	0x4abe <AdjustLimits>

	if (g_CurDev.ports & (1 << psvSensor_num))
    4c80:	80 91 df 07 	lds	r24, 0x07DF
    4c84:	28 2f       	mov	r18, r24
    4c86:	33 27       	eor	r19, r19
    4c88:	80 91 f2 06 	lds	r24, 0x06F2
    4c8c:	99 27       	eor	r25, r25
    4c8e:	02 c0       	rjmp	.+4      	; 0x4c94 <PollBuiltinSensors2+0x2c>
    4c90:	35 95       	asr	r19
    4c92:	27 95       	ror	r18
    4c94:	8a 95       	dec	r24
    4c96:	e2 f7       	brpl	.-8      	; 0x4c90 <PollBuiltinSensors2+0x28>
    4c98:	c9 01       	movw	r24, r18
    4c9a:	81 70       	andi	r24, 0x01	; 1
    4c9c:	90 70       	andi	r25, 0x00	; 0
    4c9e:	00 97       	sbiw	r24, 0x00	; 0
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <PollBuiltinSensors2+0x3c>
    4ca2:	4a c0       	rjmp	.+148    	; 0x4d38 <PollBuiltinSensors2+0xd0>
	{	//  опрашиваем только разрешенные датчики
#ifndef PROTEUS
		adc = a2dConvert10bit(PF2);
    4ca4:	82 e0       	ldi	r24, 0x02	; 2
    4ca6:	0e 94 f0 47 	call	0x8fe0 <a2dConvert10bit>
    4caa:	9a 83       	std	Y+2, r25	; 0x02
    4cac:	89 83       	std	Y+1, r24	; 0x01

		dacRes[psvSensor_num] = adc;
    4cae:	80 91 f2 06 	lds	r24, 0x06F2
    4cb2:	28 2f       	mov	r18, r24
    4cb4:	33 27       	eor	r19, r19
    4cb6:	c9 01       	movw	r24, r18
    4cb8:	82 0f       	add	r24, r18
    4cba:	93 1f       	adc	r25, r19
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	e2 5a       	subi	r30, 0xA2	; 162
    4cc0:	f8 4f       	sbci	r31, 0xF8	; 248
    4cc2:	89 81       	ldd	r24, Y+1	; 0x01
    4cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc6:	91 83       	std	Z+1, r25	; 0x01
    4cc8:	80 83       	st	Z, r24

		if ((adc < sensorsBottomLimit2
    4cca:	29 81       	ldd	r18, Y+1	; 0x01
    4ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    4cce:	80 91 ec 06 	lds	r24, 0x06EC
    4cd2:	90 91 ed 06 	lds	r25, 0x06ED
    4cd6:	28 17       	cp	r18, r24
    4cd8:	39 07       	cpc	r19, r25
    4cda:	50 f0       	brcs	.+20     	; 0x4cf0 <PollBuiltinSensors2+0x88>
    4cdc:	29 81       	ldd	r18, Y+1	; 0x01
    4cde:	3a 81       	ldd	r19, Y+2	; 0x02
    4ce0:	80 91 ac 06 	lds	r24, 0x06AC
    4ce4:	90 91 ad 06 	lds	r25, 0x06AD
    4ce8:	82 17       	cp	r24, r18
    4cea:	93 07       	cpc	r25, r19
    4cec:	08 f0       	brcs	.+2      	; 0x4cf0 <PollBuiltinSensors2+0x88>
    4cee:	11 c0       	rjmp	.+34     	; 0x4d12 <PollBuiltinSensors2+0xaa>
			//dacThresholdLOW[psvSensor_num]
			) ||
			(adc > sensorsTopLimit2
			//dacThresholdHIGHT[psvSensor_num]
			))
		{	//  датчик сработал
			sensors |= _BV(psvSensor_num);
    4cf0:	80 91 f2 06 	lds	r24, 0x06F2
    4cf4:	28 2f       	mov	r18, r24
    4cf6:	33 27       	eor	r19, r19
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	02 c0       	rjmp	.+4      	; 0x4d02 <PollBuiltinSensors2+0x9a>
    4cfe:	88 0f       	add	r24, r24
    4d00:	99 1f       	adc	r25, r25
    4d02:	2a 95       	dec	r18
    4d04:	e2 f7       	brpl	.-8      	; 0x4cfe <PollBuiltinSensors2+0x96>
    4d06:	20 91 6e 07 	lds	r18, 0x076E
    4d0a:	82 2b       	or	r24, r18
    4d0c:	80 93 6e 07 	sts	0x076E, r24
    4d10:	13 c0       	rjmp	.+38     	; 0x4d38 <PollBuiltinSensors2+0xd0>
		}
		else
			sensors &= ~_BV(psvSensor_num);
    4d12:	80 91 f2 06 	lds	r24, 0x06F2
    4d16:	28 2f       	mov	r18, r24
    4d18:	33 27       	eor	r19, r19
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	02 2e       	mov	r0, r18
    4d20:	02 c0       	rjmp	.+4      	; 0x4d26 <PollBuiltinSensors2+0xbe>
    4d22:	88 0f       	add	r24, r24
    4d24:	99 1f       	adc	r25, r25
    4d26:	0a 94       	dec	r0
    4d28:	e2 f7       	brpl	.-8      	; 0x4d22 <PollBuiltinSensors2+0xba>
    4d2a:	98 2f       	mov	r25, r24
    4d2c:	90 95       	com	r25
    4d2e:	80 91 6e 07 	lds	r24, 0x076E
    4d32:	89 23       	and	r24, r25
    4d34:	80 93 6e 07 	sts	0x076E, r24
#else
		adc = psvSensor_num;
#endif
	}

	if (++psvSensor_num == 8)
    4d38:	80 91 f2 06 	lds	r24, 0x06F2
    4d3c:	8f 5f       	subi	r24, 0xFF	; 255
    4d3e:	80 93 f2 06 	sts	0x06F2, r24
    4d42:	88 30       	cpi	r24, 0x08	; 8
    4d44:	41 f4       	brne	.+16     	; 0x4d56 <PollBuiltinSensors2+0xee>
	{	//  опросили все датчики

		psvSensor_num = 0;
    4d46:	10 92 f2 06 	sts	0x06F2, r1
		g_CurDev.adr = 0;	//  это первое устройство с нулевым адресом
    4d4a:	10 92 dd 07 	sts	0x07DD, r1

		SensorsStateChangeNotify(sensors);
    4d4e:	80 91 6e 07 	lds	r24, 0x076E
    4d52:	0e 94 d1 20 	call	0x41a2 <SensorsStateChangeNotify>
	}

	AttachSensor();
    4d56:	0e 94 03 26 	call	0x4c06 <AttachSensor>
    4d5a:	22 96       	adiw	r28, 0x02	; 2
    4d5c:	0f b6       	in	r0, 0x3f	; 63
    4d5e:	f8 94       	cli
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	0f be       	out	0x3f, r0	; 63
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	df 91       	pop	r29
    4d68:	cf 91       	pop	r28
    4d6a:	08 95       	ret

00004d6c <InitBuilinSensors>:
}

//  инициализация встроенных датчиков
void InitBuilinSensors(void)
{
    4d6c:	cf 93       	push	r28
    4d6e:	df 93       	push	r29
    4d70:	cd b7       	in	r28, 0x3d	; 61
    4d72:	de b7       	in	r29, 0x3e	; 62
	psvSensor_num = 0;
    4d74:	10 92 f2 06 	sts	0x06F2, r1
	AttachSensor();
    4d78:	0e 94 03 26 	call	0x4c06 <AttachSensor>

	sensors = 0;
    4d7c:	10 92 6e 07 	sts	0x076E, r1
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	08 95       	ret

00004d86 <ConvertVirtualToDTMFCode>:
}

unsigned char ConvertVirtualToDTMFCode(unsigned char cod)
{
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	cd b7       	in	r28, 0x3d	; 61
    4d8c:	de b7       	in	r29, 0x3e	; 62
    4d8e:	23 97       	sbiw	r28, 0x03	; 3
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	f8 94       	cli
    4d94:	de bf       	out	0x3e, r29	; 62
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	cd bf       	out	0x3d, r28	; 61
    4d9a:	89 83       	std	Y+1, r24	; 0x01
	if ((cod >= VK_1) && (cod < VK_GUARD))
    4d9c:	89 81       	ldd	r24, Y+1	; 0x01
    4d9e:	81 31       	cpi	r24, 0x11	; 17
    4da0:	48 f0       	brcs	.+18     	; 0x4db4 <ConvertVirtualToDTMFCode+0x2e>
    4da2:	89 81       	ldd	r24, Y+1	; 0x01
    4da4:	84 31       	cpi	r24, 0x14	; 20
    4da6:	30 f4       	brcc	.+12     	; 0x4db4 <ConvertVirtualToDTMFCode+0x2e>
		return cod - 16;
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	80 51       	subi	r24, 0x10	; 16
    4dac:	99 27       	eor	r25, r25
    4dae:	9b 83       	std	Y+3, r25	; 0x03
    4db0:	8a 83       	std	Y+2, r24	; 0x02
    4db2:	34 c0       	rjmp	.+104    	; 0x4e1c <ConvertVirtualToDTMFCode+0x96>
	else
		if ((cod >= VK_4) && (cod <= VK_6))
    4db4:	89 81       	ldd	r24, Y+1	; 0x01
    4db6:	85 30       	cpi	r24, 0x05	; 5
    4db8:	48 f0       	brcs	.+18     	; 0x4dcc <ConvertVirtualToDTMFCode+0x46>
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	88 30       	cpi	r24, 0x08	; 8
    4dbe:	30 f4       	brcc	.+12     	; 0x4dcc <ConvertVirtualToDTMFCode+0x46>
			return cod - 1;
    4dc0:	89 81       	ldd	r24, Y+1	; 0x01
    4dc2:	81 50       	subi	r24, 0x01	; 1
    4dc4:	99 27       	eor	r25, r25
    4dc6:	9b 83       	std	Y+3, r25	; 0x03
    4dc8:	8a 83       	std	Y+2, r24	; 0x02
    4dca:	28 c0       	rjmp	.+80     	; 0x4e1c <ConvertVirtualToDTMFCode+0x96>
		else
			if ((cod >= VK_7) && (cod <= VK_9))
    4dcc:	89 81       	ldd	r24, Y+1	; 0x01
    4dce:	89 30       	cpi	r24, 0x09	; 9
    4dd0:	48 f0       	brcs	.+18     	; 0x4de4 <ConvertVirtualToDTMFCode+0x5e>
    4dd2:	89 81       	ldd	r24, Y+1	; 0x01
    4dd4:	8c 30       	cpi	r24, 0x0C	; 12
    4dd6:	30 f4       	brcc	.+12     	; 0x4de4 <ConvertVirtualToDTMFCode+0x5e>
				return cod - 2;
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	82 50       	subi	r24, 0x02	; 2
    4ddc:	99 27       	eor	r25, r25
    4dde:	9b 83       	std	Y+3, r25	; 0x03
    4de0:	8a 83       	std	Y+2, r24	; 0x02
    4de2:	1c c0       	rjmp	.+56     	; 0x4e1c <ConvertVirtualToDTMFCode+0x96>
			else
				if (VK_CANCEL == cod)
    4de4:	89 81       	ldd	r24, Y+1	; 0x01
    4de6:	8d 30       	cpi	r24, 0x0D	; 13
    4de8:	29 f4       	brne	.+10     	; 0x4df4 <ConvertVirtualToDTMFCode+0x6e>
					return 11;
    4dea:	8b e0       	ldi	r24, 0x0B	; 11
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	9b 83       	std	Y+3, r25	; 0x03
    4df0:	8a 83       	std	Y+2, r24	; 0x02
    4df2:	14 c0       	rjmp	.+40     	; 0x4e1c <ConvertVirtualToDTMFCode+0x96>
				else
					if (VK_SHARP == cod)
    4df4:	89 81       	ldd	r24, Y+1	; 0x01
    4df6:	8f 30       	cpi	r24, 0x0F	; 15
    4df8:	29 f4       	brne	.+10     	; 0x4e04 <ConvertVirtualToDTMFCode+0x7e>
						return 12;
    4dfa:	8c e0       	ldi	r24, 0x0C	; 12
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	9b 83       	std	Y+3, r25	; 0x03
    4e00:	8a 83       	std	Y+2, r24	; 0x02
    4e02:	0c c0       	rjmp	.+24     	; 0x4e1c <ConvertVirtualToDTMFCode+0x96>
					else
						if (VK_0 == cod)
    4e04:	89 81       	ldd	r24, Y+1	; 0x01
    4e06:	8e 30       	cpi	r24, 0x0E	; 14
    4e08:	29 f4       	brne	.+10     	; 0x4e14 <ConvertVirtualToDTMFCode+0x8e>
							return 10;
    4e0a:	8a e0       	ldi	r24, 0x0A	; 10
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	9b 83       	std	Y+3, r25	; 0x03
    4e10:	8a 83       	std	Y+2, r24	; 0x02
    4e12:	04 c0       	rjmp	.+8      	; 0x4e1c <ConvertVirtualToDTMFCode+0x96>
	return 11;
    4e14:	8b e0       	ldi	r24, 0x0B	; 11
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	9b 83       	std	Y+3, r25	; 0x03
    4e1a:	8a 83       	std	Y+2, r24	; 0x02
}
    4e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e20:	23 96       	adiw	r28, 0x03	; 3
    4e22:	0f b6       	in	r0, 0x3f	; 63
    4e24:	f8 94       	cli
    4e26:	de bf       	out	0x3e, r29	; 62
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	cd bf       	out	0x3d, r28	; 61
    4e2c:	df 91       	pop	r29
    4e2e:	cf 91       	pop	r28
    4e30:	08 95       	ret

00004e32 <StartSetOhranaProcess>:

void StartSetOhranaProcess(void)
{
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
	g_ShowTime = FALSE;
    4e3a:	10 92 f7 06 	sts	0x06F7, r1

	ClearSecondLine();
    4e3e:	0e 94 9b 29 	call	0x5336 <ClearSecondLine>
	StartProgress();
    4e42:	0e 94 cd 24 	call	0x499a <StartProgress>
	delaySetOhrana = g_CurDev.ohrTimeout;
    4e46:	80 91 f7 07 	lds	r24, 0x07F7
    4e4a:	90 91 f8 07 	lds	r25, 0x07F8
    4e4e:	90 93 d7 06 	sts	0x06D7, r25
    4e52:	80 93 d6 06 	sts	0x06D6, r24
	if (!delaySetOhrana)
    4e56:	80 91 d6 06 	lds	r24, 0x06D6
    4e5a:	90 91 d7 06 	lds	r25, 0x06D7
    4e5e:	00 97       	sbiw	r24, 0x00	; 0
    4e60:	31 f4       	brne	.+12     	; 0x4e6e <StartSetOhranaProcess+0x3c>
		delaySetOhrana = 4;
    4e62:	84 e0       	ldi	r24, 0x04	; 4
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	90 93 d7 06 	sts	0x06D7, r25
    4e6a:	80 93 d6 06 	sts	0x06D6, r24
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	08 95       	ret

00004e74 <PlayVoice>:
}

void PlayVoice(unsigned short startPage, unsigned char speacAction)
{
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	cd b7       	in	r28, 0x3d	; 61
    4e7a:	de b7       	in	r29, 0x3e	; 62
    4e7c:	23 97       	sbiw	r28, 0x03	; 3
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	f8 94       	cli
    4e82:	de bf       	out	0x3e, r29	; 62
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	cd bf       	out	0x3d, r28	; 61
    4e88:	9a 83       	std	Y+2, r25	; 0x02
    4e8a:	89 83       	std	Y+1, r24	; 0x01
    4e8c:	6b 83       	std	Y+3, r22	; 0x03
	QueueVoice(startPage);
    4e8e:	89 81       	ldd	r24, Y+1	; 0x01
    4e90:	9a 81       	ldd	r25, Y+2	; 0x02
    4e92:	0e 94 c2 22 	call	0x4584 <QueueVoice>
	PlayQueue(speacAction);
    4e96:	8b 81       	ldd	r24, Y+3	; 0x03
    4e98:	0e 94 12 23 	call	0x4624 <PlayQueue>
    4e9c:	23 96       	adiw	r28, 0x03	; 3
    4e9e:	0f b6       	in	r0, 0x3f	; 63
    4ea0:	f8 94       	cli
    4ea2:	de bf       	out	0x3e, r29	; 62
    4ea4:	0f be       	out	0x3f, r0	; 63
    4ea6:	cd bf       	out	0x3d, r28	; 61
    4ea8:	df 91       	pop	r29
    4eaa:	cf 91       	pop	r28
    4eac:	08 95       	ret

00004eae <LineDown>:
}

void LineDown()
{
    4eae:	cf 93       	push	r28
    4eb0:	df 93       	push	r29
    4eb2:	cd b7       	in	r28, 0x3d	; 61
    4eb4:	de b7       	in	r29, 0x3e	; 62
	EIMSK &= ~_BV(INT6);
    4eb6:	80 91 59 00 	lds	r24, 0x0059
    4eba:	8f 7b       	andi	r24, 0xBF	; 191
    4ebc:	80 93 59 00 	sts	0x0059, r24

	TELDOWN;
    4ec0:	80 91 23 00 	lds	r24, 0x0023
    4ec4:	87 7f       	andi	r24, 0xF7	; 247
    4ec6:	80 93 23 00 	sts	0x0023, r24

	delayms(400);
    4eca:	80 e9       	ldi	r24, 0x90	; 144
    4ecc:	91 e0       	ldi	r25, 0x01	; 1
    4ece:	0e 94 ba 38 	call	0x7174 <delayms>

	EIFR &=	_BV(INTF6);
    4ed2:	80 91 58 00 	lds	r24, 0x0058
    4ed6:	80 74       	andi	r24, 0x40	; 64
    4ed8:	80 93 58 00 	sts	0x0058, r24
	EIMSK |= _BV(INT6);
    4edc:	80 91 59 00 	lds	r24, 0x0059
    4ee0:	80 64       	ori	r24, 0x40	; 64
    4ee2:	80 93 59 00 	sts	0x0059, r24
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	08 95       	ret

00004eec <i2c_init>:
/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
    4eec:	cf 93       	push	r28
    4eee:	df 93       	push	r29
    4ef0:	cd b7       	in	r28, 0x3d	; 61
    4ef2:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    4ef4:	10 92 71 00 	sts	0x0071, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    4ef8:	8c e0       	ldi	r24, 0x0C	; 12
    4efa:	80 93 70 00 	sts	0x0070, r24
    4efe:	df 91       	pop	r29
    4f00:	cf 91       	pop	r28
    4f02:	08 95       	ret

00004f04 <i2c_start>:

}/* i2c_init */


/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	24 97       	sbiw	r28, 0x04	; 4
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	89 83       	std	Y+1, r24	; 0x01
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4f1a:	84 ea       	ldi	r24, 0xA4	; 164
    4f1c:	80 93 74 00 	sts	0x0074, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4f20:	80 91 74 00 	lds	r24, 0x0074
    4f24:	88 23       	and	r24, r24
    4f26:	0c f0       	brlt	.+2      	; 0x4f2a <i2c_start+0x26>
    4f28:	fb cf       	rjmp	.-10     	; 0x4f20 <i2c_start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    4f2a:	98 ef       	ldi	r25, 0xF8	; 248
    4f2c:	80 91 71 00 	lds	r24, 0x0071
    4f30:	89 23       	and	r24, r25
    4f32:	8a 83       	std	Y+2, r24	; 0x02
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    4f34:	8a 81       	ldd	r24, Y+2	; 0x02
    4f36:	88 30       	cpi	r24, 0x08	; 8
    4f38:	41 f0       	breq	.+16     	; 0x4f4a <i2c_start+0x46>
    4f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3c:	80 31       	cpi	r24, 0x10	; 16
    4f3e:	29 f0       	breq	.+10     	; 0x4f4a <i2c_start+0x46>
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	9c 83       	std	Y+4, r25	; 0x04
    4f46:	8b 83       	std	Y+3, r24	; 0x03
    4f48:	1d c0       	rjmp	.+58     	; 0x4f84 <i2c_start+0x80>

	// send device address
	TWDR = address;
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01
    4f4c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    4f50:	84 e8       	ldi	r24, 0x84	; 132
    4f52:	80 93 74 00 	sts	0x0074, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    4f56:	80 91 74 00 	lds	r24, 0x0074
    4f5a:	88 23       	and	r24, r24
    4f5c:	0c f0       	brlt	.+2      	; 0x4f60 <i2c_start+0x5c>
    4f5e:	fb cf       	rjmp	.-10     	; 0x4f56 <i2c_start+0x52>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    4f60:	98 ef       	ldi	r25, 0xF8	; 248
    4f62:	80 91 71 00 	lds	r24, 0x0071
    4f66:	89 23       	and	r24, r25
    4f68:	8a 83       	std	Y+2, r24	; 0x02
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    4f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6c:	88 31       	cpi	r24, 0x18	; 24
    4f6e:	41 f0       	breq	.+16     	; 0x4f80 <i2c_start+0x7c>
    4f70:	8a 81       	ldd	r24, Y+2	; 0x02
    4f72:	80 34       	cpi	r24, 0x40	; 64
    4f74:	29 f0       	breq	.+10     	; 0x4f80 <i2c_start+0x7c>
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	9c 83       	std	Y+4, r25	; 0x04
    4f7c:	8b 83       	std	Y+3, r24	; 0x03
    4f7e:	02 c0       	rjmp	.+4      	; 0x4f84 <i2c_start+0x80>

	return 0;
    4f80:	1c 82       	std	Y+4, r1	; 0x04
    4f82:	1b 82       	std	Y+3, r1	; 0x03

}/* i2c_start */
    4f84:	8b 81       	ldd	r24, Y+3	; 0x03
    4f86:	9c 81       	ldd	r25, Y+4	; 0x04
    4f88:	24 96       	adiw	r28, 0x04	; 4
    4f8a:	0f b6       	in	r0, 0x3f	; 63
    4f8c:	f8 94       	cli
    4f8e:	de bf       	out	0x3e, r29	; 62
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	cd bf       	out	0x3d, r28	; 61
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	08 95       	ret

00004f9a <i2c_start_wait>:


/*************************************************************************
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	cd b7       	in	r28, 0x3d	; 61
    4fa0:	de b7       	in	r29, 0x3e	; 62
    4fa2:	22 97       	sbiw	r28, 0x02	; 2
    4fa4:	0f b6       	in	r0, 0x3f	; 63
    4fa6:	f8 94       	cli
    4fa8:	de bf       	out	0x3e, r29	; 62
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	cd bf       	out	0x3d, r28	; 61
    4fae:	89 83       	std	Y+1, r24	; 0x01
    uint8_t   twst;


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4fb0:	84 ea       	ldi	r24, 0xA4	; 164
    4fb2:	80 93 74 00 	sts	0x0074, r24
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    4fb6:	80 91 74 00 	lds	r24, 0x0074
    4fba:	88 23       	and	r24, r24
    4fbc:	0c f0       	brlt	.+2      	; 0x4fc0 <i2c_start_wait+0x26>
    4fbe:	fb cf       	rjmp	.-10     	; 0x4fb6 <i2c_start_wait+0x1c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    4fc0:	98 ef       	ldi	r25, 0xF8	; 248
    4fc2:	80 91 71 00 	lds	r24, 0x0071
    4fc6:	89 23       	and	r24, r25
    4fc8:	8a 83       	std	Y+2, r24	; 0x02
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    4fca:	8a 81       	ldd	r24, Y+2	; 0x02
    4fcc:	88 30       	cpi	r24, 0x08	; 8
    4fce:	21 f0       	breq	.+8      	; 0x4fd8 <i2c_start_wait+0x3e>
    4fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd2:	80 31       	cpi	r24, 0x10	; 16
    4fd4:	09 f0       	breq	.+2      	; 0x4fd8 <i2c_start_wait+0x3e>
    4fd6:	ec cf       	rjmp	.-40     	; 0x4fb0 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
    4fd8:	89 81       	ldd	r24, Y+1	; 0x01
    4fda:	80 93 73 00 	sts	0x0073, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    4fde:	84 e8       	ldi	r24, 0x84	; 132
    4fe0:	80 93 74 00 	sts	0x0074, r24
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    4fe4:	80 91 74 00 	lds	r24, 0x0074
    4fe8:	88 23       	and	r24, r24
    4fea:	0c f0       	brlt	.+2      	; 0x4fee <i2c_start_wait+0x54>
    4fec:	fb cf       	rjmp	.-10     	; 0x4fe4 <i2c_start_wait+0x4a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    4fee:	98 ef       	ldi	r25, 0xF8	; 248
    4ff0:	80 91 71 00 	lds	r24, 0x0071
    4ff4:	89 23       	and	r24, r25
    4ff6:	8a 83       	std	Y+2, r24	; 0x02
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    4ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffa:	80 32       	cpi	r24, 0x20	; 32
    4ffc:	21 f0       	breq	.+8      	; 0x5006 <i2c_start_wait+0x6c>
    4ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    5000:	88 35       	cpi	r24, 0x58	; 88
    5002:	09 f0       	breq	.+2      	; 0x5006 <i2c_start_wait+0x6c>
    5004:	0b c0       	rjmp	.+22     	; 0x501c <i2c_start_wait+0x82>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    5006:	84 e9       	ldi	r24, 0x94	; 148
    5008:	80 93 74 00 	sts	0x0074, r24
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    500c:	80 91 74 00 	lds	r24, 0x0074
    5010:	99 27       	eor	r25, r25
    5012:	80 71       	andi	r24, 0x10	; 16
    5014:	90 70       	andi	r25, 0x00	; 0
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	59 f2       	breq	.-106    	; 0x4fb0 <i2c_start_wait+0x16>
    501a:	f8 cf       	rjmp	.-16     	; 0x500c <i2c_start_wait+0x72>
    501c:	22 96       	adiw	r28, 0x02	; 2
    501e:	0f b6       	in	r0, 0x3f	; 63
    5020:	f8 94       	cli
    5022:	de bf       	out	0x3e, r29	; 62
    5024:	0f be       	out	0x3f, r0	; 63
    5026:	cd bf       	out	0x3d, r28	; 61
    5028:	df 91       	pop	r29
    502a:	cf 91       	pop	r28
    502c:	08 95       	ret

0000502e <i2c_rep_start>:
	        
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */


/*************************************************************************
 Issues a repeated start condition and sends address and transfer direction 

 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
    5036:	21 97       	sbiw	r28, 0x01	; 1
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	0e 94 82 27 	call	0x4f04 <i2c_start>
    504a:	99 27       	eor	r25, r25
    504c:	21 96       	adiw	r28, 0x01	; 1
    504e:	0f b6       	in	r0, 0x3f	; 63
    5050:	f8 94       	cli
    5052:	de bf       	out	0x3e, r29	; 62
    5054:	0f be       	out	0x3f, r0	; 63
    5056:	cd bf       	out	0x3d, r28	; 61
    5058:	df 91       	pop	r29
    505a:	cf 91       	pop	r28
    505c:	08 95       	ret

0000505e <i2c_stop>:

}/* i2c_rep_start */


/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    5066:	84 e9       	ldi	r24, 0x94	; 148
    5068:	80 93 74 00 	sts	0x0074, r24
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	08 95       	ret

00005072 <i2c_write>:
	
	// wait until stop condition is executed and bus released
//	while(TWCR & (1<<TWSTO));

}/* i2c_stop */


/*************************************************************************
  Send one byte to I2C device
  
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    5072:	cf 93       	push	r28
    5074:	df 93       	push	r29
    5076:	cd b7       	in	r28, 0x3d	; 61
    5078:	de b7       	in	r29, 0x3e	; 62
    507a:	24 97       	sbiw	r28, 0x04	; 4
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	f8 94       	cli
    5080:	de bf       	out	0x3e, r29	; 62
    5082:	0f be       	out	0x3f, r0	; 63
    5084:	cd bf       	out	0x3d, r28	; 61
    5086:	89 83       	std	Y+1, r24	; 0x01
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    5088:	89 81       	ldd	r24, Y+1	; 0x01
    508a:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    508e:	84 e8       	ldi	r24, 0x84	; 132
    5090:	80 93 74 00 	sts	0x0074, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    5094:	80 91 74 00 	lds	r24, 0x0074
    5098:	88 23       	and	r24, r24
    509a:	0c f0       	brlt	.+2      	; 0x509e <i2c_write+0x2c>
    509c:	fb cf       	rjmp	.-10     	; 0x5094 <i2c_write+0x22>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    509e:	98 ef       	ldi	r25, 0xF8	; 248
    50a0:	80 91 71 00 	lds	r24, 0x0071
    50a4:	89 23       	and	r24, r25
    50a6:	8a 83       	std	Y+2, r24	; 0x02
	if( twst != TW_MT_DATA_ACK) return 1;
    50a8:	8a 81       	ldd	r24, Y+2	; 0x02
    50aa:	88 32       	cpi	r24, 0x28	; 40
    50ac:	29 f0       	breq	.+10     	; 0x50b8 <i2c_write+0x46>
    50ae:	81 e0       	ldi	r24, 0x01	; 1
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	9c 83       	std	Y+4, r25	; 0x04
    50b4:	8b 83       	std	Y+3, r24	; 0x03
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <i2c_write+0x4a>
	return 0;
    50b8:	1c 82       	std	Y+4, r1	; 0x04
    50ba:	1b 82       	std	Y+3, r1	; 0x03

}/* i2c_write */
    50bc:	8b 81       	ldd	r24, Y+3	; 0x03
    50be:	9c 81       	ldd	r25, Y+4	; 0x04
    50c0:	24 96       	adiw	r28, 0x04	; 4
    50c2:	0f b6       	in	r0, 0x3f	; 63
    50c4:	f8 94       	cli
    50c6:	de bf       	out	0x3e, r29	; 62
    50c8:	0f be       	out	0x3f, r0	; 63
    50ca:	cd bf       	out	0x3d, r28	; 61
    50cc:	df 91       	pop	r29
    50ce:	cf 91       	pop	r28
    50d0:	08 95       	ret

000050d2 <i2c_readAck>:


/*************************************************************************
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
    50d2:	cf 93       	push	r28
    50d4:	df 93       	push	r29
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    50da:	84 ec       	ldi	r24, 0xC4	; 196
    50dc:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWINT)));    
    50e0:	80 91 74 00 	lds	r24, 0x0074
    50e4:	88 23       	and	r24, r24
    50e6:	0c f0       	brlt	.+2      	; 0x50ea <i2c_readAck+0x18>
    50e8:	fb cf       	rjmp	.-10     	; 0x50e0 <i2c_readAck+0xe>

    return TWDR;
    50ea:	80 91 73 00 	lds	r24, 0x0073
    50ee:	99 27       	eor	r25, r25
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	08 95       	ret

000050f6 <i2c_readNak>:

}/* i2c_readAck */


/*************************************************************************
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29
    50fa:	cd b7       	in	r28, 0x3d	; 61
    50fc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    50fe:	84 e8       	ldi	r24, 0x84	; 132
    5100:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWINT)));
    5104:	80 91 74 00 	lds	r24, 0x0074
    5108:	88 23       	and	r24, r24
    510a:	0c f0       	brlt	.+2      	; 0x510e <i2c_readNak+0x18>
    510c:	fb cf       	rjmp	.-10     	; 0x5104 <i2c_readNak+0xe>
	
    return TWDR;
    510e:	80 91 73 00 	lds	r24, 0x0073
    5112:	99 27       	eor	r25, r25
    5114:	df 91       	pop	r29
    5116:	cf 91       	pop	r28
    5118:	08 95       	ret

0000511a <InitTimer0>:
#include "stdafx.h"
#include "tim.h"

void InitTimer0(void)
{
    511a:	cf 93       	push	r28
    511c:	df 93       	push	r29
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = _BV(CS02)|_BV(CS01)|_BV(CS00);        // div 1024
    5122:	87 e0       	ldi	r24, 0x07	; 7
    5124:	80 93 53 00 	sts	0x0053, r24
    TCNT0 = 0;
    5128:	10 92 52 00 	sts	0x0052, r1
    TIMSK = TIMSK | _BV(TOIE0);
    512c:	80 91 57 00 	lds	r24, 0x0057
    5130:	81 60       	ori	r24, 0x01	; 1
    5132:	80 93 57 00 	sts	0x0057, r24
    5136:	df 91       	pop	r29
    5138:	cf 91       	pop	r28
    513a:	08 95       	ret

0000513c <InitTimer3>:
}

void InitTimer3(void)
{
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	cd b7       	in	r28, 0x3d	; 61
    5142:	de b7       	in	r29, 0x3e	; 62
	TCCR3B = _BV(CS02) | _BV(CS00);		//  делитель 1024
    5144:	85 e0       	ldi	r24, 0x05	; 5
    5146:	80 93 8a 00 	sts	0x008A, r24

	//  частота 16000000 делится на 1024, получается 15625
	//  15625 тиков в секунду
	//  значит счетчик должен досчитать от 1 до 15625 и будет вам секунда
	//  счетчик инициализируется значением 65536 - 15625 = 49911

//	OCR3A = TIMER3_SECOND_VALUE + TIMER3_200MS_VALUE;
	TCNT3 = TIMER3_SECOND_VALUE;//0x85ED;
    514a:	87 ef       	ldi	r24, 0xF7	; 247
    514c:	92 ec       	ldi	r25, 0xC2	; 194
    514e:	90 93 89 00 	sts	0x0089, r25
    5152:	80 93 88 00 	sts	0x0088, r24
	//TCNT3 = TIMER3_MAX_INTERVAL;

    ETIMSK = ETIMSK | _BV(TOIE3)/* | _BV(OCIE3A)*/;
    5156:	80 91 7d 00 	lds	r24, 0x007D
    515a:	84 60       	ori	r24, 0x04	; 4
    515c:	80 93 7d 00 	sts	0x007D, r24
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	08 95       	ret

00005166 <InitPWM>:
}

void InitPWM(void)
{
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
	// 8 бит ШИМ, используется COM1B
	TCCR1A = _BV(COM1B0) | _BV(COM1B1) | _BV(WGM10);
    516e:	81 e3       	ldi	r24, 0x31	; 49
    5170:	80 93 4f 00 	sts	0x004F, r24
	TCNT1 = 0;
    5174:	10 92 4d 00 	sts	0x004D, r1
    5178:	10 92 4c 00 	sts	0x004C, r1
	TIFR = TIFR | _BV(TOV1); 			// сброс флага превышения  счётчика 1
    517c:	80 91 56 00 	lds	r24, 0x0056
    5180:	84 60       	ori	r24, 0x04	; 4
    5182:	80 93 56 00 	sts	0x0056, r24
	TCCR1B = _BV(CS11) | _BV(CS11);		// коэф. Пересчёта счётчика 1 = 1
    5186:	82 e0       	ldi	r24, 0x02	; 2
    5188:	80 93 4e 00 	sts	0x004E, r24
	OCR1B = 0x00;				// обнуление выходного регистра сравнения B
    518c:	10 92 49 00 	sts	0x0049, r1
    5190:	10 92 48 00 	sts	0x0048, r1
	TIMSK = TIMSK | _BV(TOIE1);
    5194:	80 91 57 00 	lds	r24, 0x0057
    5198:	84 60       	ori	r24, 0x04	; 4
    519a:	80 93 57 00 	sts	0x0057, r24
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	08 95       	ret

000051a4 <Strobe>:

unsigned char g_CaretPos = 0;

void Strobe()
{
    51a4:	cf 93       	push	r28
    51a6:	df 93       	push	r29
    51a8:	cd b7       	in	r28, 0x3d	; 61
    51aa:	de b7       	in	r29, 0x3e	; 62
	PORTG = PORTG | SET_E;
    51ac:	80 91 65 00 	lds	r24, 0x0065
    51b0:	82 60       	ori	r24, 0x02	; 2
    51b2:	80 93 65 00 	sts	0x0065, r24
	delay_loop_2(1000);
    51b6:	88 ee       	ldi	r24, 0xE8	; 232
    51b8:	93 e0       	ldi	r25, 0x03	; 3
    51ba:	0e 94 ed 38 	call	0x71da <delay_loop_2>
	PORTG = PORTG & CLEAR_E;
    51be:	80 91 65 00 	lds	r24, 0x0065
    51c2:	8d 7f       	andi	r24, 0xFD	; 253
    51c4:	80 93 65 00 	sts	0x0065, r24
    51c8:	df 91       	pop	r29
    51ca:	cf 91       	pop	r28
    51cc:	08 95       	ret

000051ce <OutData>:
}

void OutData(unsigned char b)
{
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	21 97       	sbiw	r28, 0x01	; 1
    51d8:	0f b6       	in	r0, 0x3f	; 63
    51da:	f8 94       	cli
    51dc:	de bf       	out	0x3e, r29	; 62
    51de:	0f be       	out	0x3f, r0	; 63
    51e0:	cd bf       	out	0x3d, r28	; 61
    51e2:	89 83       	std	Y+1, r24	; 0x01
	PORTG = PORTG | SET_RS;
    51e4:	80 91 65 00 	lds	r24, 0x0065
    51e8:	84 60       	ori	r24, 0x04	; 4
    51ea:	80 93 65 00 	sts	0x0065, r24
	PORTA = b;
    51ee:	89 81       	ldd	r24, Y+1	; 0x01
    51f0:	80 93 3b 00 	sts	0x003B, r24
	Strobe();
    51f4:	0e 94 d2 28 	call	0x51a4 <Strobe>
    51f8:	21 96       	adiw	r28, 0x01	; 1
    51fa:	0f b6       	in	r0, 0x3f	; 63
    51fc:	f8 94       	cli
    51fe:	de bf       	out	0x3e, r29	; 62
    5200:	0f be       	out	0x3f, r0	; 63
    5202:	cd bf       	out	0x3d, r28	; 61
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	08 95       	ret

0000520a <OutCmd>:
	//PORTA = 0xFF;
}

void OutCmd(unsigned char b)
{
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	21 97       	sbiw	r28, 0x01	; 1
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	f8 94       	cli
    5218:	de bf       	out	0x3e, r29	; 62
    521a:	0f be       	out	0x3f, r0	; 63
    521c:	cd bf       	out	0x3d, r28	; 61
    521e:	89 83       	std	Y+1, r24	; 0x01
	PORTG = PORTG & CLEAR_RS;
    5220:	9b ef       	ldi	r25, 0xFB	; 251
    5222:	80 91 65 00 	lds	r24, 0x0065
    5226:	89 23       	and	r24, r25
    5228:	80 93 65 00 	sts	0x0065, r24
	PORTA = b;
    522c:	89 81       	ldd	r24, Y+1	; 0x01
    522e:	80 93 3b 00 	sts	0x003B, r24
	Strobe();
    5232:	0e 94 d2 28 	call	0x51a4 <Strobe>
    5236:	21 96       	adiw	r28, 0x01	; 1
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	f8 94       	cli
    523c:	de bf       	out	0x3e, r29	; 62
    523e:	0f be       	out	0x3f, r0	; 63
    5240:	cd bf       	out	0x3d, r28	; 61
    5242:	df 91       	pop	r29
    5244:	cf 91       	pop	r28
    5246:	08 95       	ret

00005248 <OutStr>:
	//PORTA = 0xFF;
}

void OutStr(unsigned char* sz)
{
    5248:	cf 93       	push	r28
    524a:	df 93       	push	r29
    524c:	cd b7       	in	r28, 0x3d	; 61
    524e:	de b7       	in	r29, 0x3e	; 62
    5250:	22 97       	sbiw	r28, 0x02	; 2
    5252:	0f b6       	in	r0, 0x3f	; 63
    5254:	f8 94       	cli
    5256:	de bf       	out	0x3e, r29	; 62
    5258:	0f be       	out	0x3f, r0	; 63
    525a:	cd bf       	out	0x3d, r28	; 61
    525c:	9a 83       	std	Y+2, r25	; 0x02
    525e:	89 83       	std	Y+1, r24	; 0x01
	while(*sz)
    5260:	e9 81       	ldd	r30, Y+1	; 0x01
    5262:	fa 81       	ldd	r31, Y+2	; 0x02
    5264:	80 81       	ld	r24, Z
    5266:	88 23       	and	r24, r24
    5268:	49 f0       	breq	.+18     	; 0x527c <OutStr+0x34>
		OutData(*(sz++));
    526a:	e9 81       	ldd	r30, Y+1	; 0x01
    526c:	fa 81       	ldd	r31, Y+2	; 0x02
    526e:	80 81       	ld	r24, Z
    5270:	31 96       	adiw	r30, 0x01	; 1
    5272:	fa 83       	std	Y+2, r31	; 0x02
    5274:	e9 83       	std	Y+1, r30	; 0x01
    5276:	0e 94 e7 28 	call	0x51ce <OutData>
    527a:	f2 cf       	rjmp	.-28     	; 0x5260 <OutStr+0x18>
    527c:	22 96       	adiw	r28, 0x02	; 2
    527e:	0f b6       	in	r0, 0x3f	; 63
    5280:	f8 94       	cli
    5282:	de bf       	out	0x3e, r29	; 62
    5284:	0f be       	out	0x3f, r0	; 63
    5286:	cd bf       	out	0x3d, r28	; 61
    5288:	df 91       	pop	r29
    528a:	cf 91       	pop	r28
    528c:	08 95       	ret

0000528e <SetCaret>:
}

void SetCaret(unsigned char pos)
{
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    5292:	cd b7       	in	r28, 0x3d	; 61
    5294:	de b7       	in	r29, 0x3e	; 62
    5296:	21 97       	sbiw	r28, 0x01	; 1
    5298:	0f b6       	in	r0, 0x3f	; 63
    529a:	f8 94       	cli
    529c:	de bf       	out	0x3e, r29	; 62
    529e:	0f be       	out	0x3f, r0	; 63
    52a0:	cd bf       	out	0x3d, r28	; 61
    52a2:	89 83       	std	Y+1, r24	; 0x01
	//  1 line - address from 0x00 to 0x27
	//	2 line - address from 0x40 to 0x67
	OutCmd(pos | 0x80);		//  set DRAM Adress
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	80 68       	ori	r24, 0x80	; 128
    52a8:	0e 94 05 29 	call	0x520a <OutCmd>
	g_CaretPos = pos;
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	80 93 43 06 	sts	0x0643, r24
    52b2:	21 96       	adiw	r28, 0x01	; 1
    52b4:	0f b6       	in	r0, 0x3f	; 63
    52b6:	f8 94       	cli
    52b8:	de bf       	out	0x3e, r29	; 62
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	cd bf       	out	0x3d, r28	; 61
    52be:	df 91       	pop	r29
    52c0:	cf 91       	pop	r28
    52c2:	08 95       	ret

000052c4 <GetCaretPos>:
}

unsigned char GetCaretPos(void)
{
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
    52c8:	cd b7       	in	r28, 0x3d	; 61
    52ca:	de b7       	in	r29, 0x3e	; 62
	return g_CaretPos;
    52cc:	80 91 43 06 	lds	r24, 0x0643
    52d0:	99 27       	eor	r25, r25
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	08 95       	ret

000052d8 <InitLCD>:
}

void InitLCD()
{
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
	//OutCmd(0x06);
	OutCmd(0x3C);
    52e0:	8c e3       	ldi	r24, 0x3C	; 60
    52e2:	0e 94 05 29 	call	0x520a <OutCmd>
	OutCmd(0x0C);
    52e6:	8c e0       	ldi	r24, 0x0C	; 12
    52e8:	0e 94 05 29 	call	0x520a <OutCmd>
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	08 95       	ret

000052f2 <ClearScreen>:
}
/*
void ClearScreen2()
{
	SetCaret(0x00);
	OutStr(EMPTY_LCD_STRING);
	SetCaret(0x40);
	OutStr(EMPTY_LCD_STRING);
	SetCaret(0x00);
}
*/
void ClearScreen(void)
{
    52f2:	cf 93       	push	r28
    52f4:	df 93       	push	r29
    52f6:	cd b7       	in	r28, 0x3d	; 61
    52f8:	de b7       	in	r29, 0x3e	; 62
	OutCmd(1);
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	0e 94 05 29 	call	0x520a <OutCmd>
	//OutCmd(3);
	delayms(4);				//  без этой паузы не работает
    5300:	84 e0       	ldi	r24, 0x04	; 4
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	0e 94 ba 38 	call	0x7174 <delayms>
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	08 95       	ret

0000530e <ShowCaret>:
	//SetCaret(0x00);
}

void ShowCaret()
{
    530e:	cf 93       	push	r28
    5310:	df 93       	push	r29
    5312:	cd b7       	in	r28, 0x3d	; 61
    5314:	de b7       	in	r29, 0x3e	; 62
	OutCmd(0x0E);
    5316:	8e e0       	ldi	r24, 0x0E	; 14
    5318:	0e 94 05 29 	call	0x520a <OutCmd>
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	08 95       	ret

00005322 <HideCaret>:
}

void HideCaret()
{
    5322:	cf 93       	push	r28
    5324:	df 93       	push	r29
    5326:	cd b7       	in	r28, 0x3d	; 61
    5328:	de b7       	in	r29, 0x3e	; 62
	OutCmd(0x0C);
    532a:	8c e0       	ldi	r24, 0x0C	; 12
    532c:	0e 94 05 29 	call	0x520a <OutCmd>
    5330:	df 91       	pop	r29
    5332:	cf 91       	pop	r28
    5334:	08 95       	ret

00005336 <ClearSecondLine>:
}

void ClearSecondLine()
{
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	cd b7       	in	r28, 0x3d	; 61
    533c:	de b7       	in	r29, 0x3e	; 62
    533e:	21 97       	sbiw	r28, 0x01	; 1
    5340:	0f b6       	in	r0, 0x3f	; 63
    5342:	f8 94       	cli
    5344:	de bf       	out	0x3e, r29	; 62
    5346:	0f be       	out	0x3f, r0	; 63
    5348:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;

	SetCaret(LINE_2_START_POS);
    534a:	80 e4       	ldi	r24, 0x40	; 64
    534c:	0e 94 47 29 	call	0x528e <SetCaret>

	for (k = 0; k < MAX_INPUT; k++)
    5350:	19 82       	std	Y+1, r1	; 0x01
    5352:	89 81       	ldd	r24, Y+1	; 0x01
    5354:	80 31       	cpi	r24, 0x10	; 16
    5356:	38 f4       	brcc	.+14     	; 0x5366 <ClearSecondLine+0x30>
		OutData(0x20);
    5358:	80 e2       	ldi	r24, 0x20	; 32
    535a:	0e 94 e7 28 	call	0x51ce <OutData>
    535e:	89 81       	ldd	r24, Y+1	; 0x01
    5360:	8f 5f       	subi	r24, 0xFF	; 255
    5362:	89 83       	std	Y+1, r24	; 0x01
    5364:	f6 cf       	rjmp	.-20     	; 0x5352 <ClearSecondLine+0x1c>

	SetCaret(LINE_2_START_POS);
    5366:	80 e4       	ldi	r24, 0x40	; 64
    5368:	0e 94 47 29 	call	0x528e <SetCaret>
    536c:	21 96       	adiw	r28, 0x01	; 1
    536e:	0f b6       	in	r0, 0x3f	; 63
    5370:	f8 94       	cli
    5372:	de bf       	out	0x3e, r29	; 62
    5374:	0f be       	out	0x3f, r0	; 63
    5376:	cd bf       	out	0x3d, r28	; 61
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	08 95       	ret

0000537e <ReadByte>:
}

unsigned char ReadByte(unsigned char adr)
{
    537e:	cf 93       	push	r28
    5380:	df 93       	push	r29
    5382:	cd b7       	in	r28, 0x3d	; 61
    5384:	de b7       	in	r29, 0x3e	; 62
    5386:	22 97       	sbiw	r28, 0x02	; 2
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	89 83       	std	Y+1, r24	; 0x01
	unsigned char res;

	OutCmd(adr | 0x80);
    5394:	89 81       	ldd	r24, Y+1	; 0x01
    5396:	80 68       	ori	r24, 0x80	; 128
    5398:	0e 94 05 29 	call	0x520a <OutCmd>

	DDRA = 0;
    539c:	10 92 3a 00 	sts	0x003A, r1
	PORTA = 0;
    53a0:	10 92 3b 00 	sts	0x003B, r1

	PORTG = PORTG | SET_RS;
    53a4:	80 91 65 00 	lds	r24, 0x0065
    53a8:	84 60       	ori	r24, 0x04	; 4
    53aa:	80 93 65 00 	sts	0x0065, r24
	PORTG = PORTG | SET_RW;
    53ae:	80 91 65 00 	lds	r24, 0x0065
    53b2:	81 60       	ori	r24, 0x01	; 1
    53b4:	80 93 65 00 	sts	0x0065, r24
	delay_loop_2(1000);
    53b8:	88 ee       	ldi	r24, 0xE8	; 232
    53ba:	93 e0       	ldi	r25, 0x03	; 3
    53bc:	0e 94 ed 38 	call	0x71da <delay_loop_2>
	PORTG = PORTG | SET_E;
    53c0:	80 91 65 00 	lds	r24, 0x0065
    53c4:	82 60       	ori	r24, 0x02	; 2
    53c6:	80 93 65 00 	sts	0x0065, r24
	delay_loop_2(1000);
    53ca:	88 ee       	ldi	r24, 0xE8	; 232
    53cc:	93 e0       	ldi	r25, 0x03	; 3
    53ce:	0e 94 ed 38 	call	0x71da <delay_loop_2>

	res = PINA;
    53d2:	80 91 39 00 	lds	r24, 0x0039
    53d6:	8a 83       	std	Y+2, r24	; 0x02

	PORTG = PORTG & CLEAR_E;
    53d8:	80 91 65 00 	lds	r24, 0x0065
    53dc:	8d 7f       	andi	r24, 0xFD	; 253
    53de:	80 93 65 00 	sts	0x0065, r24
	PORTG = PORTG & CLEAR_RW;
    53e2:	80 91 65 00 	lds	r24, 0x0065
    53e6:	8e 7f       	andi	r24, 0xFE	; 254
    53e8:	80 93 65 00 	sts	0x0065, r24

	DDRA = 0xFF;
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	80 93 3a 00 	sts	0x003A, r24
	PORTA = 0xFF;
    53f2:	8f ef       	ldi	r24, 0xFF	; 255
    53f4:	80 93 3b 00 	sts	0x003B, r24

	return res;
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	99 27       	eor	r25, r25
    53fc:	22 96       	adiw	r28, 0x02	; 2
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	f8 94       	cli
    5402:	de bf       	out	0x3e, r29	; 62
    5404:	0f be       	out	0x3f, r0	; 63
    5406:	cd bf       	out	0x3d, r28	; 61
    5408:	df 91       	pop	r29
    540a:	cf 91       	pop	r28
    540c:	08 95       	ret

0000540e <ReadStrFromScreen>:
}

void ReadStrFromScreen(unsigned char* sz)
{
    540e:	cf 93       	push	r28
    5410:	df 93       	push	r29
    5412:	cd b7       	in	r28, 0x3d	; 61
    5414:	de b7       	in	r29, 0x3e	; 62
    5416:	23 97       	sbiw	r28, 0x03	; 3
    5418:	0f b6       	in	r0, 0x3f	; 63
    541a:	f8 94       	cli
    541c:	de bf       	out	0x3e, r29	; 62
    541e:	0f be       	out	0x3f, r0	; 63
    5420:	cd bf       	out	0x3d, r28	; 61
    5422:	9a 83       	std	Y+2, r25	; 0x02
    5424:	89 83       	std	Y+1, r24	; 0x01
	unsigned char k;

	for (k = LINE_2_START_POS; k < LINE_2_START_POS + LINE_LEN; k++)
    5426:	80 e4       	ldi	r24, 0x40	; 64
    5428:	8b 83       	std	Y+3, r24	; 0x03
    542a:	8b 81       	ldd	r24, Y+3	; 0x03
    542c:	80 35       	cpi	r24, 0x50	; 80
    542e:	78 f4       	brcc	.+30     	; 0x544e <ReadStrFromScreen+0x40>
		*sz++ = ReadByte(k);
    5430:	8b 81       	ldd	r24, Y+3	; 0x03
    5432:	0e 94 bf 29 	call	0x537e <ReadByte>
    5436:	28 2f       	mov	r18, r24
    5438:	89 81       	ldd	r24, Y+1	; 0x01
    543a:	9a 81       	ldd	r25, Y+2	; 0x02
    543c:	fc 01       	movw	r30, r24
    543e:	20 83       	st	Z, r18
    5440:	01 96       	adiw	r24, 0x01	; 1
    5442:	9a 83       	std	Y+2, r25	; 0x02
    5444:	89 83       	std	Y+1, r24	; 0x01
    5446:	8b 81       	ldd	r24, Y+3	; 0x03
    5448:	8f 5f       	subi	r24, 0xFF	; 255
    544a:	8b 83       	std	Y+3, r24	; 0x03
    544c:	ee cf       	rjmp	.-36     	; 0x542a <ReadStrFromScreen+0x1c>
    544e:	23 96       	adiw	r28, 0x03	; 3
    5450:	0f b6       	in	r0, 0x3f	; 63
    5452:	f8 94       	cli
    5454:	de bf       	out	0x3e, r29	; 62
    5456:	0f be       	out	0x3f, r0	; 63
    5458:	cd bf       	out	0x3d, r28	; 61
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	08 95       	ret

00005460 <InitKbd>:

//  возвращает последний введенный символ или 0, если буфер клавы пуст

void InitKbd(void)
{
    5460:	cf 93       	push	r28
    5462:	df 93       	push	r29
    5464:	cd b7       	in	r28, 0x3d	; 61
    5466:	de b7       	in	r29, 0x3e	; 62
	keyHead = -1; 	//  буфер пустой
    5468:	8f ef       	ldi	r24, 0xFF	; 255
    546a:	9f ef       	ldi	r25, 0xFF	; 255
    546c:	90 93 78 07 	sts	0x0778, r25
    5470:	80 93 77 07 	sts	0x0777, r24
	keyTail = 0;		//  следующая позиция для вставки очередной клавиши
    5474:	10 92 76 07 	sts	0x0776, r1
    5478:	10 92 75 07 	sts	0x0775, r1
    547c:	df 91       	pop	r29
    547e:	cf 91       	pop	r28
    5480:	08 95       	ret

00005482 <ScanKbd>:
}

//  сканирует клавиатуру (вызывается из главного цикла)
unsigned char ScanKbd(void)
{
    5482:	cf 93       	push	r28
    5484:	df 93       	push	r29
    5486:	cd b7       	in	r28, 0x3d	; 61
    5488:	de b7       	in	r29, 0x3e	; 62
    548a:	25 97       	sbiw	r28, 0x05	; 5
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	f8 94       	cli
    5490:	de bf       	out	0x3e, r29	; 62
    5492:	0f be       	out	0x3f, r0	; 63
    5494:	cd bf       	out	0x3d, r28	; 61
	unsigned char row,col,tmp1,fefe;
	unsigned char res = 0;
    5496:	1d 82       	std	Y+5, r1	; 0x05

	for (row=0; row < 4; row++)
    5498:	19 82       	std	Y+1, r1	; 0x01
    549a:	89 81       	ldd	r24, Y+1	; 0x01
    549c:	84 30       	cpi	r24, 0x04	; 4
    549e:	08 f0       	brcs	.+2      	; 0x54a2 <ScanKbd+0x20>
    54a0:	6d c0       	rjmp	.+218    	; 0x557c <ScanKbd+0xfa>
    {
		PORTA = 1 << row;		//  подали единицу на вертикальный ряд
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	28 2f       	mov	r18, r24
    54a6:	33 27       	eor	r19, r19
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	02 2e       	mov	r0, r18
    54ae:	02 c0       	rjmp	.+4      	; 0x54b4 <ScanKbd+0x32>
    54b0:	88 0f       	add	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	0a 94       	dec	r0
    54b6:	e2 f7       	brpl	.-8      	; 0x54b0 <ScanKbd+0x2e>
    54b8:	80 93 3b 00 	sts	0x003B, r24

		for (tmp1 = 0; tmp1 < 100; ++tmp1);
    54bc:	1b 82       	std	Y+3, r1	; 0x03
    54be:	8b 81       	ldd	r24, Y+3	; 0x03
    54c0:	84 36       	cpi	r24, 0x64	; 100
    54c2:	20 f4       	brcc	.+8      	; 0x54cc <ScanKbd+0x4a>
    54c4:	8b 81       	ldd	r24, Y+3	; 0x03
    54c6:	8f 5f       	subi	r24, 0xFF	; 255
    54c8:	8b 83       	std	Y+3, r24	; 0x03
    54ca:	f9 cf       	rjmp	.-14     	; 0x54be <ScanKbd+0x3c>

      	tmp1 = PINC;
    54cc:	80 91 33 00 	lds	r24, 0x0033
    54d0:	8b 83       	std	Y+3, r24	; 0x03


//		if (PIND != 0x1B)			посадили на PD7 - сгорела
		if (PINB & 1)
    54d2:	80 91 36 00 	lds	r24, 0x0036
    54d6:	99 27       	eor	r25, r25
    54d8:	81 70       	andi	r24, 0x01	; 1
    54da:	90 70       	andi	r25, 0x00	; 0
    54dc:	00 97       	sbiw	r24, 0x00	; 0
    54de:	21 f0       	breq	.+8      	; 0x54e8 <ScanKbd+0x66>
			tmp1 |= _BV(PC4);
    54e0:	8b 81       	ldd	r24, Y+3	; 0x03
    54e2:	80 61       	ori	r24, 0x10	; 16
    54e4:	8b 83       	std	Y+3, r24	; 0x03
    54e6:	03 c0       	rjmp	.+6      	; 0x54ee <ScanKbd+0x6c>
		else
			tmp1 &= ~_BV(PC4);
    54e8:	8b 81       	ldd	r24, Y+3	; 0x03
    54ea:	8f 7e       	andi	r24, 0xEF	; 239
    54ec:	8b 83       	std	Y+3, r24	; 0x03

	//	delayms(10);

		//if (tmp1 == PINC)
	      	// See if any column is active (low):
		    for (col=0; col<5; col++)
    54ee:	1a 82       	std	Y+2, r1	; 0x02
    54f0:	8a 81       	ldd	r24, Y+2	; 0x02
    54f2:	85 30       	cpi	r24, 0x05	; 5
    54f4:	08 f0       	brcs	.+2      	; 0x54f8 <ScanKbd+0x76>
    54f6:	3e c0       	rjmp	.+124    	; 0x5574 <ScanKbd+0xf2>
			{
				fefe = col*4 + row;		//  fefe - номер клавиши
    54f8:	8a 81       	ldd	r24, Y+2	; 0x02
    54fa:	99 27       	eor	r25, r25
    54fc:	88 0f       	add	r24, r24
    54fe:	99 1f       	adc	r25, r25
    5500:	88 0f       	add	r24, r24
    5502:	99 1f       	adc	r25, r25
    5504:	29 81       	ldd	r18, Y+1	; 0x01
    5506:	82 0f       	add	r24, r18
    5508:	8c 83       	std	Y+4, r24	; 0x04
		    	if ((tmp1 & (1<<col)) == 0)//== (1 << col))
    550a:	8b 81       	ldd	r24, Y+3	; 0x03
    550c:	28 2f       	mov	r18, r24
    550e:	33 27       	eor	r19, r19
    5510:	8a 81       	ldd	r24, Y+2	; 0x02
    5512:	99 27       	eor	r25, r25
    5514:	02 c0       	rjmp	.+4      	; 0x551a <ScanKbd+0x98>
    5516:	35 95       	asr	r19
    5518:	27 95       	ror	r18
    551a:	8a 95       	dec	r24
    551c:	e2 f7       	brpl	.-8      	; 0x5516 <ScanKbd+0x94>
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	82 27       	eor	r24, r18
    5524:	93 27       	eor	r25, r19
    5526:	81 70       	andi	r24, 0x01	; 1
    5528:	90 70       	andi	r25, 0x00	; 0
    552a:	00 97       	sbiw	r24, 0x00	; 0
    552c:	69 f0       	breq	.+26     	; 0x5548 <ScanKbd+0xc6>
		        {
					if (keys_state[fefe])
    552e:	8c 81       	ldd	r24, Y+4	; 0x04
    5530:	99 27       	eor	r25, r25
    5532:	fc 01       	movw	r30, r24
    5534:	ec 5b       	subi	r30, 0xBC	; 188
    5536:	f9 4f       	sbci	r31, 0xF9	; 249
    5538:	80 81       	ld	r24, Z
    553a:	88 23       	and	r24, r24
    553c:	29 f0       	breq	.+10     	; 0x5548 <ScanKbd+0xc6>
					{
					//  если при предыдущем проходе была нажата, а сейчас отпущена
						AddKey(fefe);
    553e:	8c 81       	ldd	r24, Y+4	; 0x04
    5540:	0e 94 c9 2a 	call	0x5592 <AddKey>
						res = 1;
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	8d 83       	std	Y+5, r24	; 0x05
					}
		        }

		  	    keys_state[fefe] = tmp1 & (1<<col);
    5548:	8c 81       	ldd	r24, Y+4	; 0x04
    554a:	99 27       	eor	r25, r25
    554c:	fc 01       	movw	r30, r24
    554e:	ec 5b       	subi	r30, 0xBC	; 188
    5550:	f9 4f       	sbci	r31, 0xF9	; 249
    5552:	8a 81       	ldd	r24, Y+2	; 0x02
    5554:	28 2f       	mov	r18, r24
    5556:	33 27       	eor	r19, r19
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	02 c0       	rjmp	.+4      	; 0x5562 <ScanKbd+0xe0>
    555e:	88 0f       	add	r24, r24
    5560:	99 1f       	adc	r25, r25
    5562:	2a 95       	dec	r18
    5564:	e2 f7       	brpl	.-8      	; 0x555e <ScanKbd+0xdc>
    5566:	2b 81       	ldd	r18, Y+3	; 0x03
    5568:	82 23       	and	r24, r18
    556a:	80 83       	st	Z, r24
    556c:	8a 81       	ldd	r24, Y+2	; 0x02
    556e:	8f 5f       	subi	r24, 0xFF	; 255
    5570:	8a 83       	std	Y+2, r24	; 0x02
    5572:	be cf       	rjmp	.-132    	; 0x54f0 <ScanKbd+0x6e>
    5574:	89 81       	ldd	r24, Y+1	; 0x01
    5576:	8f 5f       	subi	r24, 0xFF	; 255
    5578:	89 83       	std	Y+1, r24	; 0x01
    557a:	8f cf       	rjmp	.-226    	; 0x549a <ScanKbd+0x18>
		    }
	}

	return res;
    557c:	8d 81       	ldd	r24, Y+5	; 0x05
    557e:	99 27       	eor	r25, r25
    5580:	25 96       	adiw	r28, 0x05	; 5
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	08 95       	ret

00005592 <AddKey>:
}

//  добавляет в буфер клавиатуры запись о нажатии клавиши
void AddKey(unsigned char key)
{
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	cd b7       	in	r28, 0x3d	; 61
    5598:	de b7       	in	r29, 0x3e	; 62
    559a:	23 97       	sbiw	r28, 0x03	; 3
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	89 83       	std	Y+1, r24	; 0x01
	unsigned char keyTail_ = keyTail;
    55a8:	80 91 75 07 	lds	r24, 0x0775
    55ac:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char keyHead_ = keyHead;
    55ae:	80 91 77 07 	lds	r24, 0x0777
    55b2:	8b 83       	std	Y+3, r24	; 0x03

	if (keyTail_ == KBD_BUFFER_FULL)
    55b4:	8a 81       	ldd	r24, Y+2	; 0x02
    55b6:	8f 3f       	cpi	r24, 0xFF	; 255
    55b8:	91 f4       	brne	.+36     	; 0x55de <AddKey+0x4c>
	{	//  буфер переполнен - удаляем самую старую запись

		keyHead_++;
    55ba:	8b 81       	ldd	r24, Y+3	; 0x03
    55bc:	8f 5f       	subi	r24, 0xFF	; 255
    55be:	8b 83       	std	Y+3, r24	; 0x03
		if (keyHead == KBD_BUFFER_SIZE)
    55c0:	80 91 77 07 	lds	r24, 0x0777
    55c4:	90 91 78 07 	lds	r25, 0x0778
    55c8:	8f 30       	cpi	r24, 0x0F	; 15
    55ca:	91 05       	cpc	r25, r1
    55cc:	21 f4       	brne	.+8      	; 0x55d6 <AddKey+0x44>
		{
			keyHead_ = 0;
    55ce:	1b 82       	std	Y+3, r1	; 0x03
			keyTail_ = KBD_BUFFER_SIZE - 1;
    55d0:	8e e0       	ldi	r24, 0x0E	; 14
    55d2:	8a 83       	std	Y+2, r24	; 0x02
    55d4:	04 c0       	rjmp	.+8      	; 0x55de <AddKey+0x4c>
		}else
			keyTail_ = keyHead - 1;
    55d6:	80 91 77 07 	lds	r24, 0x0777
    55da:	81 50       	subi	r24, 0x01	; 1
    55dc:	8a 83       	std	Y+2, r24	; 0x02
	}

	kbd_buf[keyTail_] = key + 1;		//  чтобы 0 был пустой клавишей
    55de:	8a 81       	ldd	r24, Y+2	; 0x02
    55e0:	99 27       	eor	r25, r25
    55e2:	fc 01       	movw	r30, r24
    55e4:	e8 5a       	subi	r30, 0xA8	; 168
    55e6:	f9 4f       	sbci	r31, 0xF9	; 249
    55e8:	89 81       	ldd	r24, Y+1	; 0x01
    55ea:	8f 5f       	subi	r24, 0xFF	; 255
    55ec:	80 83       	st	Z, r24

	keyTail_++;
    55ee:	8a 81       	ldd	r24, Y+2	; 0x02
    55f0:	8f 5f       	subi	r24, 0xFF	; 255
    55f2:	8a 83       	std	Y+2, r24	; 0x02

	if (keyHead_ == KBD_BUFFER_EMPTY)
    55f4:	8b 81       	ldd	r24, Y+3	; 0x03
    55f6:	8f 3f       	cpi	r24, 0xFF	; 255
    55f8:	09 f4       	brne	.+2      	; 0x55fc <AddKey+0x6a>
		//  первая клавиша в буфере
		keyHead_ = 0;
    55fa:	1b 82       	std	Y+3, r1	; 0x03

	if ((keyTail_ == keyHead_) || (keyTail_ == KBD_BUFFER_SIZE))
    55fc:	9a 81       	ldd	r25, Y+2	; 0x02
    55fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5600:	98 17       	cp	r25, r24
    5602:	21 f0       	breq	.+8      	; 0x560c <AddKey+0x7a>
    5604:	8a 81       	ldd	r24, Y+2	; 0x02
    5606:	8f 30       	cpi	r24, 0x0F	; 15
    5608:	09 f0       	breq	.+2      	; 0x560c <AddKey+0x7a>
    560a:	02 c0       	rjmp	.+4      	; 0x5610 <AddKey+0x7e>
		keyTail_ = KBD_BUFFER_FULL;
    560c:	8f ef       	ldi	r24, 0xFF	; 255
    560e:	8a 83       	std	Y+2, r24	; 0x02

	keyTail = keyTail_;
    5610:	8a 81       	ldd	r24, Y+2	; 0x02
    5612:	99 27       	eor	r25, r25
    5614:	90 93 76 07 	sts	0x0776, r25
    5618:	80 93 75 07 	sts	0x0775, r24
	keyHead = keyHead_;
    561c:	8b 81       	ldd	r24, Y+3	; 0x03
    561e:	99 27       	eor	r25, r25
    5620:	90 93 78 07 	sts	0x0778, r25
    5624:	80 93 77 07 	sts	0x0777, r24
    5628:	23 96       	adiw	r28, 0x03	; 3
    562a:	0f b6       	in	r0, 0x3f	; 63
    562c:	f8 94       	cli
    562e:	de bf       	out	0x3e, r29	; 62
    5630:	0f be       	out	0x3f, r0	; 63
    5632:	cd bf       	out	0x3d, r28	; 61
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	08 95       	ret

0000563a <getcha>:
}

unsigned char getcha()
{
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	cd b7       	in	r28, 0x3d	; 61
    5640:	de b7       	in	r29, 0x3e	; 62
    5642:	23 97       	sbiw	r28, 0x03	; 3
    5644:	0f b6       	in	r0, 0x3f	; 63
    5646:	f8 94       	cli
    5648:	de bf       	out	0x3e, r29	; 62
    564a:	0f be       	out	0x3f, r0	; 63
    564c:	cd bf       	out	0x3d, r28	; 61
	unsigned res = 0;
    564e:	1a 82       	std	Y+2, r1	; 0x02
    5650:	19 82       	std	Y+1, r1	; 0x01
	unsigned char keyHead_ = keyHead;
    5652:	80 91 77 07 	lds	r24, 0x0777
    5656:	8b 83       	std	Y+3, r24	; 0x03

	if (keyHead_ != KBD_BUFFER_EMPTY)
    5658:	8b 81       	ldd	r24, Y+3	; 0x03
    565a:	8f 3f       	cpi	r24, 0xFF	; 255
    565c:	31 f1       	breq	.+76     	; 0x56aa <getcha+0x70>
	{

		res = kbd_buf[keyHead_];
    565e:	8b 81       	ldd	r24, Y+3	; 0x03
    5660:	99 27       	eor	r25, r25
    5662:	fc 01       	movw	r30, r24
    5664:	e8 5a       	subi	r30, 0xA8	; 168
    5666:	f9 4f       	sbci	r31, 0xF9	; 249
    5668:	80 81       	ld	r24, Z
    566a:	99 27       	eor	r25, r25
    566c:	9a 83       	std	Y+2, r25	; 0x02
    566e:	89 83       	std	Y+1, r24	; 0x01

		keyHead_++;
    5670:	8b 81       	ldd	r24, Y+3	; 0x03
    5672:	8f 5f       	subi	r24, 0xFF	; 255
    5674:	8b 83       	std	Y+3, r24	; 0x03

		if (keyHead_ == KBD_BUFFER_SIZE)
    5676:	8b 81       	ldd	r24, Y+3	; 0x03
    5678:	8f 30       	cpi	r24, 0x0F	; 15
    567a:	09 f4       	brne	.+2      	; 0x567e <getcha+0x44>
			keyHead_ = 0;
    567c:	1b 82       	std	Y+3, r1	; 0x03
		if (keyHead_ == keyTail)
    567e:	8b 81       	ldd	r24, Y+3	; 0x03
    5680:	28 2f       	mov	r18, r24
    5682:	33 27       	eor	r19, r19
    5684:	80 91 75 07 	lds	r24, 0x0775
    5688:	90 91 76 07 	lds	r25, 0x0776
    568c:	28 17       	cp	r18, r24
    568e:	39 07       	cpc	r19, r25
    5690:	31 f4       	brne	.+12     	; 0x569e <getcha+0x64>
		{	//  буфер опустел
			keyHead_ = KBD_BUFFER_EMPTY;
    5692:	8f ef       	ldi	r24, 0xFF	; 255
    5694:	8b 83       	std	Y+3, r24	; 0x03
			keyTail = 0;
    5696:	10 92 76 07 	sts	0x0776, r1
    569a:	10 92 75 07 	sts	0x0775, r1
		}

		keyHead = keyHead_;
    569e:	8b 81       	ldd	r24, Y+3	; 0x03
    56a0:	99 27       	eor	r25, r25
    56a2:	90 93 78 07 	sts	0x0778, r25
    56a6:	80 93 77 07 	sts	0x0777, r24
	}

	return res;
    56aa:	89 81       	ldd	r24, Y+1	; 0x01
    56ac:	99 27       	eor	r25, r25
    56ae:	23 96       	adiw	r28, 0x03	; 3
    56b0:	0f b6       	in	r0, 0x3f	; 63
    56b2:	f8 94       	cli
    56b4:	de bf       	out	0x3e, r29	; 62
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	cd bf       	out	0x3d, r28	; 61
    56ba:	df 91       	pop	r29
    56bc:	cf 91       	pop	r28
    56be:	08 95       	ret

000056c0 <USART_Transmit>:

const unsigned short baudrates[7] = {832, 416, 207, 103, 51, 34, 16};

void USART_Transmit(unsigned char data)
{
    56c0:	cf 93       	push	r28
    56c2:	df 93       	push	r29
    56c4:	cd b7       	in	r28, 0x3d	; 61
    56c6:	de b7       	in	r29, 0x3e	; 62
    56c8:	21 97       	sbiw	r28, 0x01	; 1
    56ca:	0f b6       	in	r0, 0x3f	; 63
    56cc:	f8 94       	cli
    56ce:	de bf       	out	0x3e, r29	; 62
    56d0:	0f be       	out	0x3f, r0	; 63
    56d2:	cd bf       	out	0x3d, r28	; 61
    56d4:	89 83       	std	Y+1, r24	; 0x01
	/* Ожидание освобождения буфера передатчика  */
	while ( !( UCSR0A & (1 << UDRE0)) );
    56d6:	80 91 2b 00 	lds	r24, 0x002B
    56da:	99 27       	eor	r25, r25
    56dc:	80 72       	andi	r24, 0x20	; 32
    56de:	90 70       	andi	r25, 0x00	; 0
    56e0:	00 97       	sbiw	r24, 0x00	; 0
    56e2:	09 f4       	brne	.+2      	; 0x56e6 <USART_Transmit+0x26>
    56e4:	f8 cf       	rjmp	.-16     	; 0x56d6 <USART_Transmit+0x16>
	/* Помещение данных в буфер, отправка данных */
	UDR0 = data;
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	80 93 2c 00 	sts	0x002C, r24
    56ec:	21 96       	adiw	r28, 0x01	; 1
    56ee:	0f b6       	in	r0, 0x3f	; 63
    56f0:	f8 94       	cli
    56f2:	de bf       	out	0x3e, r29	; 62
    56f4:	0f be       	out	0x3f, r0	; 63
    56f6:	cd bf       	out	0x3d, r28	; 61
    56f8:	df 91       	pop	r29
    56fa:	cf 91       	pop	r28
    56fc:	08 95       	ret

000056fe <GSM_Transmit>:
}

void GSM_Transmit(unsigned char data)
{
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62
    5706:	21 97       	sbiw	r28, 0x01	; 1
    5708:	0f b6       	in	r0, 0x3f	; 63
    570a:	f8 94       	cli
    570c:	de bf       	out	0x3e, r29	; 62
    570e:	0f be       	out	0x3f, r0	; 63
    5710:	cd bf       	out	0x3d, r28	; 61
    5712:	89 83       	std	Y+1, r24	; 0x01
	/* Ожидание освобождения буфера передатчика  */
	while ( !( UCSR1A & (1 << UDRE1)) );
    5714:	80 91 9b 00 	lds	r24, 0x009B
    5718:	99 27       	eor	r25, r25
    571a:	80 72       	andi	r24, 0x20	; 32
    571c:	90 70       	andi	r25, 0x00	; 0
    571e:	00 97       	sbiw	r24, 0x00	; 0
    5720:	09 f4       	brne	.+2      	; 0x5724 <GSM_Transmit+0x26>
    5722:	f8 cf       	rjmp	.-16     	; 0x5714 <GSM_Transmit+0x16>
	/* Помещение данных в буфер, отправка данных */
	UDR1 = data;
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	80 93 9c 00 	sts	0x009C, r24
    572a:	21 96       	adiw	r28, 0x01	; 1
    572c:	0f b6       	in	r0, 0x3f	; 63
    572e:	f8 94       	cli
    5730:	de bf       	out	0x3e, r29	; 62
    5732:	0f be       	out	0x3f, r0	; 63
    5734:	cd bf       	out	0x3d, r28	; 61
    5736:	df 91       	pop	r29
    5738:	cf 91       	pop	r28
    573a:	08 95       	ret

0000573c <uart_init>:
}

void uart_init(void)
{
    573c:	cf 93       	push	r28
    573e:	df 93       	push	r29
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	21 97       	sbiw	r28, 0x01	; 1
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	cd bf       	out	0x3d, r28	; 61
	unsigned char br;
	UCSR0B = 0;
    5750:	10 92 2a 00 	sts	0x002A, r1
	//br = eeprom_read_word((const uint16_t *)EADR_USART_BAUDRATE);
	br = eeprom_read_byte_1((unsigned char*)EADR_USART_BAUDRATE);
    5754:	81 e1       	ldi	r24, 0x11	; 17
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    575c:	89 83       	std	Y+1, r24	; 0x01
	if (br > 7)
    575e:	89 81       	ldd	r24, Y+1	; 0x01
    5760:	88 30       	cpi	r24, 0x08	; 8
    5762:	10 f0       	brcs	.+4      	; 0x5768 <uart_init+0x2c>
		br = 2;		//  9600 на 16 Мгц
    5764:	82 e0       	ldi	r24, 0x02	; 2
    5766:	89 83       	std	Y+1, r24	; 0x01

//#if F_CPU < 2000000UL && defined(U2X)
//  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
//  UBRRL = (F_CPU / (8UL * br)) - 1;
//#else
//  UBRR0L = (F_CPU / (16UL * br)) - 1;
//#endif

	UCSR0A = _BV(U2X);
    5768:	82 e0       	ldi	r24, 0x02	; 2
    576a:	80 93 2b 00 	sts	0x002B, r24
	UBRR0L = baudrates[br];
    576e:	89 81       	ldd	r24, Y+1	; 0x01
    5770:	28 2f       	mov	r18, r24
    5772:	33 27       	eor	r19, r19
    5774:	c9 01       	movw	r24, r18
    5776:	82 0f       	add	r24, r18
    5778:	93 1f       	adc	r25, r19
    577a:	fc 01       	movw	r30, r24
    577c:	ea 5a       	subi	r30, 0xAA	; 170
    577e:	fa 4f       	sbci	r31, 0xFA	; 250
    5780:	80 81       	ld	r24, Z
    5782:	80 93 29 00 	sts	0x0029, r24
  	UCSR0B = _BV(TXEN) | _BV(RXEN) /*| _BV(TXCIE) */| _BV(RXCIE); /* tx/rx enable */
    5786:	88 e9       	ldi	r24, 0x98	; 152
    5788:	80 93 2a 00 	sts	0x002A, r24

  	//  GSM UART
	UCSR1A = _BV(U2X);
    578c:	82 e0       	ldi	r24, 0x02	; 2
    578e:	80 93 9b 00 	sts	0x009B, r24
	UBRR1L = 16;				// 115200 gsm default speed
    5792:	80 e1       	ldi	r24, 0x10	; 16
    5794:	80 93 99 00 	sts	0x0099, r24
  	UCSR1B = _BV(TXEN) | _BV(RXEN) /*| _BV(TXCIE) */| _BV(RXCIE); /* tx/rx enable */
    5798:	88 e9       	ldi	r24, 0x98	; 152
    579a:	80 93 9a 00 	sts	0x009A, r24
    579e:	21 96       	adiw	r28, 0x01	; 1
    57a0:	0f b6       	in	r0, 0x3f	; 63
    57a2:	f8 94       	cli
    57a4:	de bf       	out	0x3e, r29	; 62
    57a6:	0f be       	out	0x3f, r0	; 63
    57a8:	cd bf       	out	0x3d, r28	; 61
    57aa:	df 91       	pop	r29
    57ac:	cf 91       	pop	r28
    57ae:	08 95       	ret

000057b0 <InitRTC>:
//#include "ds1307.h"
#include "lcd.h"

void InitRTC()
{
    57b0:	cf 93       	push	r28
    57b2:	df 93       	push	r29
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
	i2c_init();         
    57b8:	0e 94 76 27 	call	0x4eec <i2c_init>
	i2c_start(0xD0+I2C_WRITE);  
    57bc:	80 ed       	ldi	r24, 0xD0	; 208
    57be:	0e 94 82 27 	call	0x4f04 <i2c_start>
	i2c_write(0x07);
    57c2:	87 e0       	ldi	r24, 0x07	; 7
    57c4:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_write(0x90);
    57c8:	80 e9       	ldi	r24, 0x90	; 144
    57ca:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_stop();
    57ce:	0e 94 2f 28 	call	0x505e <i2c_stop>
    57d2:	df 91       	pop	r29
    57d4:	cf 91       	pop	r28
    57d6:	08 95       	ret

000057d8 <ReadTime>:
}

void ReadTime(PRTC_TIME prtc)
{
    57d8:	0f 93       	push	r16
    57da:	1f 93       	push	r17
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	22 97       	sbiw	r28, 0x02	; 2
    57e6:	0f b6       	in	r0, 0x3f	; 63
    57e8:	f8 94       	cli
    57ea:	de bf       	out	0x3e, r29	; 62
    57ec:	0f be       	out	0x3f, r0	; 63
    57ee:	cd bf       	out	0x3d, r28	; 61
    57f0:	9a 83       	std	Y+2, r25	; 0x02
    57f2:	89 83       	std	Y+1, r24	; 0x01
	i2c_start_wait(0xD0+I2C_WRITE);  
    57f4:	80 ed       	ldi	r24, 0xD0	; 208
    57f6:	0e 94 cd 27 	call	0x4f9a <i2c_start_wait>
	i2c_write(0x00);					//  устанавливаем адрес чтения
    57fa:	80 e0       	ldi	r24, 0x00	; 0
    57fc:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_start_wait(0xD0+I2C_READ);   
    5800:	81 ed       	ldi	r24, 0xD1	; 209
    5802:	0e 94 cd 27 	call	0x4f9a <i2c_start_wait>
	prtc->sec = i2c_readAck();
    5806:	09 81       	ldd	r16, Y+1	; 0x01
    5808:	1a 81       	ldd	r17, Y+2	; 0x02
    580a:	0e 94 69 28 	call	0x50d2 <i2c_readAck>
    580e:	f8 01       	movw	r30, r16
    5810:	80 83       	st	Z, r24
	prtc->min = i2c_readAck();
    5812:	09 81       	ldd	r16, Y+1	; 0x01
    5814:	1a 81       	ldd	r17, Y+2	; 0x02
    5816:	0e 94 69 28 	call	0x50d2 <i2c_readAck>
    581a:	f8 01       	movw	r30, r16
    581c:	81 83       	std	Z+1, r24	; 0x01
 	prtc->hour = i2c_readAck();
    581e:	09 81       	ldd	r16, Y+1	; 0x01
    5820:	1a 81       	ldd	r17, Y+2	; 0x02
    5822:	0e 94 69 28 	call	0x50d2 <i2c_readAck>
    5826:	f8 01       	movw	r30, r16
    5828:	82 83       	std	Z+2, r24	; 0x02
	prtc->weekday = i2c_readAck();
    582a:	09 81       	ldd	r16, Y+1	; 0x01
    582c:	1a 81       	ldd	r17, Y+2	; 0x02
    582e:	0e 94 69 28 	call	0x50d2 <i2c_readAck>
    5832:	f8 01       	movw	r30, r16
    5834:	83 83       	std	Z+3, r24	; 0x03
	prtc->day = i2c_readAck();
    5836:	09 81       	ldd	r16, Y+1	; 0x01
    5838:	1a 81       	ldd	r17, Y+2	; 0x02
    583a:	0e 94 69 28 	call	0x50d2 <i2c_readAck>
    583e:	f8 01       	movw	r30, r16
    5840:	84 83       	std	Z+4, r24	; 0x04
	prtc->month = i2c_readAck();
    5842:	09 81       	ldd	r16, Y+1	; 0x01
    5844:	1a 81       	ldd	r17, Y+2	; 0x02
    5846:	0e 94 69 28 	call	0x50d2 <i2c_readAck>
    584a:	f8 01       	movw	r30, r16
    584c:	85 83       	std	Z+5, r24	; 0x05
	prtc->year = i2c_readNak();
    584e:	09 81       	ldd	r16, Y+1	; 0x01
    5850:	1a 81       	ldd	r17, Y+2	; 0x02
    5852:	0e 94 7b 28 	call	0x50f6 <i2c_readNak>
    5856:	f8 01       	movw	r30, r16
    5858:	86 83       	std	Z+6, r24	; 0x06
	i2c_stop();            
    585a:	0e 94 2f 28 	call	0x505e <i2c_stop>

	//  BCD --> DEC
	prtc->sec = (prtc->sec >> 4) * 10 + (prtc->sec & 0x0F);	
    585e:	a9 81       	ldd	r26, Y+1	; 0x01
    5860:	ba 81       	ldd	r27, Y+2	; 0x02
    5862:	e9 81       	ldd	r30, Y+1	; 0x01
    5864:	fa 81       	ldd	r31, Y+2	; 0x02
    5866:	80 81       	ld	r24, Z
    5868:	98 2f       	mov	r25, r24
    586a:	92 95       	swap	r25
    586c:	9f 70       	andi	r25, 0x0F	; 15
    586e:	8a e0       	ldi	r24, 0x0A	; 10
    5870:	98 9f       	mul	r25, r24
    5872:	90 01       	movw	r18, r0
    5874:	11 24       	eor	r1, r1
    5876:	e9 81       	ldd	r30, Y+1	; 0x01
    5878:	fa 81       	ldd	r31, Y+2	; 0x02
    587a:	80 81       	ld	r24, Z
    587c:	8f 70       	andi	r24, 0x0F	; 15
    587e:	82 0f       	add	r24, r18
    5880:	8c 93       	st	X, r24
	prtc->min = (prtc->min >> 4) * 10 + (prtc->min & 0x0F);	
    5882:	a9 81       	ldd	r26, Y+1	; 0x01
    5884:	ba 81       	ldd	r27, Y+2	; 0x02
    5886:	e9 81       	ldd	r30, Y+1	; 0x01
    5888:	fa 81       	ldd	r31, Y+2	; 0x02
    588a:	81 81       	ldd	r24, Z+1	; 0x01
    588c:	98 2f       	mov	r25, r24
    588e:	92 95       	swap	r25
    5890:	9f 70       	andi	r25, 0x0F	; 15
    5892:	8a e0       	ldi	r24, 0x0A	; 10
    5894:	98 9f       	mul	r25, r24
    5896:	90 01       	movw	r18, r0
    5898:	11 24       	eor	r1, r1
    589a:	e9 81       	ldd	r30, Y+1	; 0x01
    589c:	fa 81       	ldd	r31, Y+2	; 0x02
    589e:	81 81       	ldd	r24, Z+1	; 0x01
    58a0:	8f 70       	andi	r24, 0x0F	; 15
    58a2:	82 0f       	add	r24, r18
    58a4:	fd 01       	movw	r30, r26
    58a6:	81 83       	std	Z+1, r24	; 0x01
	prtc->hour = (prtc->hour >> 4) * 10 + (prtc->hour & 0x0F);
    58a8:	a9 81       	ldd	r26, Y+1	; 0x01
    58aa:	ba 81       	ldd	r27, Y+2	; 0x02
    58ac:	e9 81       	ldd	r30, Y+1	; 0x01
    58ae:	fa 81       	ldd	r31, Y+2	; 0x02
    58b0:	82 81       	ldd	r24, Z+2	; 0x02
    58b2:	98 2f       	mov	r25, r24
    58b4:	92 95       	swap	r25
    58b6:	9f 70       	andi	r25, 0x0F	; 15
    58b8:	8a e0       	ldi	r24, 0x0A	; 10
    58ba:	98 9f       	mul	r25, r24
    58bc:	90 01       	movw	r18, r0
    58be:	11 24       	eor	r1, r1
    58c0:	e9 81       	ldd	r30, Y+1	; 0x01
    58c2:	fa 81       	ldd	r31, Y+2	; 0x02
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	8f 70       	andi	r24, 0x0F	; 15
    58c8:	82 0f       	add	r24, r18
    58ca:	fd 01       	movw	r30, r26
    58cc:	82 83       	std	Z+2, r24	; 0x02
	prtc->day = (prtc->day >> 4) * 10 + (prtc->day & 0x0F);
    58ce:	a9 81       	ldd	r26, Y+1	; 0x01
    58d0:	ba 81       	ldd	r27, Y+2	; 0x02
    58d2:	e9 81       	ldd	r30, Y+1	; 0x01
    58d4:	fa 81       	ldd	r31, Y+2	; 0x02
    58d6:	84 81       	ldd	r24, Z+4	; 0x04
    58d8:	98 2f       	mov	r25, r24
    58da:	92 95       	swap	r25
    58dc:	9f 70       	andi	r25, 0x0F	; 15
    58de:	8a e0       	ldi	r24, 0x0A	; 10
    58e0:	98 9f       	mul	r25, r24
    58e2:	90 01       	movw	r18, r0
    58e4:	11 24       	eor	r1, r1
    58e6:	e9 81       	ldd	r30, Y+1	; 0x01
    58e8:	fa 81       	ldd	r31, Y+2	; 0x02
    58ea:	84 81       	ldd	r24, Z+4	; 0x04
    58ec:	8f 70       	andi	r24, 0x0F	; 15
    58ee:	82 0f       	add	r24, r18
    58f0:	fd 01       	movw	r30, r26
    58f2:	84 83       	std	Z+4, r24	; 0x04
	prtc->month = (prtc->month >> 4) * 10 + (prtc->month & 0x0F);
    58f4:	a9 81       	ldd	r26, Y+1	; 0x01
    58f6:	ba 81       	ldd	r27, Y+2	; 0x02
    58f8:	e9 81       	ldd	r30, Y+1	; 0x01
    58fa:	fa 81       	ldd	r31, Y+2	; 0x02
    58fc:	85 81       	ldd	r24, Z+5	; 0x05
    58fe:	98 2f       	mov	r25, r24
    5900:	92 95       	swap	r25
    5902:	9f 70       	andi	r25, 0x0F	; 15
    5904:	8a e0       	ldi	r24, 0x0A	; 10
    5906:	98 9f       	mul	r25, r24
    5908:	90 01       	movw	r18, r0
    590a:	11 24       	eor	r1, r1
    590c:	e9 81       	ldd	r30, Y+1	; 0x01
    590e:	fa 81       	ldd	r31, Y+2	; 0x02
    5910:	85 81       	ldd	r24, Z+5	; 0x05
    5912:	8f 70       	andi	r24, 0x0F	; 15
    5914:	82 0f       	add	r24, r18
    5916:	fd 01       	movw	r30, r26
    5918:	85 83       	std	Z+5, r24	; 0x05
    591a:	22 96       	adiw	r28, 0x02	; 2
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	1f 91       	pop	r17
    592c:	0f 91       	pop	r16
    592e:	08 95       	ret

00005930 <UpdateTimePane>:
//	prtc->year = (prtc->year >> 4) * 10 + (prtc->year & 0x0F);
}


void UpdateTimePane(void)
{
    5930:	cf 93       	push	r28
    5932:	df 93       	push	r29
    5934:	cd b7       	in	r28, 0x3d	; 61
    5936:	de b7       	in	r29, 0x3e	; 62
    5938:	2c 97       	sbiw	r28, 0x0c	; 12
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	f8 94       	cli
    593e:	de bf       	out	0x3e, r29	; 62
    5940:	0f be       	out	0x3f, r0	; 63
    5942:	cd bf       	out	0x3d, r28	; 61
	typedef unsigned char* pMas;

	RTC_TIME rtc;
	unsigned char m[4] = {0};
    5944:	18 86       	std	Y+8, r1	; 0x08
    5946:	19 86       	std	Y+9, r1	; 0x09
    5948:	1a 86       	std	Y+10, r1	; 0x0a
    594a:	1b 86       	std	Y+11, r1	; 0x0b
	unsigned char e;

	ReadTime(&rtc);
    594c:	ce 01       	movw	r24, r28
    594e:	01 96       	adiw	r24, 0x01	; 1
    5950:	0e 94 ec 2b 	call	0x57d8 <ReadTime>
	SetCaret(0x40);
    5954:	80 e4       	ldi	r24, 0x40	; 64
    5956:	0e 94 47 29 	call	0x528e <SetCaret>

	for (e = 3; e > 1; e--)
    595a:	83 e0       	ldi	r24, 0x03	; 3
    595c:	8c 87       	std	Y+12, r24	; 0x0c
    595e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5960:	82 30       	cpi	r24, 0x02	; 2
    5962:	98 f1       	brcs	.+102    	; 0x59ca <UpdateTimePane+0x9a>
	{
		if (((pMas)(&rtc.sec))[e - 1] < (unsigned char)10)
    5964:	8c 85       	ldd	r24, Y+12	; 0x0c
    5966:	28 2f       	mov	r18, r24
    5968:	33 27       	eor	r19, r19
    596a:	ce 01       	movw	r24, r28
    596c:	fc 01       	movw	r30, r24
    596e:	e2 0f       	add	r30, r18
    5970:	f3 1f       	adc	r31, r19
    5972:	80 81       	ld	r24, Z
    5974:	8a 30       	cpi	r24, 0x0A	; 10
    5976:	18 f4       	brcc	.+6      	; 0x597e <UpdateTimePane+0x4e>
			OutData(0x30);
    5978:	80 e3       	ldi	r24, 0x30	; 48
    597a:	0e 94 e7 28 	call	0x51ce <OutData>
		
		OutStr(itoa(((pMas)(&rtc.sec))[e - 1], m, 10));
    597e:	be 01       	movw	r22, r28
    5980:	68 5f       	subi	r22, 0xF8	; 248
    5982:	7f 4f       	sbci	r23, 0xFF	; 255
    5984:	8c 85       	ldd	r24, Y+12	; 0x0c
    5986:	28 2f       	mov	r18, r24
    5988:	33 27       	eor	r19, r19
    598a:	ce 01       	movw	r24, r28
    598c:	fc 01       	movw	r30, r24
    598e:	e2 0f       	add	r30, r18
    5990:	f3 1f       	adc	r31, r19
    5992:	80 81       	ld	r24, Z
    5994:	99 27       	eor	r25, r25
    5996:	4a e0       	ldi	r20, 0x0A	; 10
    5998:	50 e0       	ldi	r21, 0x00	; 0
    599a:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    599e:	0e 94 24 29 	call	0x5248 <OutStr>
		
		if (e - 2)
    59a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    59a4:	82 30       	cpi	r24, 0x02	; 2
    59a6:	69 f0       	breq	.+26     	; 0x59c2 <UpdateTimePane+0x92>
		{
			if (rtc.sec & 1)
    59a8:	89 81       	ldd	r24, Y+1	; 0x01
    59aa:	99 27       	eor	r25, r25
    59ac:	81 70       	andi	r24, 0x01	; 1
    59ae:	90 70       	andi	r25, 0x00	; 0
    59b0:	00 97       	sbiw	r24, 0x00	; 0
    59b2:	21 f0       	breq	.+8      	; 0x59bc <UpdateTimePane+0x8c>
				OutData(':');
    59b4:	8a e3       	ldi	r24, 0x3A	; 58
    59b6:	0e 94 e7 28 	call	0x51ce <OutData>
    59ba:	03 c0       	rjmp	.+6      	; 0x59c2 <UpdateTimePane+0x92>
			else
				OutData(32);
    59bc:	80 e2       	ldi	r24, 0x20	; 32
    59be:	0e 94 e7 28 	call	0x51ce <OutData>
    59c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    59c4:	81 50       	subi	r24, 0x01	; 1
    59c6:	8c 87       	std	Y+12, r24	; 0x0c
    59c8:	ca cf       	rjmp	.-108    	; 0x595e <UpdateTimePane+0x2e>
		}
	}

	OutData(32);		//  разделительный пробел
    59ca:	80 e2       	ldi	r24, 0x20	; 32
    59cc:	0e 94 e7 28 	call	0x51ce <OutData>

	if (rtc.day < 10)
    59d0:	8d 81       	ldd	r24, Y+5	; 0x05
    59d2:	8a 30       	cpi	r24, 0x0A	; 10
    59d4:	18 f4       	brcc	.+6      	; 0x59dc <UpdateTimePane+0xac>
		OutData(0x30);
    59d6:	80 e3       	ldi	r24, 0x30	; 48
    59d8:	0e 94 e7 28 	call	0x51ce <OutData>

	OutStr(itoa(rtc.day, m, 10));
    59dc:	9e 01       	movw	r18, r28
    59de:	28 5f       	subi	r18, 0xF8	; 248
    59e0:	3f 4f       	sbci	r19, 0xFF	; 255
    59e2:	8d 81       	ldd	r24, Y+5	; 0x05
    59e4:	99 27       	eor	r25, r25
    59e6:	4a e0       	ldi	r20, 0x0A	; 10
    59e8:	50 e0       	ldi	r21, 0x00	; 0
    59ea:	b9 01       	movw	r22, r18
    59ec:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    59f0:	0e 94 24 29 	call	0x5248 <OutStr>
	OutData('.');
    59f4:	8e e2       	ldi	r24, 0x2E	; 46
    59f6:	0e 94 e7 28 	call	0x51ce <OutData>

	if (rtc.month < 10)
    59fa:	8e 81       	ldd	r24, Y+6	; 0x06
    59fc:	8a 30       	cpi	r24, 0x0A	; 10
    59fe:	18 f4       	brcc	.+6      	; 0x5a06 <UpdateTimePane+0xd6>
		OutData(0x30);
    5a00:	80 e3       	ldi	r24, 0x30	; 48
    5a02:	0e 94 e7 28 	call	0x51ce <OutData>

	OutStr(itoa(rtc.month, m, 10));
    5a06:	9e 01       	movw	r18, r28
    5a08:	28 5f       	subi	r18, 0xF8	; 248
    5a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    5a0e:	99 27       	eor	r25, r25
    5a10:	4a e0       	ldi	r20, 0x0A	; 10
    5a12:	50 e0       	ldi	r21, 0x00	; 0
    5a14:	b9 01       	movw	r22, r18
    5a16:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    5a1a:	0e 94 24 29 	call	0x5248 <OutStr>
	OutData('.');
    5a1e:	8e e2       	ldi	r24, 0x2E	; 46
    5a20:	0e 94 e7 28 	call	0x51ce <OutData>

	OutStr("200");
    5a24:	84 e6       	ldi	r24, 0x64	; 100
    5a26:	95 e0       	ldi	r25, 0x05	; 5
    5a28:	0e 94 24 29 	call	0x5248 <OutStr>
	OutStr(itoa(rtc.year, m, 10));
    5a2c:	9e 01       	movw	r18, r28
    5a2e:	28 5f       	subi	r18, 0xF8	; 248
    5a30:	3f 4f       	sbci	r19, 0xFF	; 255
    5a32:	8f 81       	ldd	r24, Y+7	; 0x07
    5a34:	99 27       	eor	r25, r25
    5a36:	4a e0       	ldi	r20, 0x0A	; 10
    5a38:	50 e0       	ldi	r21, 0x00	; 0
    5a3a:	b9 01       	movw	r22, r18
    5a3c:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    5a40:	0e 94 24 29 	call	0x5248 <OutStr>
    5a44:	2c 96       	adiw	r28, 0x0c	; 12
    5a46:	0f b6       	in	r0, 0x3f	; 63
    5a48:	f8 94       	cli
    5a4a:	de bf       	out	0x3e, r29	; 62
    5a4c:	0f be       	out	0x3f, r0	; 63
    5a4e:	cd bf       	out	0x3d, r28	; 61
    5a50:	df 91       	pop	r29
    5a52:	cf 91       	pop	r28
    5a54:	08 95       	ret

00005a56 <WriteTime>:
}

void WriteTime(PRTC_TIME prtc)
{
    5a56:	cf 93       	push	r28
    5a58:	df 93       	push	r29
    5a5a:	cd b7       	in	r28, 0x3d	; 61
    5a5c:	de b7       	in	r29, 0x3e	; 62
    5a5e:	22 97       	sbiw	r28, 0x02	; 2
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	f8 94       	cli
    5a64:	de bf       	out	0x3e, r29	; 62
    5a66:	0f be       	out	0x3f, r0	; 63
    5a68:	cd bf       	out	0x3d, r28	; 61
    5a6a:	9a 83       	std	Y+2, r25	; 0x02
    5a6c:	89 83       	std	Y+1, r24	; 0x01
	i2c_start_wait(0xD0+I2C_WRITE);  
    5a6e:	80 ed       	ldi	r24, 0xD0	; 208
    5a70:	0e 94 cd 27 	call	0x4f9a <i2c_start_wait>
	i2c_write(0x00);					//  устанавливаем адрес чтения
    5a74:	80 e0       	ldi	r24, 0x00	; 0
    5a76:	0e 94 39 28 	call	0x5072 <i2c_write>
	//i2c_start_wait(0xD0+I2C_READ);   
	i2c_write(prtc->sec);
    5a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    5a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    5a7e:	80 81       	ld	r24, Z
    5a80:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_write(prtc->min);
    5a84:	e9 81       	ldd	r30, Y+1	; 0x01
    5a86:	fa 81       	ldd	r31, Y+2	; 0x02
    5a88:	81 81       	ldd	r24, Z+1	; 0x01
    5a8a:	0e 94 39 28 	call	0x5072 <i2c_write>
 	i2c_write(prtc->hour);
    5a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    5a90:	fa 81       	ldd	r31, Y+2	; 0x02
    5a92:	82 81       	ldd	r24, Z+2	; 0x02
    5a94:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_write(prtc->weekday);
    5a98:	e9 81       	ldd	r30, Y+1	; 0x01
    5a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    5a9c:	83 81       	ldd	r24, Z+3	; 0x03
    5a9e:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_write(prtc->day);
    5aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    5aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    5aa6:	84 81       	ldd	r24, Z+4	; 0x04
    5aa8:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_write(prtc->month);
    5aac:	e9 81       	ldd	r30, Y+1	; 0x01
    5aae:	fa 81       	ldd	r31, Y+2	; 0x02
    5ab0:	85 81       	ldd	r24, Z+5	; 0x05
    5ab2:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_write(prtc->year);
    5ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    5ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    5aba:	86 81       	ldd	r24, Z+6	; 0x06
    5abc:	0e 94 39 28 	call	0x5072 <i2c_write>
	i2c_stop();            
    5ac0:	0e 94 2f 28 	call	0x505e <i2c_stop>
    5ac4:	22 96       	adiw	r28, 0x02	; 2
    5ac6:	0f b6       	in	r0, 0x3f	; 63
    5ac8:	f8 94       	cli
    5aca:	de bf       	out	0x3e, r29	; 62
    5acc:	0f be       	out	0x3f, r0	; 63
    5ace:	cd bf       	out	0x3d, r28	; 61
    5ad0:	df 91       	pop	r29
    5ad2:	cf 91       	pop	r28
    5ad4:	08 95       	ret

00005ad6 <spiInit>:
#endif

// access routines
void spiInit()
{
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	cd b7       	in	r28, 0x3d	; 61
    5adc:	de b7       	in	r29, 0x3e	; 62
#ifdef __AVR_ATmega128__
	// setup SPI I/O pins
	sbi(PORTB, 1);	// set SCK hi
    5ade:	80 91 38 00 	lds	r24, 0x0038
    5ae2:	82 60       	ori	r24, 0x02	; 2
    5ae4:	80 93 38 00 	sts	0x0038, r24
	sbi(DDRB, 1);	// set SCK as output
    5ae8:	80 91 37 00 	lds	r24, 0x0037
    5aec:	82 60       	ori	r24, 0x02	; 2
    5aee:	80 93 37 00 	sts	0x0037, r24
	cbi(DDRB, 3);	// set MISO as input
    5af2:	80 91 37 00 	lds	r24, 0x0037
    5af6:	87 7f       	andi	r24, 0xF7	; 247
    5af8:	80 93 37 00 	sts	0x0037, r24
	sbi(DDRB, 2);	// set MOSI as output
    5afc:	80 91 37 00 	lds	r24, 0x0037
    5b00:	84 60       	ori	r24, 0x04	; 4
    5b02:	80 93 37 00 	sts	0x0037, r24
	sbi(DDRB, 0);	// SS must be output for Master mode to work
    5b06:	80 91 37 00 	lds	r24, 0x0037
    5b0a:	81 60       	ori	r24, 0x01	; 1
    5b0c:	80 93 37 00 	sts	0x0037, r24
#elif __AVR_ATmega8__
    // setup SPI I/O pins
    sbi(PORTB, 5);  // set SCK hi
    sbi(DDRB, 5);   // set SCK as output
    cbi(DDRB, 4);   // set MISO as input
    sbi(DDRB, 3);   // set MOSI as output
    sbi(DDRB, 2);   // SS must be output for Master mode to work
#else
	// setup SPI I/O pins
	sbi(PORTB, 7);	// set SCK hi
	sbi(DDRB, 7);	// set SCK as output
	cbi(DDRB, 6);	// set MISO as input
	sbi(DDRB, 5);	// set MOSI as output
	sbi(DDRB, 4);	// SS must be output for Master mode to work
#endif
	
	// setup SPI interface :
	// master mode
	sbi(SPCR, MSTR);
    5b10:	80 91 2d 00 	lds	r24, 0x002D
    5b14:	80 61       	ori	r24, 0x10	; 16
    5b16:	80 93 2d 00 	sts	0x002D, r24
	// clock = f/4
//	cbi(SPCR, SPR0);
//	cbi(SPCR, SPR1);

	// clock = f/2
	cbi(SPCR, SPR0);
    5b1a:	80 91 2d 00 	lds	r24, 0x002D
    5b1e:	8e 7f       	andi	r24, 0xFE	; 254
    5b20:	80 93 2d 00 	sts	0x002D, r24
	cbi(SPCR, SPR1);		//  изменили
    5b24:	80 91 2d 00 	lds	r24, 0x002D
    5b28:	8d 7f       	andi	r24, 0xFD	; 253
    5b2a:	80 93 2d 00 	sts	0x002D, r24

	sbi(SPSR, SPI2X);		// Double SPI Speed Bi
    5b2e:	80 91 2e 00 	lds	r24, 0x002E
    5b32:	81 60       	ori	r24, 0x01	; 1
    5b34:	80 93 2e 00 	sts	0x002E, r24

	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
    5b38:	80 91 2d 00 	lds	r24, 0x002D
    5b3c:	87 7f       	andi	r24, 0xF7	; 247
    5b3e:	80 93 2d 00 	sts	0x002D, r24
	// Data order MSB first
	cbi(SPCR,DORD);
    5b42:	80 91 2d 00 	lds	r24, 0x002D
    5b46:	8f 7d       	andi	r24, 0xDF	; 223
    5b48:	80 93 2d 00 	sts	0x002D, r24
	// enable SPI
	sbi(SPCR, SPE);
    5b4c:	80 91 2d 00 	lds	r24, 0x002D
    5b50:	80 64       	ori	r24, 0x40	; 64
    5b52:	80 93 2d 00 	sts	0x002D, r24
	
	sbi(SPCR, CPHA);
    5b56:	80 91 2d 00 	lds	r24, 0x002D
    5b5a:	84 60       	ori	r24, 0x04	; 4
    5b5c:	80 93 2d 00 	sts	0x002D, r24
	sbi(SPCR, CPOL);
    5b60:	80 91 2d 00 	lds	r24, 0x002D
    5b64:	88 60       	ori	r24, 0x08	; 8
    5b66:	80 93 2d 00 	sts	0x002D, r24
	
	// some other possible configs
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
    5b6a:	80 91 2e 00 	lds	r24, 0x002E
	inb(SPDR);
    5b6e:	80 91 2f 00 	lds	r24, 0x002F
	spiTransferComplete = TRUE;
    5b72:	8f ef       	ldi	r24, 0xFF	; 255
    5b74:	80 93 79 07 	sts	0x0779, r24
    5b78:	df 91       	pop	r29
    5b7a:	cf 91       	pop	r28
    5b7c:	08 95       	ret

00005b7e <spiSendByte>:

	// enable SPI interrupt
	#ifdef SPI_USEINT
	sbi(SPCR, SPIE);
	#endif
}
/*
void spiSetBitrate(u08 spr)
{
	outb(SPCR, (inb(SPCR) & ((1<<SPR0)|(1<<SPR1))) | (spr&((1<<SPR0)|(1<<SPR1)))));
}
*/

char spiSendByte(u08 data)
{
    5b7e:	cf 93       	push	r28
    5b80:	df 93       	push	r29
    5b82:	cd b7       	in	r28, 0x3d	; 61
    5b84:	de b7       	in	r29, 0x3e	; 62
    5b86:	23 97       	sbiw	r28, 0x03	; 3
    5b88:	0f b6       	in	r0, 0x3f	; 63
    5b8a:	f8 94       	cli
    5b8c:	de bf       	out	0x3e, r29	; 62
    5b8e:	0f be       	out	0x3f, r0	; 63
    5b90:	cd bf       	out	0x3d, r28	; 61
    5b92:	89 83       	std	Y+1, r24	; 0x01
	// send a byte over SPI and ignore reply

	g_WaitableTimer = 4;
    5b94:	84 e0       	ldi	r24, 0x04	; 4
    5b96:	80 93 7a 07 	sts	0x077A, r24

	#ifdef SPI_USEINT
		while(!spiTransferComplete)
		{
			if (!g_WaitableTimer)
				return 0;
		};
	#else
		while(!(inb(SPSR) & (1<<SPIF)))
    5b9a:	80 91 2e 00 	lds	r24, 0x002E
    5b9e:	88 23       	and	r24, r24
    5ba0:	3c f0       	brlt	.+14     	; 0x5bb0 <spiSendByte+0x32>
		{
			if (!g_WaitableTimer)
    5ba2:	80 91 7a 07 	lds	r24, 0x077A
    5ba6:	88 23       	and	r24, r24
    5ba8:	c1 f7       	brne	.-16     	; 0x5b9a <spiSendByte+0x1c>
				return 0;
    5baa:	1b 82       	std	Y+3, r1	; 0x03
    5bac:	1a 82       	std	Y+2, r1	; 0x02
    5bae:	09 c0       	rjmp	.+18     	; 0x5bc2 <spiSendByte+0x44>
		};
	#endif

	spiTransferComplete = FALSE;
    5bb0:	10 92 79 07 	sts	0x0779, r1
	outb(SPDR, data);
    5bb4:	89 81       	ldd	r24, Y+1	; 0x01
    5bb6:	80 93 2f 00 	sts	0x002F, r24

	return 1;
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	9b 83       	std	Y+3, r25	; 0x03
    5bc0:	8a 83       	std	Y+2, r24	; 0x02
}
    5bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    5bc6:	23 96       	adiw	r28, 0x03	; 3
    5bc8:	0f b6       	in	r0, 0x3f	; 63
    5bca:	f8 94       	cli
    5bcc:	de bf       	out	0x3e, r29	; 62
    5bce:	0f be       	out	0x3f, r0	; 63
    5bd0:	cd bf       	out	0x3d, r28	; 61
    5bd2:	df 91       	pop	r29
    5bd4:	cf 91       	pop	r28
    5bd6:	08 95       	ret

00005bd8 <spiTransferByte>:

u08 spiTransferByte(u08 data)
{
    5bd8:	cf 93       	push	r28
    5bda:	df 93       	push	r29
    5bdc:	cd b7       	in	r28, 0x3d	; 61
    5bde:	de b7       	in	r29, 0x3e	; 62
    5be0:	21 97       	sbiw	r28, 0x01	; 1
    5be2:	0f b6       	in	r0, 0x3f	; 63
    5be4:	f8 94       	cli
    5be6:	de bf       	out	0x3e, r29	; 62
    5be8:	0f be       	out	0x3f, r0	; 63
    5bea:	cd bf       	out	0x3d, r28	; 61
    5bec:	89 83       	std	Y+1, r24	; 0x01
/*	// make sure interface is idle
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
	#endif
*/
	// send the given data
	spiTransferComplete = FALSE;
    5bee:	10 92 79 07 	sts	0x0779, r1
	outb(SPDR, data);
    5bf2:	89 81       	ldd	r24, Y+1	; 0x01
    5bf4:	80 93 2f 00 	sts	0x002F, r24

	// wait for transfer to complete
	#ifdef SPI_USEINT
		while(!spiTransferComplete);
	#else
		while(!(inb(SPSR) & (1<<SPIF)));
    5bf8:	80 91 2e 00 	lds	r24, 0x002E
    5bfc:	88 23       	and	r24, r24
    5bfe:	0c f0       	brlt	.+2      	; 0x5c02 <spiTransferByte+0x2a>
    5c00:	fb cf       	rjmp	.-10     	; 0x5bf8 <spiTransferByte+0x20>
		// *** reading of the SPSR and SPDR are crucial
		// *** to the clearing of the SPIF flag
		// *** in non-interrupt mode
		//inb(SPDR);
		// set flag
		spiTransferComplete = TRUE;
    5c02:	8f ef       	ldi	r24, 0xFF	; 255
    5c04:	80 93 79 07 	sts	0x0779, r24
	#endif
	// return the received data
	return inb(SPDR);
    5c08:	80 91 2f 00 	lds	r24, 0x002F
    5c0c:	99 27       	eor	r25, r25
    5c0e:	21 96       	adiw	r28, 0x01	; 1
    5c10:	0f b6       	in	r0, 0x3f	; 63
    5c12:	f8 94       	cli
    5c14:	de bf       	out	0x3e, r29	; 62
    5c16:	0f be       	out	0x3f, r0	; 63
    5c18:	cd bf       	out	0x3d, r28	; 61
    5c1a:	df 91       	pop	r29
    5c1c:	cf 91       	pop	r28
    5c1e:	08 95       	ret

00005c20 <spiTransferWord>:
}

u16 spiTransferWord(u16 data)
{
    5c20:	cf 93       	push	r28
    5c22:	df 93       	push	r29
    5c24:	cd b7       	in	r28, 0x3d	; 61
    5c26:	de b7       	in	r29, 0x3e	; 62
    5c28:	24 97       	sbiw	r28, 0x04	; 4
    5c2a:	0f b6       	in	r0, 0x3f	; 63
    5c2c:	f8 94       	cli
    5c2e:	de bf       	out	0x3e, r29	; 62
    5c30:	0f be       	out	0x3f, r0	; 63
    5c32:	cd bf       	out	0x3d, r28	; 61
    5c34:	9a 83       	std	Y+2, r25	; 0x02
    5c36:	89 83       	std	Y+1, r24	; 0x01
	u16 rxData = 0;
    5c38:	1c 82       	std	Y+4, r1	; 0x04
    5c3a:	1b 82       	std	Y+3, r1	; 0x03

	// send MS byte of given data
	rxData = (spiTransferByte((data>>8) & 0x00FF))<<8;
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c40:	89 2f       	mov	r24, r25
    5c42:	99 27       	eor	r25, r25
    5c44:	0e 94 ec 2d 	call	0x5bd8 <spiTransferByte>
    5c48:	99 27       	eor	r25, r25
    5c4a:	98 2f       	mov	r25, r24
    5c4c:	88 27       	eor	r24, r24
    5c4e:	9c 83       	std	Y+4, r25	; 0x04
    5c50:	8b 83       	std	Y+3, r24	; 0x03
	// send LS byte of given data
	rxData |= (spiTransferByte(data & 0x00FF));
    5c52:	89 81       	ldd	r24, Y+1	; 0x01
    5c54:	0e 94 ec 2d 	call	0x5bd8 <spiTransferByte>
    5c58:	28 2f       	mov	r18, r24
    5c5a:	33 27       	eor	r19, r19
    5c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c60:	82 2b       	or	r24, r18
    5c62:	93 2b       	or	r25, r19
    5c64:	9c 83       	std	Y+4, r25	; 0x04
    5c66:	8b 83       	std	Y+3, r24	; 0x03

	// return the received data
	return rxData;
    5c68:	8b 81       	ldd	r24, Y+3	; 0x03
    5c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c6c:	24 96       	adiw	r28, 0x04	; 4
    5c6e:	0f b6       	in	r0, 0x3f	; 63
    5c70:	f8 94       	cli
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	cd bf       	out	0x3d, r28	; 61
    5c78:	df 91       	pop	r29
    5c7a:	cf 91       	pop	r28
    5c7c:	08 95       	ret

00005c7e <spiWriteByte>:
}


void spiWriteByte(unsigned char b)
{
    5c7e:	cf 93       	push	r28
    5c80:	df 93       	push	r29
    5c82:	cd b7       	in	r28, 0x3d	; 61
    5c84:	de b7       	in	r29, 0x3e	; 62
    5c86:	21 97       	sbiw	r28, 0x01	; 1
    5c88:	0f b6       	in	r0, 0x3f	; 63
    5c8a:	f8 94       	cli
    5c8c:	de bf       	out	0x3e, r29	; 62
    5c8e:	0f be       	out	0x3f, r0	; 63
    5c90:	cd bf       	out	0x3d, r28	; 61
    5c92:	89 83       	std	Y+1, r24	; 0x01
    SPDR = b;
    5c94:	89 81       	ldd	r24, Y+1	; 0x01
    5c96:	80 93 2f 00 	sts	0x002F, r24
    while (!(SPSR & 0x80));
    5c9a:	80 91 2e 00 	lds	r24, 0x002E
    5c9e:	88 23       	and	r24, r24
    5ca0:	0c f0       	brlt	.+2      	; 0x5ca4 <spiWriteByte+0x26>
    5ca2:	fb cf       	rjmp	.-10     	; 0x5c9a <spiWriteByte+0x1c>
    5ca4:	21 96       	adiw	r28, 0x01	; 1
    5ca6:	0f b6       	in	r0, 0x3f	; 63
    5ca8:	f8 94       	cli
    5caa:	de bf       	out	0x3e, r29	; 62
    5cac:	0f be       	out	0x3f, r0	; 63
    5cae:	cd bf       	out	0x3d, r28	; 61
    5cb0:	df 91       	pop	r29
    5cb2:	cf 91       	pop	r28
    5cb4:	08 95       	ret

00005cb6 <spiReadByte>:
}
//-------------------------------------------------------------

unsigned char spiReadByte()
{
    5cb6:	cf 93       	push	r28
    5cb8:	df 93       	push	r29
    5cba:	cd b7       	in	r28, 0x3d	; 61
    5cbc:	de b7       	in	r29, 0x3e	; 62
    SPDR = 0x00;
    5cbe:	10 92 2f 00 	sts	0x002F, r1
    while (!(SPSR & 0x80));
    5cc2:	80 91 2e 00 	lds	r24, 0x002E
    5cc6:	88 23       	and	r24, r24
    5cc8:	0c f0       	brlt	.+2      	; 0x5ccc <spiReadByte+0x16>
    5cca:	fb cf       	rjmp	.-10     	; 0x5cc2 <spiReadByte+0xc>
    return SPDR;
    5ccc:	80 91 2f 00 	lds	r24, 0x002F
    5cd0:	99 27       	eor	r25, r25
    5cd2:	df 91       	pop	r29
    5cd4:	cf 91       	pop	r28
    5cd6:	08 95       	ret

00005cd8 <InitDevices>:
// 	сколько байтов текущей страницы уже записано
unsigned short  g_StreamCurByteCounter;

void InitDevices(void)
{
    5cd8:	cf 93       	push	r28
    5cda:	df 93       	push	r29
    5cdc:	cd b7       	in	r28, 0x3d	; 61
    5cde:	de b7       	in	r29, 0x3e	; 62
    5ce0:	21 97       	sbiw	r28, 0x01	; 1
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	f8 94       	cli
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;

	//  читаем количество подключенных устройств
	//  по крайней мере одно устройство(встроенное) присутствует всегда
	link_state.g_xDevCount = eeprom_read_byte_1((unsigned char*)EADR_DEVICE_COUNT);
    5cec:	82 e1       	ldi	r24, 0x12	; 18
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    5cf4:	80 93 8e 07 	sts	0x078E, r24
	link_state.g_xDevCount = 1;
    5cf8:	81 e0       	ldi	r24, 0x01	; 1
    5cfa:	80 93 8e 07 	sts	0x078E, r24

	//  ответа не ждем - ответ на предыдущий пакет только что обработан
	//link_state.g_linkStatus |= LINK_STATUS_NOREPLAY;

	//  в очереди готовых пакетов спецпакета нет - он только что отправлен
	//link_state.g_linkStatus &= ~LINK_STATUS_SPECPACKET;

	g_x232TimeOut = eeprom_read_byte_1((unsigned char*)EADR_X232_TIMEOUT);
    5cfe:	86 e1       	ldi	r24, 0x16	; 22
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    5d06:	80 93 fa 07 	sts	0x07FA, r24
	g_x232Interval = eeprom_read_byte_1((unsigned char*)EADR_X232_INTERVAL);
    5d0a:	87 e1       	ldi	r24, 0x17	; 23
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	0e 94 aa 39 	call	0x7354 <eeprom_read_byte_1>
    5d12:	80 93 8d 07 	sts	0x078D, r24
	if (g_x232Interval > 16)
    5d16:	80 91 8d 07 	lds	r24, 0x078D
    5d1a:	81 31       	cpi	r24, 0x11	; 17
    5d1c:	18 f0       	brcs	.+6      	; 0x5d24 <InitDevices+0x4c>
		g_x232Interval = 10;
    5d1e:	8a e0       	ldi	r24, 0x0A	; 10
    5d20:	80 93 8d 07 	sts	0x078D, r24

	//  читаем список устройств с адресами и параметрами
	//  читаем часть структуры XDEVICE, без массива таймаутов, который только в ОЗУ
	for (k = 0; k < MAX_DEVICE_COUNT; k++)
    5d24:	19 82       	std	Y+1, r1	; 0x01
    5d26:	89 81       	ldd	r24, Y+1	; 0x01
    5d28:	88 23       	and	r24, r24
    5d2a:	29 f5       	brne	.+74     	; 0x5d76 <InitDevices+0x9e>
	{
		epmrbl(&g_devList[k], (const uint8_t *)(EADR_DEVICE_LIST + k*sizeof(XDEVICE)),
    5d2c:	99 81       	ldd	r25, Y+1	; 0x01
    5d2e:	85 e1       	ldi	r24, 0x15	; 21
    5d30:	98 9f       	mul	r25, r24
    5d32:	c0 01       	movw	r24, r0
    5d34:	11 24       	eor	r1, r1
    5d36:	9c 01       	movw	r18, r24
    5d38:	20 50       	subi	r18, 0x00	; 0
    5d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3c:	99 81       	ldd	r25, Y+1	; 0x01
    5d3e:	85 e1       	ldi	r24, 0x15	; 21
    5d40:	98 9f       	mul	r25, r24
    5d42:	c0 01       	movw	r24, r0
    5d44:	11 24       	eor	r1, r1
    5d46:	89 54       	subi	r24, 0x49	; 73
    5d48:	98 4f       	sbci	r25, 0xF8	; 248
    5d4a:	45 e1       	ldi	r20, 0x15	; 21
    5d4c:	50 e0       	ldi	r21, 0x00	; 0
    5d4e:	b9 01       	movw	r22, r18
    5d50:	0e 94 08 39 	call	0x7210 <epmrbl>
			sizeof(XDEVICE)/* - 16*/);

		memset(&g_devList[k].sensorTimeout, 0, 16);
    5d54:	99 81       	ldd	r25, Y+1	; 0x01
    5d56:	85 e1       	ldi	r24, 0x15	; 21
    5d58:	98 9f       	mul	r25, r24
    5d5a:	c0 01       	movw	r24, r0
    5d5c:	11 24       	eor	r1, r1
    5d5e:	86 54       	subi	r24, 0x46	; 70
    5d60:	98 4f       	sbci	r25, 0xF8	; 248
    5d62:	40 e1       	ldi	r20, 0x10	; 16
    5d64:	50 e0       	ldi	r21, 0x00	; 0
    5d66:	60 e0       	ldi	r22, 0x00	; 0
    5d68:	70 e0       	ldi	r23, 0x00	; 0
    5d6a:	0e 94 11 4f 	call	0x9e22 <memset>
    5d6e:	89 81       	ldd	r24, Y+1	; 0x01
    5d70:	8f 5f       	subi	r24, 0xFF	; 255
    5d72:	89 83       	std	Y+1, r24	; 0x01
    5d74:	d8 cf       	rjmp	.-80     	; 0x5d26 <InitDevices+0x4e>
	}

	g_devList[0].adr = 0;
    5d76:	10 92 b7 07 	sts	0x07B7, r1
	g_devList[0].state = DEVSTATE_EXIST;
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	80 93 b8 07 	sts	0x07B8, r24
#ifdef NEWVG
	g_CurDev.ports = g_devList[0].ports;
    5d80:	80 91 b9 07 	lds	r24, 0x07B9
    5d84:	80 93 df 07 	sts	0x07DF, r24
	g_CurDev.ohrTimeout = g_devList[0].ohrTimeout;
    5d88:	80 91 ca 07 	lds	r24, 0x07CA
    5d8c:	90 91 cb 07 	lds	r25, 0x07CB
    5d90:	90 93 f8 07 	sts	0x07F8, r25
    5d94:	80 93 f7 07 	sts	0x07F7, r24
    5d98:	21 96       	adiw	r28, 0x01	; 1
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	f8 94       	cli
    5d9e:	de bf       	out	0x3e, r29	; 62
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	cd bf       	out	0x3d, r28	; 61
    5da4:	df 91       	pop	r29
    5da6:	cf 91       	pop	r28
    5da8:	08 95       	ret

00005daa <_SendPacket>:
#endif
}

//  используется в режиме ведомого (с компом)
void _SendPacket(void)
{
    5daa:	cf 93       	push	r28
    5dac:	df 93       	push	r29
    5dae:	cd b7       	in	r28, 0x3d	; 61
    5db0:	de b7       	in	r29, 0x3e	; 62
    5db2:	21 97       	sbiw	r28, 0x01	; 1
    5db4:	0f b6       	in	r0, 0x3f	; 63
    5db6:	f8 94       	cli
    5db8:	de bf       	out	0x3e, r29	; 62
    5dba:	0f be       	out	0x3f, r0	; 63
    5dbc:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;

	for (k = 0; k < PACKET_SIZE; k++)
    5dbe:	19 82       	std	Y+1, r1	; 0x01
    5dc0:	89 81       	ldd	r24, Y+1	; 0x01
    5dc2:	80 31       	cpi	r24, 0x10	; 16
    5dc4:	80 f4       	brcc	.+32     	; 0x5de6 <_SendPacket+0x3c>
		((pMas)(&g_readyPacket))[k] = ((pMas)&g_packetReply)[k];
    5dc6:	89 81       	ldd	r24, Y+1	; 0x01
    5dc8:	99 27       	eor	r25, r25
    5dca:	dc 01       	movw	r26, r24
    5dcc:	a9 55       	subi	r26, 0x59	; 89
    5dce:	b8 4f       	sbci	r27, 0xF8	; 248
    5dd0:	89 81       	ldd	r24, Y+1	; 0x01
    5dd2:	99 27       	eor	r25, r25
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	e3 53       	subi	r30, 0x33	; 51
    5dd8:	f8 4f       	sbci	r31, 0xF8	; 248
    5dda:	80 81       	ld	r24, Z
    5ddc:	8c 93       	st	X, r24
    5dde:	89 81       	ldd	r24, Y+1	; 0x01
    5de0:	8f 5f       	subi	r24, 0xFF	; 255
    5de2:	89 83       	std	Y+1, r24	; 0x01
    5de4:	ed cf       	rjmp	.-38     	; 0x5dc0 <_SendPacket+0x16>

	SendPacket_();
    5de6:	0e 94 fe 2e 	call	0x5dfc <SendPacket_>
    5dea:	21 96       	adiw	r28, 0x01	; 1
    5dec:	0f b6       	in	r0, 0x3f	; 63
    5dee:	f8 94       	cli
    5df0:	de bf       	out	0x3e, r29	; 62
    5df2:	0f be       	out	0x3f, r0	; 63
    5df4:	cd bf       	out	0x3d, r28	; 61
    5df6:	df 91       	pop	r29
    5df8:	cf 91       	pop	r28
    5dfa:	08 95       	ret

00005dfc <SendPacket_>:
}

//  вызывается из обработчика прерывания от таймера
void SendPacket_(void)
{
    5dfc:	cf 93       	push	r28
    5dfe:	df 93       	push	r29
    5e00:	cd b7       	in	r28, 0x3d	; 61
    5e02:	de b7       	in	r29, 0x3e	; 62
    5e04:	21 97       	sbiw	r28, 0x01	; 1
    5e06:	0f b6       	in	r0, 0x3f	; 63
    5e08:	f8 94       	cli
    5e0a:	de bf       	out	0x3e, r29	; 62
    5e0c:	0f be       	out	0x3f, r0	; 63
    5e0e:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;

	for (k = 0; k < PACKET_SIZE; k++)
    5e10:	19 82       	std	Y+1, r1	; 0x01
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	80 31       	cpi	r24, 0x10	; 16
    5e16:	c0 f4       	brcc	.+48     	; 0x5e48 <SendPacket_+0x4c>
	{
		//delay_loop_2(65530);
		USART_Transmit(((pMas)(&g_readyPacket))[k]);
    5e18:	89 81       	ldd	r24, Y+1	; 0x01
    5e1a:	99 27       	eor	r25, r25
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	e9 55       	subi	r30, 0x59	; 89
    5e20:	f8 4f       	sbci	r31, 0xF8	; 248
    5e22:	80 81       	ld	r24, Z
    5e24:	0e 94 60 2b 	call	0x56c0 <USART_Transmit>
		((pMas)(&g_lastPacket))[k] = ((pMas)(&g_readyPacket))[k];
    5e28:	89 81       	ldd	r24, Y+1	; 0x01
    5e2a:	99 27       	eor	r25, r25
    5e2c:	dc 01       	movw	r26, r24
    5e2e:	a3 58       	subi	r26, 0x83	; 131
    5e30:	b8 4f       	sbci	r27, 0xF8	; 248
    5e32:	89 81       	ldd	r24, Y+1	; 0x01
    5e34:	99 27       	eor	r25, r25
    5e36:	fc 01       	movw	r30, r24
    5e38:	e9 55       	subi	r30, 0x59	; 89
    5e3a:	f8 4f       	sbci	r31, 0xF8	; 248
    5e3c:	80 81       	ld	r24, Z
    5e3e:	8c 93       	st	X, r24
    5e40:	89 81       	ldd	r24, Y+1	; 0x01
    5e42:	8f 5f       	subi	r24, 0xFF	; 255
    5e44:	89 83       	std	Y+1, r24	; 0x01
    5e46:	e5 cf       	rjmp	.-54     	; 0x5e12 <SendPacket_+0x16>
    5e48:	21 96       	adiw	r28, 0x01	; 1
    5e4a:	0f b6       	in	r0, 0x3f	; 63
    5e4c:	f8 94       	cli
    5e4e:	de bf       	out	0x3e, r29	; 62
    5e50:	0f be       	out	0x3f, r0	; 63
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	df 91       	pop	r29
    5e56:	cf 91       	pop	r28
    5e58:	08 95       	ret

00005e5a <SendPacket>:
	}
}

void SendPacket(PPACKET packet)
{
    5e5a:	cf 93       	push	r28
    5e5c:	df 93       	push	r29
    5e5e:	cd b7       	in	r28, 0x3d	; 61
    5e60:	de b7       	in	r29, 0x3e	; 62
    5e62:	23 97       	sbiw	r28, 0x03	; 3
    5e64:	0f b6       	in	r0, 0x3f	; 63
    5e66:	f8 94       	cli
    5e68:	de bf       	out	0x3e, r29	; 62
    5e6a:	0f be       	out	0x3f, r0	; 63
    5e6c:	cd bf       	out	0x3d, r28	; 61
    5e6e:	9a 83       	std	Y+2, r25	; 0x02
    5e70:	89 83       	std	Y+1, r24	; 0x01
	unsigned char k;

	packet->marker = PACKET_MARKER;
    5e72:	e9 81       	ldd	r30, Y+1	; 0x01
    5e74:	fa 81       	ldd	r31, Y+2	; 0x02
    5e76:	85 ea       	ldi	r24, 0xA5	; 165
    5e78:	80 83       	st	Z, r24

	for (k = 0; k < PACKET_SIZE; k++)
    5e7a:	1b 82       	std	Y+3, r1	; 0x03
    5e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e7e:	80 31       	cpi	r24, 0x10	; 16
    5e80:	98 f4       	brcc	.+38     	; 0x5ea8 <SendPacket+0x4e>
		((pMas)(&g_readyPacket))[k] = ((pMas)packet)[k];
    5e82:	8b 81       	ldd	r24, Y+3	; 0x03
    5e84:	99 27       	eor	r25, r25
    5e86:	dc 01       	movw	r26, r24
    5e88:	a9 55       	subi	r26, 0x59	; 89
    5e8a:	b8 4f       	sbci	r27, 0xF8	; 248
    5e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e8e:	28 2f       	mov	r18, r24
    5e90:	33 27       	eor	r19, r19
    5e92:	89 81       	ldd	r24, Y+1	; 0x01
    5e94:	9a 81       	ldd	r25, Y+2	; 0x02
    5e96:	f9 01       	movw	r30, r18
    5e98:	e8 0f       	add	r30, r24
    5e9a:	f9 1f       	adc	r31, r25
    5e9c:	80 81       	ld	r24, Z
    5e9e:	8c 93       	st	X, r24
    5ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ea2:	8f 5f       	subi	r24, 0xFF	; 255
    5ea4:	8b 83       	std	Y+3, r24	; 0x03
    5ea6:	ea cf       	rjmp	.-44     	; 0x5e7c <SendPacket+0x22>

	link_state.g_linkStatus |= LINK_STATUS_SPECPACKET;
    5ea8:	80 91 90 07 	lds	r24, 0x0790
    5eac:	82 60       	ori	r24, 0x02	; 2
    5eae:	80 93 90 07 	sts	0x0790, r24
    5eb2:	23 96       	adiw	r28, 0x03	; 3
    5eb4:	0f b6       	in	r0, 0x3f	; 63
    5eb6:	f8 94       	cli
    5eb8:	de bf       	out	0x3e, r29	; 62
    5eba:	0f be       	out	0x3f, r0	; 63
    5ebc:	cd bf       	out	0x3d, r28	; 61
    5ebe:	df 91       	pop	r29
    5ec0:	cf 91       	pop	r28
    5ec2:	08 95       	ret

00005ec4 <SendCommand>:
}

void SendCommand(unsigned char adr, unsigned char type)
{
    5ec4:	cf 93       	push	r28
    5ec6:	df 93       	push	r29
    5ec8:	cd b7       	in	r28, 0x3d	; 61
    5eca:	de b7       	in	r29, 0x3e	; 62
    5ecc:	62 97       	sbiw	r28, 0x12	; 18
    5ece:	0f b6       	in	r0, 0x3f	; 63
    5ed0:	f8 94       	cli
    5ed2:	de bf       	out	0x3e, r29	; 62
    5ed4:	0f be       	out	0x3f, r0	; 63
    5ed6:	cd bf       	out	0x3d, r28	; 61
    5ed8:	89 83       	std	Y+1, r24	; 0x01
    5eda:	6a 83       	std	Y+2, r22	; 0x02
	PACKET packet;

	packet.adr = adr;
    5edc:	89 81       	ldd	r24, Y+1	; 0x01
    5ede:	8c 83       	std	Y+4, r24	; 0x04
	packet.type = type;
    5ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee2:	8d 83       	std	Y+5, r24	; 0x05

	SendPacket(&packet);
    5ee4:	ce 01       	movw	r24, r28
    5ee6:	03 96       	adiw	r24, 0x03	; 3
    5ee8:	0e 94 2d 2f 	call	0x5e5a <SendPacket>
    5eec:	62 96       	adiw	r28, 0x12	; 18
    5eee:	0f b6       	in	r0, 0x3f	; 63
    5ef0:	f8 94       	cli
    5ef2:	de bf       	out	0x3e, r29	; 62
    5ef4:	0f be       	out	0x3f, r0	; 63
    5ef6:	cd bf       	out	0x3d, r28	; 61
    5ef8:	df 91       	pop	r29
    5efa:	cf 91       	pop	r28
    5efc:	08 95       	ret

00005efe <HandleProtocol>:
}

//  выполняет текущую работу протокола -  опрос подключенных устройств
//  контекст прерывания SIG_OVERFLOW3 вызывается с интервалом
void HandleProtocol(void)
{
    5efe:	cf 93       	push	r28
    5f00:	df 93       	push	r29
    5f02:	cd b7       	in	r28, 0x3d	; 61
    5f04:	de b7       	in	r29, 0x3e	; 62
    5f06:	24 97       	sbiw	r28, 0x04	; 4
    5f08:	0f b6       	in	r0, 0x3f	; 63
    5f0a:	f8 94       	cli
    5f0c:	de bf       	out	0x3e, r29	; 62
    5f0e:	0f be       	out	0x3f, r0	; 63
    5f10:	cd bf       	out	0x3d, r28	; 61
	unsigned char state, devCount = link_state.g_xDevCount;
    5f12:	80 91 8e 07 	lds	r24, 0x078E
    5f16:	8a 83       	std	Y+2, r24	; 0x02
	unsigned short sensorTimeout;

	if (g_WaitableTimer)
    5f18:	80 91 7a 07 	lds	r24, 0x077A
    5f1c:	88 23       	and	r24, r24
    5f1e:	29 f0       	breq	.+10     	; 0x5f2a <HandleProtocol+0x2c>
		g_WaitableTimer--;
    5f20:	80 91 7a 07 	lds	r24, 0x077A
    5f24:	81 50       	subi	r24, 0x01	; 1
    5f26:	80 93 7a 07 	sts	0x077A, r24
/*
	if (link_state.g_linkStatus & LINK_STATUS_NOREPLAY)
	{	//  на предыдущий пакет ответа получено не было

		if (link_state.g_tryCount > MAX_TRY_COUNT)
		{	//  ну сколько уже можно!

			//  отключить это устройство - раз оно так делает...
			return;
		}

		link_state.g_tryCount++;
	}
*/
	if (link_state.g_linkStatus & LINK_STATUS_SPECPACKET)
    5f2a:	80 91 90 07 	lds	r24, 0x0790
    5f2e:	99 27       	eor	r25, r25
    5f30:	82 70       	andi	r24, 0x02	; 2
    5f32:	90 70       	andi	r25, 0x00	; 0
    5f34:	00 97       	sbiw	r24, 0x00	; 0
    5f36:	19 f0       	breq	.+6      	; 0x5f3e <HandleProtocol+0x40>
	{	//  если в очереди есть спецпакеты с запросом
		SendPacket_();
    5f38:	0e 94 fe 2e 	call	0x5dfc <SendPacket_>
    5f3c:	53 c0       	rjmp	.+166    	; 0x5fe4 <HandleProtocol+0xe6>
	}
	else
	{	//  посылаем очередной пакет протокола

		if (g_PollEnable)
    5f3e:	80 91 cc 07 	lds	r24, 0x07CC
    5f42:	88 23       	and	r24, r24
    5f44:	09 f4       	brne	.+2      	; 0x5f48 <HandleProtocol+0x4a>
    5f46:	4e c0       	rjmp	.+156    	; 0x5fe4 <HandleProtocol+0xe6>
		{
			g_readyPacket.type		=	CMD_GETSTATUS;
    5f48:	81 e0       	ldi	r24, 0x01	; 1
    5f4a:	80 93 a9 07 	sts	0x07A9, r24

			memset(&g_readyPacket.data, 0x41, 5);
    5f4e:	45 e0       	ldi	r20, 0x05	; 5
    5f50:	50 e0       	ldi	r21, 0x00	; 0
    5f52:	61 e4       	ldi	r22, 0x41	; 65
    5f54:	70 e0       	ldi	r23, 0x00	; 0
    5f56:	8a ea       	ldi	r24, 0xAA	; 170
    5f58:	97 e0       	ldi	r25, 0x07	; 7
    5f5a:	0e 94 11 4f 	call	0x9e22 <memset>

			g_readyPacket.marker 	= 	PACKET_MARKER;
    5f5e:	85 ea       	ldi	r24, 0xA5	; 165
    5f60:	80 93 a7 07 	sts	0x07A7, r24

			//  получаем состояние устройства
			state = g_devList[link_state.g_x232CurPollDev].state;
    5f64:	80 91 91 07 	lds	r24, 0x0791
    5f68:	28 2f       	mov	r18, r24
    5f6a:	33 27       	eor	r19, r19
    5f6c:	85 e1       	ldi	r24, 0x15	; 21
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	28 9f       	mul	r18, r24
    5f72:	a0 01       	movw	r20, r0
    5f74:	29 9f       	mul	r18, r25
    5f76:	50 0d       	add	r21, r0
    5f78:	38 9f       	mul	r19, r24
    5f7a:	50 0d       	add	r21, r0
    5f7c:	11 24       	eor	r1, r1
    5f7e:	ca 01       	movw	r24, r20
    5f80:	fc 01       	movw	r30, r24
    5f82:	e8 54       	subi	r30, 0x48	; 72
    5f84:	f8 4f       	sbci	r31, 0xF8	; 248
    5f86:	80 81       	ld	r24, Z
    5f88:	89 83       	std	Y+1, r24	; 0x01

			if ((state & DEVSTATE_EXIST) && (state & DEVSTATE_CONNECTED))
    5f8a:	89 81       	ldd	r24, Y+1	; 0x01
    5f8c:	99 27       	eor	r25, r25
    5f8e:	81 70       	andi	r24, 0x01	; 1
    5f90:	90 70       	andi	r25, 0x00	; 0
    5f92:	00 97       	sbiw	r24, 0x00	; 0
    5f94:	e1 f0       	breq	.+56     	; 0x5fce <HandleProtocol+0xd0>
    5f96:	89 81       	ldd	r24, Y+1	; 0x01
    5f98:	99 27       	eor	r25, r25
    5f9a:	82 70       	andi	r24, 0x02	; 2
    5f9c:	90 70       	andi	r25, 0x00	; 0
    5f9e:	00 97       	sbiw	r24, 0x00	; 0
    5fa0:	b1 f0       	breq	.+44     	; 0x5fce <HandleProtocol+0xd0>
			{	//  если подключено, посылаем ему стандартный протокольный пакет
				g_readyPacket.adr = g_devList[link_state.g_x232CurPollDev].adr;
    5fa2:	80 91 91 07 	lds	r24, 0x0791
    5fa6:	28 2f       	mov	r18, r24
    5fa8:	33 27       	eor	r19, r19
    5faa:	85 e1       	ldi	r24, 0x15	; 21
    5fac:	90 e0       	ldi	r25, 0x00	; 0
    5fae:	28 9f       	mul	r18, r24
    5fb0:	b0 01       	movw	r22, r0
    5fb2:	29 9f       	mul	r18, r25
    5fb4:	70 0d       	add	r23, r0
    5fb6:	38 9f       	mul	r19, r24
    5fb8:	70 0d       	add	r23, r0
    5fba:	11 24       	eor	r1, r1
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	fc 01       	movw	r30, r24
    5fc0:	e9 54       	subi	r30, 0x49	; 73
    5fc2:	f8 4f       	sbci	r31, 0xF8	; 248
    5fc4:	80 81       	ld	r24, Z
    5fc6:	80 93 a8 07 	sts	0x07A8, r24

				SendPacket_();
    5fca:	0e 94 fe 2e 	call	0x5dfc <SendPacket_>
			}

			//  готовимся опрашивать следующее устройство
			if (++link_state.g_x232CurPollDev == devCount)
    5fce:	80 91 91 07 	lds	r24, 0x0791
    5fd2:	8f 5f       	subi	r24, 0xFF	; 255
    5fd4:	98 2f       	mov	r25, r24
    5fd6:	90 93 91 07 	sts	0x0791, r25
    5fda:	8a 81       	ldd	r24, Y+2	; 0x02
    5fdc:	98 17       	cp	r25, r24
    5fde:	11 f4       	brne	.+4      	; 0x5fe4 <HandleProtocol+0xe6>
				link_state.g_x232CurPollDev = 0;
    5fe0:	10 92 91 07 	sts	0x0791, r1
		}
	}

	//  ответа не ждем - ответ на предыдущий пакет только что обработан
	link_state.g_linkStatus |= LINK_STATUS_NOREPLAY;
    5fe4:	80 91 90 07 	lds	r24, 0x0790
    5fe8:	81 60       	ori	r24, 0x01	; 1
    5fea:	80 93 90 07 	sts	0x0790, r24

	//  в очереди готовых пакетов спецпакета нет - он только что отправлен
	link_state.g_linkStatus &= ~LINK_STATUS_SPECPACKET;
    5fee:	80 91 90 07 	lds	r24, 0x0790
    5ff2:	8d 7f       	andi	r24, 0xFD	; 253
    5ff4:	80 93 90 07 	sts	0x0790, r24

	//  уменьшение времени задержки реакции на срабатывание датчика устройства Х
	for (state = 0; state < 8; state++)
    5ff8:	19 82       	std	Y+1, r1	; 0x01
    5ffa:	89 81       	ldd	r24, Y+1	; 0x01
    5ffc:	88 30       	cpi	r24, 0x08	; 8
    5ffe:	08 f0       	brcs	.+2      	; 0x6002 <HandleProtocol+0x104>
    6000:	52 c0       	rjmp	.+164    	; 0x60a6 <HandleProtocol+0x1a8>
	{
		//  если таймаут еще не кончился, уменьшаем его на число циклов, которые
		//  это устройство пропустило из-за наличия других устройств
		//  так сделано из-за накладности уменьшения таймаутов всех устройств
		//  в одном цикле сразу, поэтому при каждом вызове - одно устройство
		sensorTimeout = g_devList[g_DecTimeoutDev].sensorTimeout[state];
    6002:	89 81       	ldd	r24, Y+1	; 0x01
    6004:	48 2f       	mov	r20, r24
    6006:	55 27       	eor	r21, r21
    6008:	80 91 f9 07 	lds	r24, 0x07F9
    600c:	28 2f       	mov	r18, r24
    600e:	33 27       	eor	r19, r19
    6010:	85 e1       	ldi	r24, 0x15	; 21
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	28 9f       	mul	r18, r24
    6016:	b0 01       	movw	r22, r0
    6018:	29 9f       	mul	r18, r25
    601a:	70 0d       	add	r23, r0
    601c:	38 9f       	mul	r19, r24
    601e:	70 0d       	add	r23, r0
    6020:	11 24       	eor	r1, r1
    6022:	9b 01       	movw	r18, r22
    6024:	ca 01       	movw	r24, r20
    6026:	84 0f       	add	r24, r20
    6028:	95 1f       	adc	r25, r21
    602a:	82 0f       	add	r24, r18
    602c:	93 1f       	adc	r25, r19
    602e:	fc 01       	movw	r30, r24
    6030:	e6 54       	subi	r30, 0x46	; 70
    6032:	f8 4f       	sbci	r31, 0xF8	; 248
    6034:	80 81       	ld	r24, Z
    6036:	91 81       	ldd	r25, Z+1	; 0x01
    6038:	9c 83       	std	Y+4, r25	; 0x04
    603a:	8b 83       	std	Y+3, r24	; 0x03

		if (sensorTimeout >= devCount)
    603c:	8a 81       	ldd	r24, Y+2	; 0x02
    603e:	28 2f       	mov	r18, r24
    6040:	33 27       	eor	r19, r19
    6042:	8b 81       	ldd	r24, Y+3	; 0x03
    6044:	9c 81       	ldd	r25, Y+4	; 0x04
    6046:	82 17       	cp	r24, r18
    6048:	93 07       	cpc	r25, r19
    604a:	50 f0       	brcs	.+20     	; 0x6060 <HandleProtocol+0x162>
			sensorTimeout = sensorTimeout - devCount;
    604c:	8a 81       	ldd	r24, Y+2	; 0x02
    604e:	28 2f       	mov	r18, r24
    6050:	33 27       	eor	r19, r19
    6052:	8b 81       	ldd	r24, Y+3	; 0x03
    6054:	9c 81       	ldd	r25, Y+4	; 0x04
    6056:	82 1b       	sub	r24, r18
    6058:	93 0b       	sbc	r25, r19
    605a:	9c 83       	std	Y+4, r25	; 0x04
    605c:	8b 83       	std	Y+3, r24	; 0x03
    605e:	02 c0       	rjmp	.+4      	; 0x6064 <HandleProtocol+0x166>
		else
			sensorTimeout = 0;
    6060:	1c 82       	std	Y+4, r1	; 0x04
    6062:	1b 82       	std	Y+3, r1	; 0x03

		g_devList[g_DecTimeoutDev].sensorTimeout[state] = sensorTimeout;
    6064:	89 81       	ldd	r24, Y+1	; 0x01
    6066:	48 2f       	mov	r20, r24
    6068:	55 27       	eor	r21, r21
    606a:	80 91 f9 07 	lds	r24, 0x07F9
    606e:	28 2f       	mov	r18, r24
    6070:	33 27       	eor	r19, r19
    6072:	85 e1       	ldi	r24, 0x15	; 21
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	28 9f       	mul	r18, r24
    6078:	b0 01       	movw	r22, r0
    607a:	29 9f       	mul	r18, r25
    607c:	70 0d       	add	r23, r0
    607e:	38 9f       	mul	r19, r24
    6080:	70 0d       	add	r23, r0
    6082:	11 24       	eor	r1, r1
    6084:	9b 01       	movw	r18, r22
    6086:	ca 01       	movw	r24, r20
    6088:	84 0f       	add	r24, r20
    608a:	95 1f       	adc	r25, r21
    608c:	82 0f       	add	r24, r18
    608e:	93 1f       	adc	r25, r19
    6090:	fc 01       	movw	r30, r24
    6092:	e6 54       	subi	r30, 0x46	; 70
    6094:	f8 4f       	sbci	r31, 0xF8	; 248
    6096:	8b 81       	ldd	r24, Y+3	; 0x03
    6098:	9c 81       	ldd	r25, Y+4	; 0x04
    609a:	91 83       	std	Z+1, r25	; 0x01
    609c:	80 83       	st	Z, r24
    609e:	89 81       	ldd	r24, Y+1	; 0x01
    60a0:	8f 5f       	subi	r24, 0xFF	; 255
    60a2:	89 83       	std	Y+1, r24	; 0x01
    60a4:	aa cf       	rjmp	.-172    	; 0x5ffa <HandleProtocol+0xfc>
	}

	//  в следующий раз будем работать с другим устройством (циклический перебор)
	if (++g_DecTimeoutDev >= devCount)
    60a6:	80 91 f9 07 	lds	r24, 0x07F9
    60aa:	8f 5f       	subi	r24, 0xFF	; 255
    60ac:	98 2f       	mov	r25, r24
    60ae:	90 93 f9 07 	sts	0x07F9, r25
    60b2:	8a 81       	ldd	r24, Y+2	; 0x02
    60b4:	98 17       	cp	r25, r24
    60b6:	10 f0       	brcs	.+4      	; 0x60bc <HandleProtocol+0x1be>
		g_DecTimeoutDev = 0;
    60b8:	10 92 f9 07 	sts	0x07F9, r1
    60bc:	24 96       	adiw	r28, 0x04	; 4
    60be:	0f b6       	in	r0, 0x3f	; 63
    60c0:	f8 94       	cli
    60c2:	de bf       	out	0x3e, r29	; 62
    60c4:	0f be       	out	0x3f, r0	; 63
    60c6:	cd bf       	out	0x3d, r28	; 61
    60c8:	df 91       	pop	r29
    60ca:	cf 91       	pop	r28
    60cc:	08 95       	ret

000060ce <GetTime>:
}

void GetTime(void)
{
    60ce:	cf 93       	push	r28
    60d0:	df 93       	push	r29
    60d2:	cd b7       	in	r28, 0x3d	; 61
    60d4:	de b7       	in	r29, 0x3e	; 62
    60d6:	27 97       	sbiw	r28, 0x07	; 7
    60d8:	0f b6       	in	r0, 0x3f	; 63
    60da:	f8 94       	cli
    60dc:	de bf       	out	0x3e, r29	; 62
    60de:	0f be       	out	0x3f, r0	; 63
    60e0:	cd bf       	out	0x3d, r28	; 61
	RTC_TIME rtc;

	ReadTime(&rtc);
    60e2:	ce 01       	movw	r24, r28
    60e4:	01 96       	adiw	r24, 0x01	; 1
    60e6:	0e 94 ec 2b 	call	0x57d8 <ReadTime>

	g_packetReply.data[0] = rtc.hour;
    60ea:	8b 81       	ldd	r24, Y+3	; 0x03
    60ec:	80 93 d0 07 	sts	0x07D0, r24
	g_packetReply.data[1] = rtc.min;
    60f0:	8a 81       	ldd	r24, Y+2	; 0x02
    60f2:	80 93 d1 07 	sts	0x07D1, r24
	g_packetReply.data[2] = rtc.day;
    60f6:	8d 81       	ldd	r24, Y+5	; 0x05
    60f8:	80 93 d2 07 	sts	0x07D2, r24
	g_packetReply.data[3] = rtc.month;
    60fc:	8e 81       	ldd	r24, Y+6	; 0x06
    60fe:	80 93 d3 07 	sts	0x07D3, r24
	g_packetReply.data[4] = rtc.year;
    6102:	8f 81       	ldd	r24, Y+7	; 0x07
    6104:	80 93 d4 07 	sts	0x07D4, r24
    6108:	27 96       	adiw	r28, 0x07	; 7
    610a:	0f b6       	in	r0, 0x3f	; 63
    610c:	f8 94       	cli
    610e:	de bf       	out	0x3e, r29	; 62
    6110:	0f be       	out	0x3f, r0	; 63
    6112:	cd bf       	out	0x3d, r28	; 61
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	08 95       	ret

0000611a <SetTime>:
}

void SetTime(void)
{
    611a:	cf 93       	push	r28
    611c:	df 93       	push	r29
    611e:	cd b7       	in	r28, 0x3d	; 61
    6120:	de b7       	in	r29, 0x3e	; 62
    6122:	27 97       	sbiw	r28, 0x07	; 7
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	de bf       	out	0x3e, r29	; 62
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	cd bf       	out	0x3d, r28	; 61
	RTC_TIME rtc;

	rtc.hour = g_packetReply.data[0];
    612e:	80 91 d0 07 	lds	r24, 0x07D0
    6132:	8b 83       	std	Y+3, r24	; 0x03
	rtc.min = g_packetReply.data[1];
    6134:	80 91 d1 07 	lds	r24, 0x07D1
    6138:	8a 83       	std	Y+2, r24	; 0x02
	rtc.sec = 0;
    613a:	19 82       	std	Y+1, r1	; 0x01
	rtc.day = g_packetReply.data[2];
    613c:	80 91 d2 07 	lds	r24, 0x07D2
    6140:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = g_packetReply.data[3];
    6142:	80 91 d3 07 	lds	r24, 0x07D3
    6146:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = g_packetReply.data[4];
    6148:	80 91 d4 07 	lds	r24, 0x07D4
    614c:	8f 83       	std	Y+7, r24	; 0x07

	if ((rtc.hour > 0x23) || (rtc.min > 0x59) || (rtc.sec > 0x59) ||
    614e:	8b 81       	ldd	r24, Y+3	; 0x03
    6150:	84 32       	cpi	r24, 0x24	; 36
    6152:	98 f4       	brcc	.+38     	; 0x617a <SetTime+0x60>
    6154:	8a 81       	ldd	r24, Y+2	; 0x02
    6156:	8a 35       	cpi	r24, 0x5A	; 90
    6158:	80 f4       	brcc	.+32     	; 0x617a <SetTime+0x60>
    615a:	89 81       	ldd	r24, Y+1	; 0x01
    615c:	8a 35       	cpi	r24, 0x5A	; 90
    615e:	68 f4       	brcc	.+26     	; 0x617a <SetTime+0x60>
    6160:	8d 81       	ldd	r24, Y+5	; 0x05
    6162:	82 33       	cpi	r24, 0x32	; 50
    6164:	50 f4       	brcc	.+20     	; 0x617a <SetTime+0x60>
    6166:	8e 81       	ldd	r24, Y+6	; 0x06
    6168:	83 31       	cpi	r24, 0x13	; 19
    616a:	38 f4       	brcc	.+14     	; 0x617a <SetTime+0x60>
    616c:	8f 81       	ldd	r24, Y+7	; 0x07
    616e:	86 30       	cpi	r24, 0x06	; 6
    6170:	20 f0       	brcs	.+8      	; 0x617a <SetTime+0x60>
		(rtc.day > 0x31) || (rtc.month > 0x12) || (rtc.year < 0x06))
		return ;

	WriteTime(&rtc);
    6172:	ce 01       	movw	r24, r28
    6174:	01 96       	adiw	r24, 0x01	; 1
    6176:	0e 94 2b 2d 	call	0x5a56 <WriteTime>
    617a:	27 96       	adiw	r28, 0x07	; 7
    617c:	0f b6       	in	r0, 0x3f	; 63
    617e:	f8 94       	cli
    6180:	de bf       	out	0x3e, r29	; 62
    6182:	0f be       	out	0x3f, r0	; 63
    6184:	cd bf       	out	0x3d, r28	; 61
    6186:	df 91       	pop	r29
    6188:	cf 91       	pop	r28
    618a:	08 95       	ret

0000618c <HandleReply>:
}

//  контекст прерывания SIG_UART0_RECV
void HandleReply(void)
{
    618c:	cf 93       	push	r28
    618e:	df 93       	push	r29
    6190:	cd b7       	in	r28, 0x3d	; 61
    6192:	de b7       	in	r29, 0x3e	; 62
    6194:	23 97       	sbiw	r28, 0x03	; 3
    6196:	0f b6       	in	r0, 0x3f	; 63
    6198:	f8 94       	cli
    619a:	de bf       	out	0x3e, r29	; 62
    619c:	0f be       	out	0x3f, r0	; 63
    619e:	cd bf       	out	0x3d, r28	; 61
	unsigned char e;
	unsigned char byte = UDR0;
    61a0:	80 91 2c 00 	lds	r24, 0x002C
    61a4:	8a 83       	std	Y+2, r24	; 0x02

	if (UCSR0A & _BV(FE))
    61a6:	80 91 2b 00 	lds	r24, 0x002B
    61aa:	99 27       	eor	r25, r25
    61ac:	80 71       	andi	r24, 0x10	; 16
    61ae:	90 70       	andi	r25, 0x00	; 0
    61b0:	00 97       	sbiw	r24, 0x00	; 0
    61b2:	89 f0       	breq	.+34     	; 0x61d6 <HandleReply+0x4a>
	{
		link_state.g_linkStatus |= LINK_STATUS_FE;
    61b4:	80 91 90 07 	lds	r24, 0x0790
    61b8:	80 61       	ori	r24, 0x10	; 16
    61ba:	80 93 90 07 	sts	0x0790, r24
		ClearScreen();
    61be:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		OutStr("FE");
    61c2:	88 e6       	ldi	r24, 0x68	; 104
    61c4:	95 e0       	ldi	r25, 0x05	; 5
    61c6:	0e 94 24 29 	call	0x5248 <OutStr>
		e = UDR0;		//  так надо, чтобы опустошить буфер???
    61ca:	80 91 2c 00 	lds	r24, 0x002C
    61ce:	89 83       	std	Y+1, r24	; 0x01
		g_packetReplyPos = 0;
    61d0:	10 92 67 06 	sts	0x0667, r1
		return;
    61d4:	20 c1       	rjmp	.+576    	; 0x6416 <HandleReply+0x28a>
	};
	if (UCSR0A & _BV(UPE))
    61d6:	80 91 2b 00 	lds	r24, 0x002B
    61da:	99 27       	eor	r25, r25
    61dc:	84 70       	andi	r24, 0x04	; 4
    61de:	90 70       	andi	r25, 0x00	; 0
    61e0:	00 97       	sbiw	r24, 0x00	; 0
    61e2:	89 f0       	breq	.+34     	; 0x6206 <HandleReply+0x7a>
	{
		link_state.g_linkStatus |= LINK_STATUS_PE;
    61e4:	80 91 90 07 	lds	r24, 0x0790
    61e8:	80 62       	ori	r24, 0x20	; 32
    61ea:	80 93 90 07 	sts	0x0790, r24
		ClearScreen();
    61ee:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		OutStr("PE");
    61f2:	8b e6       	ldi	r24, 0x6B	; 107
    61f4:	95 e0       	ldi	r25, 0x05	; 5
    61f6:	0e 94 24 29 	call	0x5248 <OutStr>
		e = UDR0;
    61fa:	80 91 2c 00 	lds	r24, 0x002C
    61fe:	89 83       	std	Y+1, r24	; 0x01
		g_packetReplyPos = 0;
    6200:	10 92 67 06 	sts	0x0667, r1
		return;
    6204:	08 c1       	rjmp	.+528    	; 0x6416 <HandleReply+0x28a>
	};
	if (UCSR0A & _BV(DOR))
    6206:	80 91 2b 00 	lds	r24, 0x002B
    620a:	99 27       	eor	r25, r25
    620c:	88 70       	andi	r24, 0x08	; 8
    620e:	90 70       	andi	r25, 0x00	; 0
    6210:	00 97       	sbiw	r24, 0x00	; 0
    6212:	a1 f0       	breq	.+40     	; 0x623c <HandleReply+0xb0>
	{
		link_state.g_linkStatus |= LINK_STATUS_DOR;
    6214:	80 91 90 07 	lds	r24, 0x0790
    6218:	88 60       	ori	r24, 0x08	; 8
    621a:	80 93 90 07 	sts	0x0790, r24
		ClearScreen();
    621e:	0e 94 79 29 	call	0x52f2 <ClearScreen>
		OutStr("DOR");
    6222:	8e e6       	ldi	r24, 0x6E	; 110
    6224:	95 e0       	ldi	r25, 0x05	; 5
    6226:	0e 94 24 29 	call	0x5248 <OutStr>
		e = UDR0;e = UDR0;
    622a:	80 91 2c 00 	lds	r24, 0x002C
    622e:	89 83       	std	Y+1, r24	; 0x01
    6230:	80 91 2c 00 	lds	r24, 0x002C
    6234:	89 83       	std	Y+1, r24	; 0x01
		g_packetReplyPos = 0;		//  бракуем весь текущий пакет
    6236:	10 92 67 06 	sts	0x0667, r1
		return;
    623a:	ed c0       	rjmp	.+474    	; 0x6416 <HandleReply+0x28a>
	}

	if (g_StreamMode)
    623c:	80 91 a2 07 	lds	r24, 0x07A2
    6240:	88 23       	and	r24, r24
    6242:	09 f4       	brne	.+2      	; 0x6246 <HandleReply+0xba>
    6244:	64 c0       	rjmp	.+200    	; 0x630e <HandleReply+0x182>
	{
		AT45WriteByteToBuffer(g_packetReplyPos, byte);
    6246:	6a 81       	ldd	r22, Y+2	; 0x02
    6248:	80 91 67 06 	lds	r24, 0x0667
    624c:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>

		g_StreamCurByteCounter++;
    6250:	80 91 a5 07 	lds	r24, 0x07A5
    6254:	90 91 a6 07 	lds	r25, 0x07A6
    6258:	01 96       	adiw	r24, 0x01	; 1
    625a:	90 93 a6 07 	sts	0x07A6, r25
    625e:	80 93 a5 07 	sts	0x07A5, r24

		if (512 == g_StreamCurByteCounter)
    6262:	80 91 a5 07 	lds	r24, 0x07A5
    6266:	90 91 a6 07 	lds	r25, 0x07A6
    626a:	22 e0       	ldi	r18, 0x02	; 2
    626c:	80 30       	cpi	r24, 0x00	; 0
    626e:	92 07       	cpc	r25, r18
    6270:	09 f0       	breq	.+2      	; 0x6274 <HandleReply+0xe8>
    6272:	d1 c0       	rjmp	.+418    	; 0x6416 <HandleReply+0x28a>
		{	//  вот так, незаметно, набралась целая страница...

			g_StreamCurByteCounter = 0;
    6274:	10 92 a6 07 	sts	0x07A6, r1
    6278:	10 92 a5 07 	sts	0x07A5, r1

			AT45WriteBufferToPage(g_packetReplyPos, g_StreamStartPage);
    627c:	60 91 7b 07 	lds	r22, 0x077B
    6280:	70 91 7c 07 	lds	r23, 0x077C
    6284:	80 91 67 06 	lds	r24, 0x0667
    6288:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>
			ClearScreen();
    628c:	0e 94 79 29 	call	0x52f2 <ClearScreen>
			OutStr(itoa(g_StreamStartPage, (unsigned char*)&g_szInput, 10));
    6290:	4a e0       	ldi	r20, 0x0A	; 10
    6292:	50 e0       	ldi	r21, 0x00	; 0
    6294:	62 e2       	ldi	r22, 0x22	; 34
    6296:	76 e0       	ldi	r23, 0x06	; 6
    6298:	80 91 7b 07 	lds	r24, 0x077B
    629c:	90 91 7c 07 	lds	r25, 0x077C
    62a0:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    62a4:	0e 94 24 29 	call	0x5248 <OutStr>

			if (g_packetReplyPos)
    62a8:	80 91 67 06 	lds	r24, 0x0667
    62ac:	88 23       	and	r24, r24
    62ae:	19 f0       	breq	.+6      	; 0x62b6 <HandleReply+0x12a>
				g_packetReplyPos = 0;
    62b0:	10 92 67 06 	sts	0x0667, r1
    62b4:	03 c0       	rjmp	.+6      	; 0x62bc <HandleReply+0x130>
			else
				g_packetReplyPos = 1;
    62b6:	81 e0       	ldi	r24, 0x01	; 1
    62b8:	80 93 67 06 	sts	0x0667, r24

			AT45SetWriteBufferPos(g_packetReplyPos, 0);
    62bc:	60 e0       	ldi	r22, 0x00	; 0
    62be:	70 e0       	ldi	r23, 0x00	; 0
    62c0:	80 91 67 06 	lds	r24, 0x0667
    62c4:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
			g_StreamStartPage++;
    62c8:	80 91 7b 07 	lds	r24, 0x077B
    62cc:	90 91 7c 07 	lds	r25, 0x077C
    62d0:	01 96       	adiw	r24, 0x01	; 1
    62d2:	90 93 7c 07 	sts	0x077C, r25
    62d6:	80 93 7b 07 	sts	0x077B, r24

			if (g_StreamStartPage == g_StreamEndPage)
    62da:	20 91 7b 07 	lds	r18, 0x077B
    62de:	30 91 7c 07 	lds	r19, 0x077C
    62e2:	80 91 a3 07 	lds	r24, 0x07A3
    62e6:	90 91 a4 07 	lds	r25, 0x07A4
    62ea:	28 17       	cp	r18, r24
    62ec:	39 07       	cpc	r19, r25
    62ee:	09 f0       	breq	.+2      	; 0x62f2 <HandleReply+0x166>
    62f0:	92 c0       	rjmp	.+292    	; 0x6416 <HandleReply+0x28a>
			{	//  записали весь поток
				g_StreamMode = 0;
    62f2:	10 92 a2 07 	sts	0x07A2, r1
				g_packetReplyPos = 0;				//  на всякий случай
    62f6:	10 92 67 06 	sts	0x0667, r1
				ClearScreen();
    62fa:	0e 94 79 29 	call	0x52f2 <ClearScreen>
				OutStr("End write");
    62fe:	82 e7       	ldi	r24, 0x72	; 114
    6300:	95 e0       	ldi	r25, 0x05	; 5
    6302:	0e 94 24 29 	call	0x5248 <OutStr>
				g_ShowTime = 1;
    6306:	81 e0       	ldi	r24, 0x01	; 1
    6308:	80 93 f7 06 	sts	0x06F7, r24
			}
		}

		return;
    630c:	84 c0       	rjmp	.+264    	; 0x6416 <HandleReply+0x28a>
	}

	unsigned char packetReplyPos = g_packetReplyPos;
    630e:	80 91 67 06 	lds	r24, 0x0667
    6312:	8b 83       	std	Y+3, r24	; 0x03

	//  если ждем начало пакета, а пришло непонятно-что - ничего не знаем
	if (!packetReplyPos)
    6314:	8b 81       	ldd	r24, Y+3	; 0x03
    6316:	88 23       	and	r24, r24
    6318:	21 f4       	brne	.+8      	; 0x6322 <HandleReply+0x196>
		if (PACKET_MARKER != byte)
    631a:	8a 81       	ldd	r24, Y+2	; 0x02
    631c:	85 3a       	cpi	r24, 0xA5	; 165
    631e:	09 f0       	breq	.+2      	; 0x6322 <HandleReply+0x196>
			return;
    6320:	7a c0       	rjmp	.+244    	; 0x6416 <HandleReply+0x28a>

	((pMas)(&g_packetReply))[packetReplyPos] = byte;
    6322:	8b 81       	ldd	r24, Y+3	; 0x03
    6324:	99 27       	eor	r25, r25
    6326:	fc 01       	movw	r30, r24
    6328:	e3 53       	subi	r30, 0x33	; 51
    632a:	f8 4f       	sbci	r31, 0xF8	; 248
    632c:	8a 81       	ldd	r24, Y+2	; 0x02
    632e:	80 83       	st	Z, r24

	packetReplyPos++;		//  место в пакете для следующего байта
    6330:	8b 81       	ldd	r24, Y+3	; 0x03
    6332:	8f 5f       	subi	r24, 0xFF	; 255
    6334:	8b 83       	std	Y+3, r24	; 0x03

	if (PACKET_SIZE == packetReplyPos)
    6336:	8b 81       	ldd	r24, Y+3	; 0x03
    6338:	80 31       	cpi	r24, 0x10	; 16
    633a:	09 f0       	breq	.+2      	; 0x633e <HandleReply+0x1b2>
    633c:	69 c0       	rjmp	.+210    	; 0x6410 <HandleReply+0x284>
	{	//  пришел наконец пакет
		packetReplyPos = 0;
    633e:	1b 82       	std	Y+3, r1	; 0x03

		if (VG_ADR == g_packetReply.adr)
    6340:	80 91 ce 07 	lds	r24, 0x07CE
    6344:	82 30       	cpi	r24, 0x02	; 2
    6346:	19 f4       	brne	.+6      	; 0x634e <HandleReply+0x1c2>
		{	//  это "личный" пакет для меня -
			HandlePrivatePacket();
    6348:	0e 94 ea 33 	call	0x67d4 <HandlePrivatePacket>
    634c:	61 c0       	rjmp	.+194    	; 0x6410 <HandleReply+0x284>
		}else
		{
			if ((g_packetReply.adr == g_lastPacket.adr) &&
    634e:	90 91 ce 07 	lds	r25, 0x07CE
    6352:	80 91 7e 07 	lds	r24, 0x077E
    6356:	98 17       	cp	r25, r24
    6358:	09 f0       	breq	.+2      	; 0x635c <HandleReply+0x1d0>
    635a:	5a c0       	rjmp	.+180    	; 0x6410 <HandleReply+0x284>
    635c:	90 91 cf 07 	lds	r25, 0x07CF
    6360:	80 91 7f 07 	lds	r24, 0x077F
    6364:	98 17       	cp	r25, r24
    6366:	09 f0       	breq	.+2      	; 0x636a <HandleReply+0x1de>
    6368:	53 c0       	rjmp	.+166    	; 0x6410 <HandleReply+0x284>
				(g_packetReply.type == g_lastPacket.type))
			{
				//  если это отклик на последний запрос - неотвеченных запросов нет
				link_state.g_linkStatus &= ~LINK_STATUS_NOREPLAY;
    636a:	80 91 90 07 	lds	r24, 0x0790
    636e:	8e 7f       	andi	r24, 0xFE	; 254
    6370:	80 93 90 07 	sts	0x0790, r24

				PORTB ^= HF;
    6374:	90 91 38 00 	lds	r25, 0x0038
    6378:	80 e8       	ldi	r24, 0x80	; 128
    637a:	89 27       	eor	r24, r25
    637c:	80 93 38 00 	sts	0x0038, r24

				//  сбрасываем флаг ожидания ответа на GetRespond
				link_state.g_linkStatus &= ~LINK_STATUS_RESPOND;
    6380:	80 91 90 07 	lds	r24, 0x0790
    6384:	8b 7f       	andi	r24, 0xFB	; 251
    6386:	80 93 90 07 	sts	0x0790, r24
				link_state.g_tryCount = 0;
    638a:	10 92 8f 07 	sts	0x078F, r1

				if (CMD_CONNECT == g_packetReply.type)
    638e:	80 91 cf 07 	lds	r24, 0x07CF
    6392:	88 23       	and	r24, r24
    6394:	31 f5       	brne	.+76     	; 0x63e2 <HandleReply+0x256>
					//  это ответ на запрос подключения - устройство подключено
					g_devList[link_state.g_x232CurPollDev].state |= DEVSTATE_CONNECTED;
    6396:	80 91 91 07 	lds	r24, 0x0791
    639a:	28 2f       	mov	r18, r24
    639c:	33 27       	eor	r19, r19
    639e:	85 e1       	ldi	r24, 0x15	; 21
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	28 9f       	mul	r18, r24
    63a4:	a0 01       	movw	r20, r0
    63a6:	29 9f       	mul	r18, r25
    63a8:	50 0d       	add	r21, r0
    63aa:	38 9f       	mul	r19, r24
    63ac:	50 0d       	add	r21, r0
    63ae:	11 24       	eor	r1, r1
    63b0:	ca 01       	movw	r24, r20
    63b2:	dc 01       	movw	r26, r24
    63b4:	a8 54       	subi	r26, 0x48	; 72
    63b6:	b8 4f       	sbci	r27, 0xF8	; 248
    63b8:	80 91 91 07 	lds	r24, 0x0791
    63bc:	28 2f       	mov	r18, r24
    63be:	33 27       	eor	r19, r19
    63c0:	85 e1       	ldi	r24, 0x15	; 21
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	28 9f       	mul	r18, r24
    63c6:	a0 01       	movw	r20, r0
    63c8:	29 9f       	mul	r18, r25
    63ca:	50 0d       	add	r21, r0
    63cc:	38 9f       	mul	r19, r24
    63ce:	50 0d       	add	r21, r0
    63d0:	11 24       	eor	r1, r1
    63d2:	ca 01       	movw	r24, r20
    63d4:	fc 01       	movw	r30, r24
    63d6:	e8 54       	subi	r30, 0x48	; 72
    63d8:	f8 4f       	sbci	r31, 0xF8	; 248
    63da:	80 81       	ld	r24, Z
    63dc:	82 60       	ori	r24, 0x02	; 2
    63de:	8c 93       	st	X, r24
    63e0:	17 c0       	rjmp	.+46     	; 0x6410 <HandleReply+0x284>
				else
				if (CMD_GETSTATUS == g_packetReply.type)
    63e2:	80 91 cf 07 	lds	r24, 0x07CF
    63e6:	81 30       	cpi	r24, 0x01	; 1
    63e8:	99 f4       	brne	.+38     	; 0x6410 <HandleReply+0x284>
				{
					g_CurDev.adr = g_packetReply.adr;
    63ea:	80 91 ce 07 	lds	r24, 0x07CE
    63ee:	80 93 dd 07 	sts	0x07DD, r24

					//  разрешать обработку только тогда, когда пославшее сигнал
					//  устройство под охраной - а то они такого нашлют...
					if ((g_packetReply.data[0] & _BV(DS_OHRANA)) == _BV(DS_OHRANA))
    63f2:	80 91 d0 07 	lds	r24, 0x07D0
    63f6:	99 27       	eor	r25, r25
    63f8:	81 70       	andi	r24, 0x01	; 1
    63fa:	90 70       	andi	r25, 0x00	; 0
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	21 f0       	breq	.+8      	; 0x6408 <HandleReply+0x27c>
						SensorsStateChangeNotify(g_packetReply.data[2]);
    6400:	80 91 d2 07 	lds	r24, 0x07D2
    6404:	0e 94 d1 20 	call	0x41a2 <SensorsStateChangeNotify>

					g_CurDev.ports_state = g_packetReply.data[2];
    6408:	80 91 d2 07 	lds	r24, 0x07D2
    640c:	80 93 e0 07 	sts	0x07E0, r24
				}
			}else
			{
/*
				OutData(g_packetReply.adr);
				OutData(g_lastPacket.adr);
				OutData(g_packetReply.type);
				OutData(g_lastPacket.type);
*/			}
		}
	}

	g_packetReplyPos = packetReplyPos;
    6410:	8b 81       	ldd	r24, Y+3	; 0x03
    6412:	80 93 67 06 	sts	0x0667, r24
    6416:	23 96       	adiw	r28, 0x03	; 3
    6418:	0f b6       	in	r0, 0x3f	; 63
    641a:	f8 94       	cli
    641c:	de bf       	out	0x3e, r29	; 62
    641e:	0f be       	out	0x3f, r0	; 63
    6420:	cd bf       	out	0x3d, r28	; 61
    6422:	df 91       	pop	r29
    6424:	cf 91       	pop	r28
    6426:	08 95       	ret

00006428 <ConnectToDevice>:

	return;
}

// подключаемся к устройству и ждем ответа
char ConnectToDevice(void)
{
    6428:	cf 93       	push	r28
    642a:	df 93       	push	r29
    642c:	cd b7       	in	r28, 0x3d	; 61
    642e:	de b7       	in	r29, 0x3e	; 62
    6430:	60 97       	sbiw	r28, 0x10	; 16
    6432:	0f b6       	in	r0, 0x3f	; 63
    6434:	f8 94       	cli
    6436:	de bf       	out	0x3e, r29	; 62
    6438:	0f be       	out	0x3f, r0	; 63
    643a:	cd bf       	out	0x3d, r28	; 61
	PACKET packet;

	packet.marker	=	0xA5;
    643c:	85 ea       	ldi	r24, 0xA5	; 165
    643e:	89 83       	std	Y+1, r24	; 0x01
	packet.type		=	CMD_CONNECT;
    6440:	1b 82       	std	Y+3, r1	; 0x03
	packet.adr		=	g_CurDev.adr;
    6442:	80 91 dd 07 	lds	r24, 0x07DD
    6446:	8a 83       	std	Y+2, r24	; 0x02
	packet.data[0]	=	0;
    6448:	1c 82       	std	Y+4, r1	; 0x04

	return GetRespond(&packet);
    644a:	ce 01       	movw	r24, r28
    644c:	01 96       	adiw	r24, 0x01	; 1
    644e:	0e 94 1b 33 	call	0x6636 <GetRespond>
    6452:	99 27       	eor	r25, r25
    6454:	87 fd       	sbrc	r24, 7
    6456:	90 95       	com	r25
    6458:	60 96       	adiw	r28, 0x10	; 16
    645a:	0f b6       	in	r0, 0x3f	; 63
    645c:	f8 94       	cli
    645e:	de bf       	out	0x3e, r29	; 62
    6460:	0f be       	out	0x3f, r0	; 63
    6462:	cd bf       	out	0x3d, r28	; 61
    6464:	df 91       	pop	r29
    6466:	cf 91       	pop	r28
    6468:	08 95       	ret

0000646a <SendAll>:
}

void SendAll(unsigned char cmd)
{
    646a:	cf 93       	push	r28
    646c:	df 93       	push	r29
    646e:	cd b7       	in	r28, 0x3d	; 61
    6470:	de b7       	in	r29, 0x3e	; 62
    6472:	62 97       	sbiw	r28, 0x12	; 18
    6474:	0f b6       	in	r0, 0x3f	; 63
    6476:	f8 94       	cli
    6478:	de bf       	out	0x3e, r29	; 62
    647a:	0f be       	out	0x3f, r0	; 63
    647c:	cd bf       	out	0x3d, r28	; 61
    647e:	89 83       	std	Y+1, r24	; 0x01
	PACKET packet;
	unsigned char k;

	packet.marker	=	0xA5;
    6480:	85 ea       	ldi	r24, 0xA5	; 165
    6482:	8a 83       	std	Y+2, r24	; 0x02
	packet.type		=	cmd;
    6484:	89 81       	ldd	r24, Y+1	; 0x01
    6486:	8c 83       	std	Y+4, r24	; 0x04
	packet.data[0]	=	0;
    6488:	1d 82       	std	Y+5, r1	; 0x05
	packet.data[1]	=	1;
    648a:	81 e0       	ldi	r24, 0x01	; 1
    648c:	8e 83       	std	Y+6, r24	; 0x06

	for (k = 0; k < link_state.g_xDevCount; k++)
    648e:	1a 8a       	std	Y+18, r1	; 0x12
    6490:	90 91 8e 07 	lds	r25, 0x078E
    6494:	8a 89       	ldd	r24, Y+18	; 0x12
    6496:	89 17       	cp	r24, r25
    6498:	70 f4       	brcc	.+28     	; 0x64b6 <SendAll+0x4c>
	{
		packet.adr = k;
    649a:	8a 89       	ldd	r24, Y+18	; 0x12
    649c:	8b 83       	std	Y+3, r24	; 0x03
		SendPacket(&packet);
    649e:	ce 01       	movw	r24, r28
    64a0:	02 96       	adiw	r24, 0x02	; 2
    64a2:	0e 94 2d 2f 	call	0x5e5a <SendPacket>

		delay_loop_2(6553);
    64a6:	89 e9       	ldi	r24, 0x99	; 153
    64a8:	99 e1       	ldi	r25, 0x19	; 25
    64aa:	0e 94 ed 38 	call	0x71da <delay_loop_2>
    64ae:	8a 89       	ldd	r24, Y+18	; 0x12
    64b0:	8f 5f       	subi	r24, 0xFF	; 255
    64b2:	8a 8b       	std	Y+18, r24	; 0x12
    64b4:	ed cf       	rjmp	.-38     	; 0x6490 <SendAll+0x26>
    64b6:	62 96       	adiw	r28, 0x12	; 18
    64b8:	0f b6       	in	r0, 0x3f	; 63
    64ba:	f8 94       	cli
    64bc:	de bf       	out	0x3e, r29	; 62
    64be:	0f be       	out	0x3f, r0	; 63
    64c0:	cd bf       	out	0x3d, r28	; 61
    64c2:	df 91       	pop	r29
    64c4:	cf 91       	pop	r28
    64c6:	08 95       	ret

000064c8 <SwitchDeviceOhrana>:
	}
}

void SwitchDeviceOhrana(void)
{
    64c8:	cf 93       	push	r28
    64ca:	df 93       	push	r29
    64cc:	cd b7       	in	r28, 0x3d	; 61
    64ce:	de b7       	in	r29, 0x3e	; 62
	SendCommand(g_CurDev.adr, CMD_SETOHRANA);
    64d0:	65 e0       	ldi	r22, 0x05	; 5
    64d2:	80 91 dd 07 	lds	r24, 0x07DD
    64d6:	0e 94 62 2f 	call	0x5ec4 <SendCommand>
    64da:	df 91       	pop	r29
    64dc:	cf 91       	pop	r28
    64de:	08 95       	ret

000064e0 <SetOhranaState>:
}

char SetOhranaState(unsigned char num, unsigned char action)
{
    64e0:	cf 93       	push	r28
    64e2:	df 93       	push	r29
    64e4:	cd b7       	in	r28, 0x3d	; 61
    64e6:	de b7       	in	r29, 0x3e	; 62
    64e8:	62 97       	sbiw	r28, 0x12	; 18
    64ea:	0f b6       	in	r0, 0x3f	; 63
    64ec:	f8 94       	cli
    64ee:	de bf       	out	0x3e, r29	; 62
    64f0:	0f be       	out	0x3f, r0	; 63
    64f2:	cd bf       	out	0x3d, r28	; 61
    64f4:	89 83       	std	Y+1, r24	; 0x01
    64f6:	6a 83       	std	Y+2, r22	; 0x02
	PACKET packet;

	packet.marker	=	0xA5;
    64f8:	85 ea       	ldi	r24, 0xA5	; 165
    64fa:	8b 83       	std	Y+3, r24	; 0x03
	packet.type		=	CMD_SETOHRANA;
    64fc:	85 e0       	ldi	r24, 0x05	; 5
    64fe:	8d 83       	std	Y+5, r24	; 0x05
	packet.adr		=	num;
    6500:	89 81       	ldd	r24, Y+1	; 0x01
    6502:	8c 83       	std	Y+4, r24	; 0x04
	packet.data[0]	=	action;
    6504:	8a 81       	ldd	r24, Y+2	; 0x02
    6506:	8e 83       	std	Y+6, r24	; 0x06

	return GetRespond(&packet);
    6508:	ce 01       	movw	r24, r28
    650a:	03 96       	adiw	r24, 0x03	; 3
    650c:	0e 94 1b 33 	call	0x6636 <GetRespond>
    6510:	99 27       	eor	r25, r25
    6512:	87 fd       	sbrc	r24, 7
    6514:	90 95       	com	r25
    6516:	62 96       	adiw	r28, 0x12	; 18
    6518:	0f b6       	in	r0, 0x3f	; 63
    651a:	f8 94       	cli
    651c:	de bf       	out	0x3e, r29	; 62
    651e:	0f be       	out	0x3f, r0	; 63
    6520:	cd bf       	out	0x3d, r28	; 61
    6522:	df 91       	pop	r29
    6524:	cf 91       	pop	r28
    6526:	08 95       	ret

00006528 <GetCurDeviceInfo>:
}

char GetCurDeviceInfo()
{
    6528:	cf 93       	push	r28
    652a:	df 93       	push	r29
    652c:	cd b7       	in	r28, 0x3d	; 61
    652e:	de b7       	in	r29, 0x3e	; 62
    6530:	60 97       	sbiw	r28, 0x10	; 16
    6532:	0f b6       	in	r0, 0x3f	; 63
    6534:	f8 94       	cli
    6536:	de bf       	out	0x3e, r29	; 62
    6538:	0f be       	out	0x3f, r0	; 63
    653a:	cd bf       	out	0x3d, r28	; 61
#ifndef NEWVG
	char res;
#endif
	PACKET packet;

	packet.adr = g_CurDev.adr;
    653c:	80 91 dd 07 	lds	r24, 0x07DD
    6540:	8a 83       	std	Y+2, r24	; 0x02
	packet.type = CMD_GETSTATUS;
    6542:	81 e0       	ldi	r24, 0x01	; 1
    6544:	8b 83       	std	Y+3, r24	; 0x03

#ifndef NEWVG
	//  временно - только в несетевой версии
	res = GetRespond(&packet);

	//  пока назначение портов получаем из EEPROM локально, а не от устройств
	//g_CurDev.ports = g_packetReply.data[0];
	g_CurDev.ports = g_devList[packet.adr - 3].ports;

	g_CurDev.ohrTimeout = g_packetReply.data[3];

	return res;
#else
	//  временно - только в несетевой версии
	g_CurDev.ports = g_devList[0].ports;
    6546:	80 91 b9 07 	lds	r24, 0x07B9
    654a:	80 93 df 07 	sts	0x07DF, r24
	g_CurDev.ohrTimeout = g_devList[0].ohrTimeout;
    654e:	80 91 ca 07 	lds	r24, 0x07CA
    6552:	90 91 cb 07 	lds	r25, 0x07CB
    6556:	90 93 f8 07 	sts	0x07F8, r25
    655a:	80 93 f7 07 	sts	0x07F7, r24

	return 1/*res*/;
    655e:	81 e0       	ldi	r24, 0x01	; 1
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	60 96       	adiw	r28, 0x10	; 16
    6564:	0f b6       	in	r0, 0x3f	; 63
    6566:	f8 94       	cli
    6568:	de bf       	out	0x3e, r29	; 62
    656a:	0f be       	out	0x3f, r0	; 63
    656c:	cd bf       	out	0x3d, r28	; 61
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	08 95       	ret

00006574 <ChangeDelayTimeBeforeSetOhrana>:
#endif
}

void ChangeDelayTimeBeforeSetOhrana(unsigned short timeout)
{
    6574:	cf 93       	push	r28
    6576:	df 93       	push	r29
    6578:	cd b7       	in	r28, 0x3d	; 61
    657a:	de b7       	in	r29, 0x3e	; 62
    657c:	62 97       	sbiw	r28, 0x12	; 18
    657e:	0f b6       	in	r0, 0x3f	; 63
    6580:	f8 94       	cli
    6582:	de bf       	out	0x3e, r29	; 62
    6584:	0f be       	out	0x3f, r0	; 63
    6586:	cd bf       	out	0x3d, r28	; 61
    6588:	9a 83       	std	Y+2, r25	; 0x02
    658a:	89 83       	std	Y+1, r24	; 0x01
	PACKET packet;

	packet.adr = g_CurDev.adr;
    658c:	80 91 dd 07 	lds	r24, 0x07DD
    6590:	8c 83       	std	Y+4, r24	; 0x04
	packet.type = CMD_SETOHRTIMEOUT;
    6592:	8e e0       	ldi	r24, 0x0E	; 14
    6594:	8d 83       	std	Y+5, r24	; 0x05
	*(unsigned short*)&packet.data[0] = timeout;
    6596:	89 81       	ldd	r24, Y+1	; 0x01
    6598:	9a 81       	ldd	r25, Y+2	; 0x02
    659a:	9f 83       	std	Y+7, r25	; 0x07
    659c:	8e 83       	std	Y+6, r24	; 0x06

#ifndef NEWVG
	SendPacket(&packet);
#endif

#ifdef NEWVG
	//  временно - в этой версии с встроенным устройством и без сети
	SetDefBuiltinTimeout(timeout);
    659e:	89 81       	ldd	r24, Y+1	; 0x01
    65a0:	9a 81       	ldd	r25, Y+2	; 0x02
    65a2:	0e 94 88 38 	call	0x7110 <SetDefBuiltinTimeout>
    65a6:	62 96       	adiw	r28, 0x12	; 18
    65a8:	0f b6       	in	r0, 0x3f	; 63
    65aa:	f8 94       	cli
    65ac:	de bf       	out	0x3e, r29	; 62
    65ae:	0f be       	out	0x3f, r0	; 63
    65b0:	cd bf       	out	0x3d, r28	; 61
    65b2:	df 91       	pop	r29
    65b4:	cf 91       	pop	r28
    65b6:	08 95       	ret

000065b8 <ChangePortPurpose>:

#endif
}

void ChangePortPurpose(void)
{
    65b8:	cf 93       	push	r28
    65ba:	df 93       	push	r29
    65bc:	cd b7       	in	r28, 0x3d	; 61
    65be:	de b7       	in	r29, 0x3e	; 62
    65c0:	62 97       	sbiw	r28, 0x12	; 18
    65c2:	0f b6       	in	r0, 0x3f	; 63
    65c4:	f8 94       	cli
    65c6:	de bf       	out	0x3e, r29	; 62
    65c8:	0f be       	out	0x3f, r0	; 63
    65ca:	cd bf       	out	0x3d, r28	; 61
	PACKET packet;

	packet.adr = g_CurDev.adr;
    65cc:	80 91 dd 07 	lds	r24, 0x07DD
    65d0:	8a 83       	std	Y+2, r24	; 0x02
	packet.type = CMD_SETPORT;
    65d2:	82 e0       	ldi	r24, 0x02	; 2
    65d4:	8b 83       	std	Y+3, r24	; 0x03
	packet.data[0] = g_CurDev.ports;
    65d6:	80 91 df 07 	lds	r24, 0x07DF
    65da:	8c 83       	std	Y+4, r24	; 0x04

#ifdef NEWVG
	packet.adr = 3;		//  безсетевая версия
    65dc:	83 e0       	ldi	r24, 0x03	; 3
    65de:	8a 83       	std	Y+2, r24	; 0x02
#endif

	g_devList[packet.adr - 3].ports = g_CurDev.ports;
    65e0:	8a 81       	ldd	r24, Y+2	; 0x02
    65e2:	28 2f       	mov	r18, r24
    65e4:	33 27       	eor	r19, r19
    65e6:	85 e1       	ldi	r24, 0x15	; 21
    65e8:	90 e0       	ldi	r25, 0x00	; 0
    65ea:	28 9f       	mul	r18, r24
    65ec:	a0 01       	movw	r20, r0
    65ee:	29 9f       	mul	r18, r25
    65f0:	50 0d       	add	r21, r0
    65f2:	38 9f       	mul	r19, r24
    65f4:	50 0d       	add	r21, r0
    65f6:	11 24       	eor	r1, r1
    65f8:	ca 01       	movw	r24, r20
    65fa:	fc 01       	movw	r30, r24
    65fc:	e6 58       	subi	r30, 0x86	; 134
    65fe:	f8 4f       	sbci	r31, 0xF8	; 248
    6600:	80 91 df 07 	lds	r24, 0x07DF
    6604:	80 83       	st	Z, r24

	unsigned short ge = (EADR_DEVICE_LIST + (packet.adr - 3)*sizeof(XDEVICE) + 2);
    6606:	9a 81       	ldd	r25, Y+2	; 0x02
    6608:	85 e1       	ldi	r24, 0x15	; 21
    660a:	98 9f       	mul	r25, r24
    660c:	c0 01       	movw	r24, r0
    660e:	11 24       	eor	r1, r1
    6610:	8d 53       	subi	r24, 0x3D	; 61
    6612:	9f 4f       	sbci	r25, 0xFF	; 255
    6614:	9a 8b       	std	Y+18, r25	; 0x12
    6616:	89 8b       	std	Y+17, r24	; 0x11

	eeprom_write_byte_1((unsigned char *)ge, g_CurDev.ports);
    6618:	60 91 df 07 	lds	r22, 0x07DF
    661c:	89 89       	ldd	r24, Y+17	; 0x11
    661e:	9a 89       	ldd	r25, Y+18	; 0x12
    6620:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
    6624:	62 96       	adiw	r28, 0x12	; 18
    6626:	0f b6       	in	r0, 0x3f	; 63
    6628:	f8 94       	cli
    662a:	de bf       	out	0x3e, r29	; 62
    662c:	0f be       	out	0x3f, r0	; 63
    662e:	cd bf       	out	0x3d, r28	; 61
    6630:	df 91       	pop	r29
    6632:	cf 91       	pop	r28
    6634:	08 95       	ret

00006636 <GetRespond>:

#ifndef NEWVG
	SendPacket(&packet);
#endif
}

char GetRespond(PPACKET packet)
{
    6636:	cf 93       	push	r28
    6638:	df 93       	push	r29
    663a:	cd b7       	in	r28, 0x3d	; 61
    663c:	de b7       	in	r29, 0x3e	; 62
    663e:	24 97       	sbiw	r28, 0x04	; 4
    6640:	0f b6       	in	r0, 0x3f	; 63
    6642:	f8 94       	cli
    6644:	de bf       	out	0x3e, r29	; 62
    6646:	0f be       	out	0x3f, r0	; 63
    6648:	cd bf       	out	0x3d, r28	; 61
    664a:	9a 83       	std	Y+2, r25	; 0x02
    664c:	89 83       	std	Y+1, r24	; 0x01
	//  здесь этот флаг сброшен всегда!!!!!!!!
	link_state.g_linkStatus |= LINK_STATUS_RESPOND;
    664e:	80 91 90 07 	lds	r24, 0x0790
    6652:	84 60       	ori	r24, 0x04	; 4
    6654:	80 93 90 07 	sts	0x0790, r24

	SendPacket(packet);
    6658:	89 81       	ldd	r24, Y+1	; 0x01
    665a:	9a 81       	ldd	r25, Y+2	; 0x02
    665c:	0e 94 2d 2f 	call	0x5e5a <SendPacket>

	//  запомнили время

	g_WaitableTimer = 5;
    6660:	85 e0       	ldi	r24, 0x05	; 5
    6662:	80 93 7a 07 	sts	0x077A, r24

#ifdef PROTEUS
	g_WaitableTimer = 1;
#endif

	while (link_state.g_linkStatus & LINK_STATUS_RESPOND)
    6666:	80 91 90 07 	lds	r24, 0x0790
    666a:	99 27       	eor	r25, r25
    666c:	84 70       	andi	r24, 0x04	; 4
    666e:	90 70       	andi	r25, 0x00	; 0
    6670:	00 97       	sbiw	r24, 0x00	; 0
    6672:	39 f0       	breq	.+14     	; 0x6682 <GetRespond+0x4c>
	{
		//  цикл ожидания имеет таймаут - WAIT_FOR_RESPOND

		if (!g_WaitableTimer)
    6674:	80 91 7a 07 	lds	r24, 0x077A
    6678:	88 23       	and	r24, r24
    667a:	a9 f7       	brne	.-22     	; 0x6666 <GetRespond+0x30>
			return 0;
    667c:	1c 82       	std	Y+4, r1	; 0x04
    667e:	1b 82       	std	Y+3, r1	; 0x03
    6680:	04 c0       	rjmp	.+8      	; 0x668a <GetRespond+0x54>
	}

	//  к этому моменту LINK_STATUS_RESPOND уже сброшен (или должен быть сброшен)

	return 1;
    6682:	81 e0       	ldi	r24, 0x01	; 1
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	9c 83       	std	Y+4, r25	; 0x04
    6688:	8b 83       	std	Y+3, r24	; 0x03
}
    668a:	8b 81       	ldd	r24, Y+3	; 0x03
    668c:	9c 81       	ldd	r25, Y+4	; 0x04
    668e:	24 96       	adiw	r28, 0x04	; 4
    6690:	0f b6       	in	r0, 0x3f	; 63
    6692:	f8 94       	cli
    6694:	de bf       	out	0x3e, r29	; 62
    6696:	0f be       	out	0x3f, r0	; 63
    6698:	cd bf       	out	0x3d, r28	; 61
    669a:	df 91       	pop	r29
    669c:	cf 91       	pop	r28
    669e:	08 95       	ret

000066a0 <GetSensorThreshold>:

//  возвращает значение нижнего и верхнего порога для заданного входа
char GetSensorThreshold(unsigned char index)
{
    66a0:	cf 93       	push	r28
    66a2:	df 93       	push	r29
    66a4:	cd b7       	in	r28, 0x3d	; 61
    66a6:	de b7       	in	r29, 0x3e	; 62
    66a8:	62 97       	sbiw	r28, 0x12	; 18
    66aa:	0f b6       	in	r0, 0x3f	; 63
    66ac:	f8 94       	cli
    66ae:	de bf       	out	0x3e, r29	; 62
    66b0:	0f be       	out	0x3f, r0	; 63
    66b2:	cd bf       	out	0x3d, r28	; 61
    66b4:	89 83       	std	Y+1, r24	; 0x01
	char res;
	PACKET packet;

	packet.adr = g_CurDev.adr;
    66b6:	80 91 dd 07 	lds	r24, 0x07DD
    66ba:	8c 83       	std	Y+4, r24	; 0x04
	packet.type = CMD_GETSENSORSENSITIVITY;
    66bc:	83 e1       	ldi	r24, 0x13	; 19
    66be:	8d 83       	std	Y+5, r24	; 0x05
	packet.data[0] = index;
    66c0:	89 81       	ldd	r24, Y+1	; 0x01
    66c2:	8e 83       	std	Y+6, r24	; 0x06

	res = GetRespond(&packet);
    66c4:	ce 01       	movw	r24, r28
    66c6:	03 96       	adiw	r24, 0x03	; 3
    66c8:	0e 94 1b 33 	call	0x6636 <GetRespond>
    66cc:	8a 83       	std	Y+2, r24	; 0x02

	g_CurDev.threshold1 = 70;
    66ce:	86 e4       	ldi	r24, 0x46	; 70
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	90 93 e2 07 	sts	0x07E2, r25
    66d6:	80 93 e1 07 	sts	0x07E1, r24
	g_CurDev.threshold2 = 700;
    66da:	8c eb       	ldi	r24, 0xBC	; 188
    66dc:	92 e0       	ldi	r25, 0x02	; 2
    66de:	90 93 e4 07 	sts	0x07E4, r25
    66e2:	80 93 e3 07 	sts	0x07E3, r24

	if (res)
    66e6:	8a 81       	ldd	r24, Y+2	; 0x02
    66e8:	88 23       	and	r24, r24
    66ea:	81 f0       	breq	.+32     	; 0x670c <GetSensorThreshold+0x6c>
	{
		g_CurDev.threshold1 = *(unsigned short*)&g_packetReply.data[1];
    66ec:	80 91 d1 07 	lds	r24, 0x07D1
    66f0:	90 91 d2 07 	lds	r25, 0x07D2
    66f4:	90 93 e2 07 	sts	0x07E2, r25
    66f8:	80 93 e1 07 	sts	0x07E1, r24
		g_CurDev.threshold2 = *(unsigned short*)&g_packetReply.data[3];
    66fc:	80 91 d3 07 	lds	r24, 0x07D3
    6700:	90 91 d4 07 	lds	r25, 0x07D4
    6704:	90 93 e4 07 	sts	0x07E4, r25
    6708:	80 93 e3 07 	sts	0x07E3, r24
	}

#ifdef PROTEUS
	return 1;
#endif

	return res;
    670c:	8a 81       	ldd	r24, Y+2	; 0x02
    670e:	99 27       	eor	r25, r25
    6710:	87 fd       	sbrc	r24, 7
    6712:	90 95       	com	r25
    6714:	62 96       	adiw	r28, 0x12	; 18
    6716:	0f b6       	in	r0, 0x3f	; 63
    6718:	f8 94       	cli
    671a:	de bf       	out	0x3e, r29	; 62
    671c:	0f be       	out	0x3f, r0	; 63
    671e:	cd bf       	out	0x3d, r28	; 61
    6720:	df 91       	pop	r29
    6722:	cf 91       	pop	r28
    6724:	08 95       	ret

00006726 <ChangeSensorThreshold>:
}

char ChangeSensorThreshold(unsigned char index)
{
    6726:	cf 93       	push	r28
    6728:	df 93       	push	r29
    672a:	cd b7       	in	r28, 0x3d	; 61
    672c:	de b7       	in	r29, 0x3e	; 62
    672e:	62 97       	sbiw	r28, 0x12	; 18
    6730:	0f b6       	in	r0, 0x3f	; 63
    6732:	f8 94       	cli
    6734:	de bf       	out	0x3e, r29	; 62
    6736:	0f be       	out	0x3f, r0	; 63
    6738:	cd bf       	out	0x3d, r28	; 61
    673a:	89 83       	std	Y+1, r24	; 0x01
	char res;
	PACKET packet;

	packet.adr = g_CurDev.adr;
    673c:	80 91 dd 07 	lds	r24, 0x07DD
    6740:	8c 83       	std	Y+4, r24	; 0x04
	packet.type = CMD_SETSENSORSENSITIVITY;
    6742:	8b e0       	ldi	r24, 0x0B	; 11
    6744:	8d 83       	std	Y+5, r24	; 0x05
	packet.data[0] = index;
    6746:	89 81       	ldd	r24, Y+1	; 0x01
    6748:	8e 83       	std	Y+6, r24	; 0x06
	*(unsigned short*)&packet.data[1] = g_CurDev.threshold1;
    674a:	80 91 e1 07 	lds	r24, 0x07E1
    674e:	90 91 e2 07 	lds	r25, 0x07E2
    6752:	98 87       	std	Y+8, r25	; 0x08
    6754:	8f 83       	std	Y+7, r24	; 0x07
	*(unsigned short*)&packet.data[3] = g_CurDev.threshold2;
    6756:	80 91 e3 07 	lds	r24, 0x07E3
    675a:	90 91 e4 07 	lds	r25, 0x07E4
    675e:	9a 87       	std	Y+10, r25	; 0x0a
    6760:	89 87       	std	Y+9, r24	; 0x09

	res = GetRespond(&packet);
    6762:	ce 01       	movw	r24, r28
    6764:	03 96       	adiw	r24, 0x03	; 3
    6766:	0e 94 1b 33 	call	0x6636 <GetRespond>
    676a:	8a 83       	std	Y+2, r24	; 0x02

	if (res)
	{
	}

	return res;
    676c:	8a 81       	ldd	r24, Y+2	; 0x02
    676e:	99 27       	eor	r25, r25
    6770:	87 fd       	sbrc	r24, 7
    6772:	90 95       	com	r25
    6774:	62 96       	adiw	r28, 0x12	; 18
    6776:	0f b6       	in	r0, 0x3f	; 63
    6778:	f8 94       	cli
    677a:	de bf       	out	0x3e, r29	; 62
    677c:	0f be       	out	0x3f, r0	; 63
    677e:	cd bf       	out	0x3d, r28	; 61
    6780:	df 91       	pop	r29
    6782:	cf 91       	pop	r28
    6784:	08 95       	ret

00006786 <ChangeX232>:
}

void ChangeX232(unsigned char* valueType, unsigned char value)
{
    6786:	cf 93       	push	r28
    6788:	df 93       	push	r29
    678a:	cd b7       	in	r28, 0x3d	; 61
    678c:	de b7       	in	r29, 0x3e	; 62
    678e:	23 97       	sbiw	r28, 0x03	; 3
    6790:	0f b6       	in	r0, 0x3f	; 63
    6792:	f8 94       	cli
    6794:	de bf       	out	0x3e, r29	; 62
    6796:	0f be       	out	0x3f, r0	; 63
    6798:	cd bf       	out	0x3d, r28	; 61
    679a:	9a 83       	std	Y+2, r25	; 0x02
    679c:	89 83       	std	Y+1, r24	; 0x01
    679e:	6b 83       	std	Y+3, r22	; 0x03
	eeprom_write_byte_1((unsigned char*)valueType, value);
    67a0:	6b 81       	ldd	r22, Y+3	; 0x03
    67a2:	89 81       	ldd	r24, Y+1	; 0x01
    67a4:	9a 81       	ldd	r25, Y+2	; 0x02
    67a6:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	if ((unsigned char*)EADR_X232_TIMEOUT == valueType)
    67aa:	89 81       	ldd	r24, Y+1	; 0x01
    67ac:	9a 81       	ldd	r25, Y+2	; 0x02
    67ae:	86 31       	cpi	r24, 0x16	; 22
    67b0:	91 05       	cpc	r25, r1
    67b2:	21 f4       	brne	.+8      	; 0x67bc <ChangeX232+0x36>
		g_x232TimeOut = value;
    67b4:	8b 81       	ldd	r24, Y+3	; 0x03
    67b6:	80 93 fa 07 	sts	0x07FA, r24
    67ba:	03 c0       	rjmp	.+6      	; 0x67c2 <ChangeX232+0x3c>
	else
		g_x232Interval = value;
    67bc:	8b 81       	ldd	r24, Y+3	; 0x03
    67be:	80 93 8d 07 	sts	0x078D, r24
    67c2:	23 96       	adiw	r28, 0x03	; 3
    67c4:	0f b6       	in	r0, 0x3f	; 63
    67c6:	f8 94       	cli
    67c8:	de bf       	out	0x3e, r29	; 62
    67ca:	0f be       	out	0x3f, r0	; 63
    67cc:	cd bf       	out	0x3d, r28	; 61
    67ce:	df 91       	pop	r29
    67d0:	cf 91       	pop	r28
    67d2:	08 95       	ret

000067d4 <HandlePrivatePacket>:
}

void HandlePrivatePacket(void)
{
    67d4:	0f 93       	push	r16
    67d6:	1f 93       	push	r17
    67d8:	cf 93       	push	r28
    67da:	df 93       	push	r29
    67dc:	cd b7       	in	r28, 0x3d	; 61
    67de:	de b7       	in	r29, 0x3e	; 62
    67e0:	64 97       	sbiw	r28, 0x14	; 20
    67e2:	0f b6       	in	r0, 0x3f	; 63
    67e4:	f8 94       	cli
    67e6:	de bf       	out	0x3e, r29	; 62
    67e8:	0f be       	out	0x3f, r0	; 63
    67ea:	cd bf       	out	0x3d, r28	; 61
	unsigned short e;
	unsigned char k, byte, bufno, send_all;
	byte = g_packetReply.data[0];
    67ec:	80 91 d0 07 	lds	r24, 0x07D0
    67f0:	8c 83       	std	Y+4, r24	; 0x04

	if (CMD_CONNECT == g_packetReply.type)
    67f2:	80 91 cf 07 	lds	r24, 0x07CF
    67f6:	88 23       	and	r24, r24
    67f8:	69 f4       	brne	.+26     	; 0x6814 <HandlePrivatePacket+0x40>
	{
		devStatus |= _BV(DS_CONNECTED);
    67fa:	80 91 68 06 	lds	r24, 0x0668
    67fe:	88 60       	ori	r24, 0x08	; 8
    6800:	80 93 68 06 	sts	0x0668, r24
		if (111 != g_packetReply.data[0])
    6804:	80 91 d0 07 	lds	r24, 0x07D0
    6808:	8f 36       	cpi	r24, 0x6F	; 111
    680a:	09 f4       	brne	.+2      	; 0x680e <HandlePrivatePacket+0x3a>
    680c:	a2 c3       	rjmp	.+1860   	; 0x6f52 <.1355_finished+0x594>
			g_packetReply.data[0] = 0;
    680e:	10 92 d0 07 	sts	0x07D0, r1
    6812:	9f c3       	rjmp	.+1854   	; 0x6f52 <.1355_finished+0x594>
	}else
		if (devStatus & _BV(DS_CONNECTED))
    6814:	80 91 68 06 	lds	r24, 0x0668
    6818:	99 27       	eor	r25, r25
    681a:	88 70       	andi	r24, 0x08	; 8
    681c:	90 70       	andi	r25, 0x00	; 0
    681e:	00 97       	sbiw	r24, 0x00	; 0
    6820:	09 f4       	brne	.+2      	; 0x6824 <HandlePrivatePacket+0x50>
    6822:	97 c3       	rjmp	.+1838   	; 0x6f52 <.1355_finished+0x594>
			//  если мы подсоединены
			switch (g_packetReply.type)
    6824:	80 91 cf 07 	lds	r24, 0x07CF
    6828:	28 2f       	mov	r18, r24
    682a:	33 27       	eor	r19, r19
    682c:	3c 8b       	std	Y+20, r19	; 0x14
    682e:	2b 8b       	std	Y+19, r18	; 0x13
    6830:	8b 89       	ldd	r24, Y+19	; 0x13
    6832:	9c 89       	ldd	r25, Y+20	; 0x14
    6834:	80 31       	cpi	r24, 0x10	; 16
    6836:	91 05       	cpc	r25, r1
    6838:	09 f4       	brne	.+2      	; 0x683c <HandlePrivatePacket+0x68>
    683a:	ca c0       	rjmp	.+404    	; 0x69d0 <.1355_finished+0x12>
    683c:	eb 89       	ldd	r30, Y+19	; 0x13
    683e:	fc 89       	ldd	r31, Y+20	; 0x14
    6840:	e1 31       	cpi	r30, 0x11	; 17
    6842:	f1 05       	cpc	r31, r1
    6844:	e4 f5       	brge	.+120    	; 0x68be <HandlePrivatePacket+0xea>
    6846:	2b 89       	ldd	r18, Y+19	; 0x13
    6848:	3c 89       	ldd	r19, Y+20	; 0x14
    684a:	28 30       	cpi	r18, 0x08	; 8
    684c:	31 05       	cpc	r19, r1
    684e:	09 f4       	brne	.+2      	; 0x6852 <HandlePrivatePacket+0x7e>
    6850:	86 c0       	rjmp	.+268    	; 0x695e <HandlePrivatePacket+0x18a>
    6852:	8b 89       	ldd	r24, Y+19	; 0x13
    6854:	9c 89       	ldd	r25, Y+20	; 0x14
    6856:	89 30       	cpi	r24, 0x09	; 9
    6858:	91 05       	cpc	r25, r1
    685a:	c4 f4       	brge	.+48     	; 0x688c <HandlePrivatePacket+0xb8>
    685c:	eb 89       	ldd	r30, Y+19	; 0x13
    685e:	fc 89       	ldd	r31, Y+20	; 0x14
    6860:	e5 30       	cpi	r30, 0x05	; 5
    6862:	f1 05       	cpc	r31, r1
    6864:	09 f4       	brne	.+2      	; 0x6868 <HandlePrivatePacket+0x94>
    6866:	6a c0       	rjmp	.+212    	; 0x693c <HandlePrivatePacket+0x168>
    6868:	2b 89       	ldd	r18, Y+19	; 0x13
    686a:	3c 89       	ldd	r19, Y+20	; 0x14
    686c:	26 30       	cpi	r18, 0x06	; 6
    686e:	31 05       	cpc	r19, r1
    6870:	34 f4       	brge	.+12     	; 0x687e <HandlePrivatePacket+0xaa>
    6872:	8b 89       	ldd	r24, Y+19	; 0x13
    6874:	9c 89       	ldd	r25, Y+20	; 0x14
    6876:	00 97       	sbiw	r24, 0x00	; 0
    6878:	09 f4       	brne	.+2      	; 0x687c <HandlePrivatePacket+0xa8>
    687a:	58 c0       	rjmp	.+176    	; 0x692c <HandlePrivatePacket+0x158>
    687c:	6a c3       	rjmp	.+1748   	; 0x6f52 <.1355_finished+0x594>
    687e:	eb 89       	ldd	r30, Y+19	; 0x13
    6880:	fc 89       	ldd	r31, Y+20	; 0x14
    6882:	e6 30       	cpi	r30, 0x06	; 6
    6884:	f1 05       	cpc	r31, r1
    6886:	09 f4       	brne	.+2      	; 0x688a <HandlePrivatePacket+0xb6>
    6888:	64 c0       	rjmp	.+200    	; 0x6952 <HandlePrivatePacket+0x17e>
    688a:	63 c3       	rjmp	.+1734   	; 0x6f52 <.1355_finished+0x594>
    688c:	2b 89       	ldd	r18, Y+19	; 0x13
    688e:	3c 89       	ldd	r19, Y+20	; 0x14
    6890:	2c 30       	cpi	r18, 0x0C	; 12
    6892:	31 05       	cpc	r19, r1
    6894:	09 f4       	brne	.+2      	; 0x6898 <HandlePrivatePacket+0xc4>
    6896:	6c c0       	rjmp	.+216    	; 0x6970 <HandlePrivatePacket+0x19c>
    6898:	8b 89       	ldd	r24, Y+19	; 0x13
    689a:	9c 89       	ldd	r25, Y+20	; 0x14
    689c:	8d 30       	cpi	r24, 0x0D	; 13
    689e:	91 05       	cpc	r25, r1
    68a0:	3c f4       	brge	.+14     	; 0x68b0 <HandlePrivatePacket+0xdc>
    68a2:	eb 89       	ldd	r30, Y+19	; 0x13
    68a4:	fc 89       	ldd	r31, Y+20	; 0x14
    68a6:	e9 30       	cpi	r30, 0x09	; 9
    68a8:	f1 05       	cpc	r31, r1
    68aa:	09 f4       	brne	.+2      	; 0x68ae <HandlePrivatePacket+0xda>
    68ac:	5b c0       	rjmp	.+182    	; 0x6964 <HandlePrivatePacket+0x190>
    68ae:	51 c3       	rjmp	.+1698   	; 0x6f52 <.1355_finished+0x594>
    68b0:	2b 89       	ldd	r18, Y+19	; 0x13
    68b2:	3c 89       	ldd	r19, Y+20	; 0x14
    68b4:	2f 30       	cpi	r18, 0x0F	; 15
    68b6:	31 05       	cpc	r19, r1
    68b8:	09 f4       	brne	.+2      	; 0x68bc <HandlePrivatePacket+0xe8>
    68ba:	5f c0       	rjmp	.+190    	; 0x697a <HandlePrivatePacket+0x1a6>
    68bc:	4a c3       	rjmp	.+1684   	; 0x6f52 <.1355_finished+0x594>
    68be:	8b 89       	ldd	r24, Y+19	; 0x13
    68c0:	9c 89       	ldd	r25, Y+20	; 0x14
    68c2:	85 31       	cpi	r24, 0x15	; 21
    68c4:	91 05       	cpc	r25, r1
    68c6:	09 f4       	brne	.+2      	; 0x68ca <HandlePrivatePacket+0xf6>
    68c8:	e9 c1       	rjmp	.+978    	; 0x6c9c <.1355_finished+0x2de>
    68ca:	eb 89       	ldd	r30, Y+19	; 0x13
    68cc:	fc 89       	ldd	r31, Y+20	; 0x14
    68ce:	e6 31       	cpi	r30, 0x16	; 22
    68d0:	f1 05       	cpc	r31, r1
    68d2:	9c f4       	brge	.+38     	; 0x68fa <HandlePrivatePacket+0x126>
    68d4:	2b 89       	ldd	r18, Y+19	; 0x13
    68d6:	3c 89       	ldd	r19, Y+20	; 0x14
    68d8:	22 31       	cpi	r18, 0x12	; 18
    68da:	31 05       	cpc	r19, r1
    68dc:	09 f4       	brne	.+2      	; 0x68e0 <HandlePrivatePacket+0x10c>
    68de:	a1 c0       	rjmp	.+322    	; 0x6a22 <.1355_finished+0x64>
    68e0:	8b 89       	ldd	r24, Y+19	; 0x13
    68e2:	9c 89       	ldd	r25, Y+20	; 0x14
    68e4:	82 31       	cpi	r24, 0x12	; 18
    68e6:	91 05       	cpc	r25, r1
    68e8:	0c f4       	brge	.+2      	; 0x68ec <HandlePrivatePacket+0x118>
    68ea:	98 c0       	rjmp	.+304    	; 0x6a1c <.1355_finished+0x5e>
    68ec:	eb 89       	ldd	r30, Y+19	; 0x13
    68ee:	fc 89       	ldd	r31, Y+20	; 0x14
    68f0:	e4 31       	cpi	r30, 0x14	; 20
    68f2:	f1 05       	cpc	r31, r1
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <HandlePrivatePacket+0x124>
    68f6:	98 c0       	rjmp	.+304    	; 0x6a28 <.1355_finished+0x6a>
    68f8:	2c c3       	rjmp	.+1624   	; 0x6f52 <.1355_finished+0x594>
    68fa:	2b 89       	ldd	r18, Y+19	; 0x13
    68fc:	3c 89       	ldd	r19, Y+20	; 0x14
    68fe:	28 31       	cpi	r18, 0x18	; 24
    6900:	31 05       	cpc	r19, r1
    6902:	09 f4       	brne	.+2      	; 0x6906 <HandlePrivatePacket+0x132>
    6904:	7c c2       	rjmp	.+1272   	; 0x6dfe <.1355_finished+0x440>
    6906:	8b 89       	ldd	r24, Y+19	; 0x13
    6908:	9c 89       	ldd	r25, Y+20	; 0x14
    690a:	89 31       	cpi	r24, 0x19	; 25
    690c:	91 05       	cpc	r25, r1
    690e:	3c f4       	brge	.+14     	; 0x691e <HandlePrivatePacket+0x14a>
    6910:	eb 89       	ldd	r30, Y+19	; 0x13
    6912:	fc 89       	ldd	r31, Y+20	; 0x14
    6914:	e6 31       	cpi	r30, 0x16	; 22
    6916:	f1 05       	cpc	r31, r1
    6918:	09 f4       	brne	.+2      	; 0x691c <HandlePrivatePacket+0x148>
    691a:	67 c2       	rjmp	.+1230   	; 0x6dea <.1355_finished+0x42c>
    691c:	1a c3       	rjmp	.+1588   	; 0x6f52 <.1355_finished+0x594>
    691e:	2b 89       	ldd	r18, Y+19	; 0x13
    6920:	3c 89       	ldd	r19, Y+20	; 0x14
    6922:	29 31       	cpi	r18, 0x19	; 25
    6924:	31 05       	cpc	r19, r1
    6926:	09 f4       	brne	.+2      	; 0x692a <HandlePrivatePacket+0x156>
    6928:	00 c3       	rjmp	.+1536   	; 0x6f2a <.1355_finished+0x56c>
    692a:	13 c3       	rjmp	.+1574   	; 0x6f52 <.1355_finished+0x594>
			{
				case CMD_CONNECT:
					devStatus |= _BV(DS_CONNECTED);
    692c:	80 91 68 06 	lds	r24, 0x0668
    6930:	88 60       	ori	r24, 0x08	; 8
    6932:	80 93 68 06 	sts	0x0668, r24
					g_packetReply.data[0] = 0;
    6936:	10 92 d0 07 	sts	0x07D0, r1
					break;
    693a:	0b c3       	rjmp	.+1558   	; 0x6f52 <.1355_finished+0x594>
				case CMD_GETSTATUS:
					break;
				case CMD_SETPORT:
					break;
				case CMD_OUTPORT:
					break;
				case CMD_SETADR:
					break;
				//case CMD_SHOWCLOCK:
				case CMD_SETOHRANA:
					g_ShowTime = !g_ShowTime;
    693c:	18 8a       	std	Y+16, r1	; 0x10
    693e:	80 91 f7 06 	lds	r24, 0x06F7
    6942:	88 23       	and	r24, r24
    6944:	11 f4       	brne	.+4      	; 0x694a <HandlePrivatePacket+0x176>
    6946:	31 e0       	ldi	r19, 0x01	; 1
    6948:	38 8b       	std	Y+16, r19	; 0x10
    694a:	88 89       	ldd	r24, Y+16	; 0x10
    694c:	80 93 f7 06 	sts	0x06F7, r24
					break;
    6950:	00 c3       	rjmp	.+1536   	; 0x6f52 <.1355_finished+0x594>
				case CMD_DISCONNECT:
					devStatus &= ~_BV(DS_CONNECTED);
    6952:	80 91 68 06 	lds	r24, 0x0668
    6956:	87 7f       	andi	r24, 0xF7	; 247
    6958:	80 93 68 06 	sts	0x0668, r24
					break;
    695c:	fa c2       	rjmp	.+1524   	; 0x6f52 <.1355_finished+0x594>
				case CMD_HIDECLOCK:
					break;
				case CMD_CLEARSCREEN:
					ClearScreen();
    695e:	0e 94 79 29 	call	0x52f2 <ClearScreen>
					break;
    6962:	f7 c2       	rjmp	.+1518   	; 0x6f52 <.1355_finished+0x594>
				case CMD_WRITEDIGIT:
					OutData(0x30 + g_packetReply.data[0]);
    6964:	80 91 d0 07 	lds	r24, 0x07D0
    6968:	80 5d       	subi	r24, 0xD0	; 208
    696a:	0e 94 e7 28 	call	0x51ce <OutData>
					break;
    696e:	f1 c2       	rjmp	.+1506   	; 0x6f52 <.1355_finished+0x594>
				case CMD_FINDDEV:
					break;
				case CMD_SETSENSORSENSITIVITY:
					break;
				case CMD_GETSENSORVALUE:
					g_packetReply.data[0] = AT45ReadStatus();
    6970:	0e 94 98 3b 	call	0x7730 <AT45ReadStatus>
    6974:	80 93 d0 07 	sts	0x07D0, r24
					break;
    6978:	ec c2       	rjmp	.+1496   	; 0x6f52 <.1355_finished+0x594>
				case CMD_ADC_ENABLE:
					break;
				case CMD_SETOHRTIMEOUT:
					break;
				case CMD_GETEEPROM:
					e = *(uint16_t *)(&g_packetReply.data[0]);
    697a:	80 91 d0 07 	lds	r24, 0x07D0
    697e:	90 91 d1 07 	lds	r25, 0x07D1
    6982:	9a 83       	std	Y+2, r25	; 0x02
    6984:	89 83       	std	Y+1, r24	; 0x01
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    6986:	82 ed       	ldi	r24, 0xD2	; 210
    6988:	97 e0       	ldi	r25, 0x07	; 7
    698a:	98 87       	std	Y+8, r25	; 0x08
    698c:	8f 83       	std	Y+7, r24	; 0x07
    698e:	89 81       	ldd	r24, Y+1	; 0x01
    6990:	9a 81       	ldd	r25, Y+2	; 0x02
    6992:	9a 87       	std	Y+10, r25	; 0x0a
    6994:	89 87       	std	Y+9, r24	; 0x09
    6996:	88 e0       	ldi	r24, 0x08	; 8
    6998:	90 e0       	ldi	r25, 0x00	; 0
    699a:	9c 87       	std	Y+12, r25	; 0x0c
    699c:	8b 87       	std	Y+11, r24	; 0x0b
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 
    699e:	8b 85       	ldd	r24, Y+11	; 0x0b
    69a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    69a2:	9e 87       	std	Y+14, r25	; 0x0e
    69a4:	8d 87       	std	Y+13, r24	; 0x0d

      asm volatile ( 
    69a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    69a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    69aa:	a9 85       	ldd	r26, Y+9	; 0x09
    69ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    69ae:	ef 81       	ldd	r30, Y+7	; 0x07
    69b0:	f8 85       	ldd	r31, Y+8	; 0x08

000069b2 <.1355_start>:
    69b2:	01 97       	sbiw	r24, 0x01	; 1
    69b4:	24 f0       	brlt	.+8      	; 0x69be <.1355_finished>
    69b6:	0e 94 23 50 	call	0xa046 <__eeprom_read_byte_1C1D1E>
    69ba:	01 92       	st	Z+, r0
    69bc:	fa cf       	rjmp	.-12     	; 0x69b2 <.1355_start>

000069be <.1355_finished>:
    69be:	9e 87       	std	Y+14, r25	; 0x0e
    69c0:	8d 87       	std	Y+13, r24	; 0x0d
    69c2:	cd 01       	movw	r24, r26
    69c4:	9a 87       	std	Y+10, r25	; 0x0a
    69c6:	89 87       	std	Y+9, r24	; 0x09
    69c8:	cf 01       	movw	r24, r30
    69ca:	98 87       	std	Y+8, r25	; 0x08
    69cc:	8f 83       	std	Y+7, r24	; 0x07
					eeprom_read_block((uint16_t *)&(g_packetReply.data[2]),
						(uint16_t *)e, EEPROM_SEND_SIZE);
					break;
    69ce:	c1 c2       	rjmp	.+1410   	; 0x6f52 <.1355_finished+0x594>
				case CMD_GETRAM:
					e = *(uint16_t *)(&g_packetReply.data[0]);
    69d0:	80 91 d0 07 	lds	r24, 0x07D0
    69d4:	90 91 d1 07 	lds	r25, 0x07D1
    69d8:	9a 83       	std	Y+2, r25	; 0x02
    69da:	89 83       	std	Y+1, r24	; 0x01
					*(uint16_t *)(&g_packetReply.data[11]) = SP;
    69dc:	80 91 5d 00 	lds	r24, 0x005D
    69e0:	90 91 5e 00 	lds	r25, 0x005E
    69e4:	90 93 dc 07 	sts	0x07DC, r25
    69e8:	80 93 db 07 	sts	0x07DB, r24

//					if (0xFFF > e)
						for (byte = 0; byte < 8; byte++)
    69ec:	1c 82       	std	Y+4, r1	; 0x04
    69ee:	8c 81       	ldd	r24, Y+4	; 0x04
    69f0:	88 30       	cpi	r24, 0x08	; 8
    69f2:	08 f0       	brcs	.+2      	; 0x69f6 <.1355_finished+0x38>
    69f4:	ae c2       	rjmp	.+1372   	; 0x6f52 <.1355_finished+0x594>
							g_packetReply.data[byte + 2] = *(uint8_t *)(e + byte);
    69f6:	8c 81       	ldd	r24, Y+4	; 0x04
    69f8:	99 27       	eor	r25, r25
    69fa:	dc 01       	movw	r26, r24
    69fc:	ae 52       	subi	r26, 0x2E	; 46
    69fe:	b8 4f       	sbci	r27, 0xF8	; 248
    6a00:	8c 81       	ldd	r24, Y+4	; 0x04
    6a02:	28 2f       	mov	r18, r24
    6a04:	33 27       	eor	r19, r19
    6a06:	89 81       	ldd	r24, Y+1	; 0x01
    6a08:	9a 81       	ldd	r25, Y+2	; 0x02
    6a0a:	f9 01       	movw	r30, r18
    6a0c:	e8 0f       	add	r30, r24
    6a0e:	f9 1f       	adc	r31, r25
    6a10:	80 81       	ld	r24, Z
    6a12:	8c 93       	st	X, r24
    6a14:	8c 81       	ldd	r24, Y+4	; 0x04
    6a16:	8f 5f       	subi	r24, 0xFF	; 255
    6a18:	8c 83       	std	Y+4, r24	; 0x04
    6a1a:	e9 cf       	rjmp	.-46     	; 0x69ee <.1355_finished+0x30>
//					else
//					{
//						for (byte = 0; byte < 8; byte++)
//							g_packetReply.data[byte + 2] = *(uint8_t *)(e - byte);
//					}
					break;
				case CMD_SETTIME:
					SetTime();
    6a1c:	0e 94 8d 30 	call	0x611a <SetTime>
					break;
    6a20:	98 c2       	rjmp	.+1328   	; 0x6f52 <.1355_finished+0x594>
				case CMD_GETTIME:
					GetTime();
    6a22:	0e 94 67 30 	call	0x60ce <GetTime>
					break;
    6a26:	95 c2       	rjmp	.+1322   	; 0x6f52 <.1355_finished+0x594>
				case CMD_AT45:
					switch (g_packetReply.data[0])
    6a28:	80 91 d0 07 	lds	r24, 0x07D0
    6a2c:	e8 2f       	mov	r30, r24
    6a2e:	ff 27       	eor	r31, r31
    6a30:	fa 8b       	std	Y+18, r31	; 0x12
    6a32:	e9 8b       	std	Y+17, r30	; 0x11
    6a34:	29 89       	ldd	r18, Y+17	; 0x11
    6a36:	3a 89       	ldd	r19, Y+18	; 0x12
    6a38:	24 30       	cpi	r18, 0x04	; 4
    6a3a:	31 05       	cpc	r19, r1
    6a3c:	09 f4       	brne	.+2      	; 0x6a40 <.1355_finished+0x82>
    6a3e:	bf c0       	rjmp	.+382    	; 0x6bbe <.1355_finished+0x200>
    6a40:	89 89       	ldd	r24, Y+17	; 0x11
    6a42:	9a 89       	ldd	r25, Y+18	; 0x12
    6a44:	85 30       	cpi	r24, 0x05	; 5
    6a46:	91 05       	cpc	r25, r1
    6a48:	ec f4       	brge	.+58     	; 0x6a84 <.1355_finished+0xc6>
    6a4a:	e9 89       	ldd	r30, Y+17	; 0x11
    6a4c:	fa 89       	ldd	r31, Y+18	; 0x12
    6a4e:	e1 30       	cpi	r30, 0x01	; 1
    6a50:	f1 05       	cpc	r31, r1
    6a52:	09 f4       	brne	.+2      	; 0x6a56 <.1355_finished+0x98>
    6a54:	98 c0       	rjmp	.+304    	; 0x6b86 <.1355_finished+0x1c8>
    6a56:	29 89       	ldd	r18, Y+17	; 0x11
    6a58:	3a 89       	ldd	r19, Y+18	; 0x12
    6a5a:	22 30       	cpi	r18, 0x02	; 2
    6a5c:	31 05       	cpc	r19, r1
    6a5e:	2c f4       	brge	.+10     	; 0x6a6a <.1355_finished+0xac>
    6a60:	89 89       	ldd	r24, Y+17	; 0x11
    6a62:	9a 89       	ldd	r25, Y+18	; 0x12
    6a64:	00 97       	sbiw	r24, 0x00	; 0
    6a66:	99 f1       	breq	.+102    	; 0x6ace <.1355_finished+0x110>
    6a68:	74 c2       	rjmp	.+1256   	; 0x6f52 <.1355_finished+0x594>
    6a6a:	e9 89       	ldd	r30, Y+17	; 0x11
    6a6c:	fa 89       	ldd	r31, Y+18	; 0x12
    6a6e:	e2 30       	cpi	r30, 0x02	; 2
    6a70:	f1 05       	cpc	r31, r1
    6a72:	09 f4       	brne	.+2      	; 0x6a76 <.1355_finished+0xb8>
    6a74:	90 c0       	rjmp	.+288    	; 0x6b96 <.1355_finished+0x1d8>
    6a76:	29 89       	ldd	r18, Y+17	; 0x11
    6a78:	3a 89       	ldd	r19, Y+18	; 0x12
    6a7a:	23 30       	cpi	r18, 0x03	; 3
    6a7c:	31 05       	cpc	r19, r1
    6a7e:	09 f4       	brne	.+2      	; 0x6a82 <.1355_finished+0xc4>
    6a80:	97 c0       	rjmp	.+302    	; 0x6bb0 <.1355_finished+0x1f2>
    6a82:	67 c2       	rjmp	.+1230   	; 0x6f52 <.1355_finished+0x594>
    6a84:	89 89       	ldd	r24, Y+17	; 0x11
    6a86:	9a 89       	ldd	r25, Y+18	; 0x12
    6a88:	87 30       	cpi	r24, 0x07	; 7
    6a8a:	91 05       	cpc	r25, r1
    6a8c:	09 f4       	brne	.+2      	; 0x6a90 <.1355_finished+0xd2>
    6a8e:	ad c0       	rjmp	.+346    	; 0x6bea <.1355_finished+0x22c>
    6a90:	e9 89       	ldd	r30, Y+17	; 0x11
    6a92:	fa 89       	ldd	r31, Y+18	; 0x12
    6a94:	e8 30       	cpi	r30, 0x08	; 8
    6a96:	f1 05       	cpc	r31, r1
    6a98:	6c f4       	brge	.+26     	; 0x6ab4 <.1355_finished+0xf6>
    6a9a:	29 89       	ldd	r18, Y+17	; 0x11
    6a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    6a9e:	25 30       	cpi	r18, 0x05	; 5
    6aa0:	31 05       	cpc	r19, r1
    6aa2:	09 f4       	brne	.+2      	; 0x6aa6 <.1355_finished+0xe8>
    6aa4:	94 c0       	rjmp	.+296    	; 0x6bce <.1355_finished+0x210>
    6aa6:	89 89       	ldd	r24, Y+17	; 0x11
    6aa8:	9a 89       	ldd	r25, Y+18	; 0x12
    6aaa:	86 30       	cpi	r24, 0x06	; 6
    6aac:	91 05       	cpc	r25, r1
    6aae:	09 f4       	brne	.+2      	; 0x6ab2 <.1355_finished+0xf4>
    6ab0:	96 c0       	rjmp	.+300    	; 0x6bde <.1355_finished+0x220>
    6ab2:	4f c2       	rjmp	.+1182   	; 0x6f52 <.1355_finished+0x594>
    6ab4:	e9 89       	ldd	r30, Y+17	; 0x11
    6ab6:	fa 89       	ldd	r31, Y+18	; 0x12
    6ab8:	e8 30       	cpi	r30, 0x08	; 8
    6aba:	f1 05       	cpc	r31, r1
    6abc:	09 f4       	brne	.+2      	; 0x6ac0 <.1355_finished+0x102>
    6abe:	a2 c0       	rjmp	.+324    	; 0x6c04 <.1355_finished+0x246>
    6ac0:	29 89       	ldd	r18, Y+17	; 0x11
    6ac2:	3a 89       	ldd	r19, Y+18	; 0x12
    6ac4:	29 30       	cpi	r18, 0x09	; 9
    6ac6:	31 05       	cpc	r19, r1
    6ac8:	09 f4       	brne	.+2      	; 0x6acc <.1355_finished+0x10e>
    6aca:	c5 c0       	rjmp	.+394    	; 0x6c56 <.1355_finished+0x298>
    6acc:	42 c2       	rjmp	.+1156   	; 0x6f52 <.1355_finished+0x594>
					{	//  читает 8 байт буфера флешки, начиная со
						//  слова номер g_packetReply.data[0]
						case CMD_AT45_READ_BUFFER:
						    bufno = g_packetReply.data[4];
    6ace:	80 91 d4 07 	lds	r24, 0x07D4
    6ad2:	8d 83       	std	Y+5, r24	; 0x05
							send_all = g_packetReply.data[3];
    6ad4:	80 91 d3 07 	lds	r24, 0x07D3
    6ad8:	8e 83       	std	Y+6, r24	; 0x06
							g_packetReply.data[3] = bufno;	//  для XDevMon'a
    6ada:	8d 81       	ldd	r24, Y+5	; 0x05
    6adc:	80 93 d3 07 	sts	0x07D3, r24

							//  устанавливаем позицию в буфере, с кот. читаем
							AT45SetReadBufferPos(bufno,
    6ae0:	60 91 d1 07 	lds	r22, 0x07D1
    6ae4:	70 91 d2 07 	lds	r23, 0x07D2
    6ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    6aea:	0e 94 fa 3a 	call	0x75f4 <AT45SetReadBufferPos>
								*(uint16_t*)&g_packetReply.data[1]);

							if (!send_all)
    6aee:	8e 81       	ldd	r24, Y+6	; 0x06
    6af0:	88 23       	and	r24, r24
    6af2:	99 f4       	brne	.+38     	; 0x6b1a <.1355_finished+0x15c>
								for (byte = 0; byte < 8; byte++)
    6af4:	1c 82       	std	Y+4, r1	; 0x04
    6af6:	8c 81       	ldd	r24, Y+4	; 0x04
    6af8:	88 30       	cpi	r24, 0x08	; 8
    6afa:	08 f0       	brcs	.+2      	; 0x6afe <.1355_finished+0x140>
    6afc:	2a c2       	rjmp	.+1108   	; 0x6f52 <.1355_finished+0x594>
									g_packetReply.data[byte + 4] =
    6afe:	8c 81       	ldd	r24, Y+4	; 0x04
    6b00:	99 27       	eor	r25, r25
    6b02:	8c 01       	movw	r16, r24
    6b04:	0c 52       	subi	r16, 0x2C	; 44
    6b06:	18 4f       	sbci	r17, 0xF8	; 248
    6b08:	8d 81       	ldd	r24, Y+5	; 0x05
    6b0a:	0e 94 da 3c 	call	0x79b4 <AT45ReadByteFromBuffer>
    6b0e:	f8 01       	movw	r30, r16
    6b10:	80 83       	st	Z, r24
    6b12:	8c 81       	ldd	r24, Y+4	; 0x04
    6b14:	8f 5f       	subi	r24, 0xFF	; 255
    6b16:	8c 83       	std	Y+4, r24	; 0x04
    6b18:	ee cf       	rjmp	.-36     	; 0x6af6 <.1355_finished+0x138>
										AT45ReadByteFromBuffer(bufno);
							else
							{
	for (byte = 0; byte < PACKET_SIZE; byte++)
    6b1a:	1c 82       	std	Y+4, r1	; 0x04
    6b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b1e:	80 31       	cpi	r24, 0x10	; 16
    6b20:	80 f4       	brcc	.+32     	; 0x6b42 <.1355_finished+0x184>
		((pMas)(&g_readyPacket))[byte] = ((pMas)&g_packetReply)[byte];
    6b22:	8c 81       	ldd	r24, Y+4	; 0x04
    6b24:	99 27       	eor	r25, r25
    6b26:	dc 01       	movw	r26, r24
    6b28:	a9 55       	subi	r26, 0x59	; 89
    6b2a:	b8 4f       	sbci	r27, 0xF8	; 248
    6b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b2e:	99 27       	eor	r25, r25
    6b30:	fc 01       	movw	r30, r24
    6b32:	e3 53       	subi	r30, 0x33	; 51
    6b34:	f8 4f       	sbci	r31, 0xF8	; 248
    6b36:	80 81       	ld	r24, Z
    6b38:	8c 93       	st	X, r24
    6b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b3c:	8f 5f       	subi	r24, 0xFF	; 255
    6b3e:	8c 83       	std	Y+4, r24	; 0x04
    6b40:	ed cf       	rjmp	.-38     	; 0x6b1c <.1355_finished+0x15e>

								AT45SetReadBufferPos(0, 0);
    6b42:	60 e0       	ldi	r22, 0x00	; 0
    6b44:	70 e0       	ldi	r23, 0x00	; 0
    6b46:	80 e0       	ldi	r24, 0x00	; 0
    6b48:	0e 94 fa 3a 	call	0x75f4 <AT45SetReadBufferPos>
								for (k = 0; k < 64; k++)
    6b4c:	1b 82       	std	Y+3, r1	; 0x03
    6b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b50:	80 34       	cpi	r24, 0x40	; 64
    6b52:	08 f0       	brcs	.+2      	; 0x6b56 <.1355_finished+0x198>
    6b54:	fe c1       	rjmp	.+1020   	; 0x6f52 <.1355_finished+0x594>
								{
									for (byte = 0; byte < 8; byte++)
    6b56:	1c 82       	std	Y+4, r1	; 0x04
    6b58:	8c 81       	ldd	r24, Y+4	; 0x04
    6b5a:	88 30       	cpi	r24, 0x08	; 8
    6b5c:	70 f4       	brcc	.+28     	; 0x6b7a <.1355_finished+0x1bc>
										g_readyPacket.data[byte + 4] =
    6b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b60:	99 27       	eor	r25, r25
    6b62:	8c 01       	movw	r16, r24
    6b64:	02 55       	subi	r16, 0x52	; 82
    6b66:	18 4f       	sbci	r17, 0xF8	; 248
    6b68:	8d 81       	ldd	r24, Y+5	; 0x05
    6b6a:	0e 94 da 3c 	call	0x79b4 <AT45ReadByteFromBuffer>
    6b6e:	f8 01       	movw	r30, r16
    6b70:	80 83       	st	Z, r24
    6b72:	8c 81       	ldd	r24, Y+4	; 0x04
    6b74:	8f 5f       	subi	r24, 0xFF	; 255
    6b76:	8c 83       	std	Y+4, r24	; 0x04
    6b78:	ef cf       	rjmp	.-34     	; 0x6b58 <.1355_finished+0x19a>
											AT45ReadByteFromBuffer(bufno);

									SendPacket_();
    6b7a:	0e 94 fe 2e 	call	0x5dfc <SendPacket_>
    6b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b80:	8f 5f       	subi	r24, 0xFF	; 255
    6b82:	8b 83       	std	Y+3, r24	; 0x03
    6b84:	e4 cf       	rjmp	.-56     	; 0x6b4e <.1355_finished+0x190>
								}
							}

							break;
						case CMD_AT45_READ_PAGE_TO_BUF:
							AT45ReadPageToBuffer(0,
    6b86:	60 91 d1 07 	lds	r22, 0x07D1
    6b8a:	70 91 d2 07 	lds	r23, 0x07D2
    6b8e:	80 e0       	ldi	r24, 0x00	; 0
    6b90:	0e 94 8b 3c 	call	0x7916 <AT45ReadPageToBuffer>
								*(uint16_t*)&g_packetReply.data[1]);
							break;
    6b94:	de c1       	rjmp	.+956    	; 0x6f52 <.1355_finished+0x594>
						case CMD_AT45_WRITE_BUFFER:
							//  устанавливаем позицию в буфере, с кот. читаем
							AT45SetWriteBufferPos(0,
    6b96:	60 91 d1 07 	lds	r22, 0x07D1
    6b9a:	70 91 d2 07 	lds	r23, 0x07D2
    6b9e:	80 e0       	ldi	r24, 0x00	; 0
    6ba0:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
								*(uint16_t*)&g_packetReply.data[1]);

							AT45WriteByteToBuffer(0, g_packetReply.data[3]);
    6ba4:	60 91 d3 07 	lds	r22, 0x07D3
    6ba8:	80 e0       	ldi	r24, 0x00	; 0
    6baa:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>
							break;
    6bae:	d1 c1       	rjmp	.+930    	; 0x6f52 <.1355_finished+0x594>
						case CMD_AT45_WRITE_BUF_TO_PAGE:
							//  записать буфер в страницу номер
							AT45WriteBufferToPage(0,
    6bb0:	60 91 d1 07 	lds	r22, 0x07D1
    6bb4:	70 91 d2 07 	lds	r23, 0x07D2
    6bb8:	80 e0       	ldi	r24, 0x00	; 0
    6bba:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>
								*(uint16_t*)&g_packetReply.data[1]);
						case CMD_AT45_SET_READ_POS:
							AT45SetReadBufferPos(0,
    6bbe:	60 91 d1 07 	lds	r22, 0x07D1
    6bc2:	70 91 d2 07 	lds	r23, 0x07D2
    6bc6:	80 e0       	ldi	r24, 0x00	; 0
    6bc8:	0e 94 fa 3a 	call	0x75f4 <AT45SetReadBufferPos>
								*(uint16_t*)&g_packetReply.data[1]);
							break;
    6bcc:	c2 c1       	rjmp	.+900    	; 0x6f52 <.1355_finished+0x594>
						case CMD_AT45_SET_WRITE_POS:
							AT45SetWriteBufferPos(0,
    6bce:	60 91 d1 07 	lds	r22, 0x07D1
    6bd2:	70 91 d2 07 	lds	r23, 0x07D2
    6bd6:	80 e0       	ldi	r24, 0x00	; 0
    6bd8:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
								*(uint16_t*)&g_packetReply.data[1]);
							break;
    6bdc:	ba c1       	rjmp	.+884    	; 0x6f52 <.1355_finished+0x594>
						case CMD_AT45_FILL_BUF:
							AT45FillBuffer(0, g_packetReply.data[1]);
    6bde:	60 91 d1 07 	lds	r22, 0x07D1
    6be2:	80 e0       	ldi	r24, 0x00	; 0
    6be4:	0e 94 e9 3d 	call	0x7bd2 <AT45FillBuffer>

							break;
    6be8:	b4 c1       	rjmp	.+872    	; 0x6f52 <.1355_finished+0x594>
						case CMD_AT45_READ_BYTE:
							g_packetReply.data[0] =
    6bea:	60 91 d3 07 	lds	r22, 0x07D3
    6bee:	70 91 d4 07 	lds	r23, 0x07D4
    6bf2:	80 91 d1 07 	lds	r24, 0x07D1
    6bf6:	90 91 d2 07 	lds	r25, 0x07D2
    6bfa:	0e 94 42 3d 	call	0x7a84 <AT45ReadByteFromPage>
    6bfe:	80 93 d0 07 	sts	0x07D0, r24
								AT45ReadByteFromPage(
									*(uint16_t*)&g_packetReply.data[1],
									*(uint16_t*)&g_packetReply.data[3]);
							break;
    6c02:	a7 c1       	rjmp	.+846    	; 0x6f52 <.1355_finished+0x594>
						case CMD_AT45_SEND_OKTET:
							for (k = 1; k < 9; k++)
    6c04:	81 e0       	ldi	r24, 0x01	; 1
    6c06:	8b 83       	std	Y+3, r24	; 0x03
    6c08:	8b 81       	ldd	r24, Y+3	; 0x03
    6c0a:	89 30       	cpi	r24, 0x09	; 9
    6c0c:	68 f4       	brcc	.+26     	; 0x6c28 <.1355_finished+0x26a>
								AT45WriteByteToBuffer(0, g_packetReply.data[k]);
    6c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c10:	99 27       	eor	r25, r25
    6c12:	fc 01       	movw	r30, r24
    6c14:	e0 53       	subi	r30, 0x30	; 48
    6c16:	f8 4f       	sbci	r31, 0xF8	; 248
    6c18:	60 81       	ld	r22, Z
    6c1a:	80 e0       	ldi	r24, 0x00	; 0
    6c1c:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>
    6c20:	8b 81       	ldd	r24, Y+3	; 0x03
    6c22:	8f 5f       	subi	r24, 0xFF	; 255
    6c24:	8b 83       	std	Y+3, r24	; 0x03
    6c26:	f0 cf       	rjmp	.-32     	; 0x6c08 <.1355_finished+0x24a>

	for (byte = 0; byte < PACKET_SIZE; byte++)
    6c28:	1c 82       	std	Y+4, r1	; 0x04
    6c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    6c2c:	80 31       	cpi	r24, 0x10	; 16
    6c2e:	80 f4       	brcc	.+32     	; 0x6c50 <.1355_finished+0x292>
		((pMas)(&g_readyPacket))[byte] = ((pMas)&g_packetReply)[byte];
    6c30:	8c 81       	ldd	r24, Y+4	; 0x04
    6c32:	99 27       	eor	r25, r25
    6c34:	dc 01       	movw	r26, r24
    6c36:	a9 55       	subi	r26, 0x59	; 89
    6c38:	b8 4f       	sbci	r27, 0xF8	; 248
    6c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    6c3c:	99 27       	eor	r25, r25
    6c3e:	fc 01       	movw	r30, r24
    6c40:	e3 53       	subi	r30, 0x33	; 51
    6c42:	f8 4f       	sbci	r31, 0xF8	; 248
    6c44:	80 81       	ld	r24, Z
    6c46:	8c 93       	st	X, r24
    6c48:	8c 81       	ldd	r24, Y+4	; 0x04
    6c4a:	8f 5f       	subi	r24, 0xFF	; 255
    6c4c:	8c 83       	std	Y+4, r24	; 0x04
    6c4e:	ed cf       	rjmp	.-38     	; 0x6c2a <.1355_finished+0x26c>

								//  ответ для проверки, правильно ли мы поняли
								SendPacket_();		//  немедленный ответ
    6c50:	0e 94 fe 2e 	call	0x5dfc <SendPacket_>

							return;
    6c54:	94 c1       	rjmp	.+808    	; 0x6f7e <.1355_finished+0x5c0>
						case CMD_AT45_ERASE_PAGES:
							e = *(uint16_t*)&g_packetReply.data[1];
    6c56:	80 91 d1 07 	lds	r24, 0x07D1
    6c5a:	90 91 d2 07 	lds	r25, 0x07D2
    6c5e:	9a 83       	std	Y+2, r25	; 0x02
    6c60:	89 83       	std	Y+1, r24	; 0x01
/* временно используем*/	g_StreamEndPage = *(uint16_t*)&g_packetReply.data[3];
    6c62:	80 91 d3 07 	lds	r24, 0x07D3
    6c66:	90 91 d4 07 	lds	r25, 0x07D4
    6c6a:	90 93 a4 07 	sts	0x07A4, r25
    6c6e:	80 93 a3 07 	sts	0x07A3, r24
							for (k = e; k < g_StreamEndPage; k++)
    6c72:	89 81       	ldd	r24, Y+1	; 0x01
    6c74:	8b 83       	std	Y+3, r24	; 0x03
    6c76:	8b 81       	ldd	r24, Y+3	; 0x03
    6c78:	28 2f       	mov	r18, r24
    6c7a:	33 27       	eor	r19, r19
    6c7c:	80 91 a3 07 	lds	r24, 0x07A3
    6c80:	90 91 a4 07 	lds	r25, 0x07A4
    6c84:	28 17       	cp	r18, r24
    6c86:	39 07       	cpc	r19, r25
    6c88:	08 f0       	brcs	.+2      	; 0x6c8c <.1355_finished+0x2ce>
    6c8a:	63 c1       	rjmp	.+710    	; 0x6f52 <.1355_finished+0x594>
								AT45PageErase(k);
    6c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c8e:	99 27       	eor	r25, r25
    6c90:	0e 94 a2 3d 	call	0x7b44 <AT45PageErase>
    6c94:	8b 81       	ldd	r24, Y+3	; 0x03
    6c96:	8f 5f       	subi	r24, 0xFF	; 255
    6c98:	8b 83       	std	Y+3, r24	; 0x03
    6c9a:	ed cf       	rjmp	.-38     	; 0x6c76 <.1355_finished+0x2b8>
							break;
					}
					break;
				case CMD_FATX:
					if (CMD_FATX_FILE_LIST == byte)
    6c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6c9e:	88 23       	and	r24, r24
    6ca0:	e1 f5       	brne	.+120    	; 0x6d1a <.1355_finished+0x35c>
					{
						//  возвращает кол-во файлов, и для каждого из них
						//  список оккупированных страниц
						for (k = 0; k < 100; k++)
    6ca2:	1b 82       	std	Y+3, r1	; 0x03
    6ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ca6:	84 36       	cpi	r24, 0x64	; 100
    6ca8:	08 f0       	brcs	.+2      	; 0x6cac <.1355_finished+0x2ee>
    6caa:	69 c1       	rjmp	.+722    	; 0x6f7e <.1355_finished+0x5c0>
						{
							//  получаем первую страницу файла
							e = fatxFileExists(k);
    6cac:	8b 81       	ldd	r24, Y+3	; 0x03
    6cae:	0e 94 b3 42 	call	0x8566 <fatxFileExists>
    6cb2:	9a 83       	std	Y+2, r25	; 0x02
    6cb4:	89 83       	std	Y+1, r24	; 0x01
							if (e)
    6cb6:	89 81       	ldd	r24, Y+1	; 0x01
    6cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    6cba:	00 97       	sbiw	r24, 0x00	; 0
    6cbc:	51 f1       	breq	.+84     	; 0x6d12 <.1355_finished+0x354>
							{	//  если файл есть

								*(uint16_t*)&g_packetReply.data[1] = k;
    6cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    6cc0:	99 27       	eor	r25, r25
    6cc2:	90 93 d2 07 	sts	0x07D2, r25
    6cc6:	80 93 d1 07 	sts	0x07D1, r24
								// отправка длины файла
								*(uint16_t*)&g_packetReply.data[5] =
    6cca:	8b 81       	ldd	r24, Y+3	; 0x03
    6ccc:	99 27       	eor	r25, r25
    6cce:	88 0f       	add	r24, r24
    6cd0:	99 1f       	adc	r25, r25
    6cd2:	88 0f       	add	r24, r24
    6cd4:	99 1f       	adc	r25, r25
    6cd6:	fc 01       	movw	r30, r24
    6cd8:	e1 5f       	subi	r30, 0xF1	; 241
    6cda:	f5 4f       	sbci	r31, 0xF5	; 245
    6cdc:	80 81       	ld	r24, Z
    6cde:	91 81       	ldd	r25, Z+1	; 0x01
    6ce0:	90 93 d6 07 	sts	0x07D6, r25
    6ce4:	80 93 d5 07 	sts	0x07D5, r24
									rootdir[(k << 1) + 1];

								while (e != 0xFFFF)
    6ce8:	89 81       	ldd	r24, Y+1	; 0x01
    6cea:	9a 81       	ldd	r25, Y+2	; 0x02
    6cec:	ff ef       	ldi	r31, 0xFF	; 255
    6cee:	8f 3f       	cpi	r24, 0xFF	; 255
    6cf0:	9f 07       	cpc	r25, r31
    6cf2:	79 f0       	breq	.+30     	; 0x6d12 <.1355_finished+0x354>
								{
									//  получить след. страницу файла
									*(uint16_t*)&g_packetReply.data[3] = e;
    6cf4:	89 81       	ldd	r24, Y+1	; 0x01
    6cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf8:	90 93 d4 07 	sts	0x07D4, r25
    6cfc:	80 93 d3 07 	sts	0x07D3, r24
									e = fatxGetNextPage(e);
    6d00:	89 81       	ldd	r24, Y+1	; 0x01
    6d02:	9a 81       	ldd	r25, Y+2	; 0x02
    6d04:	0e 94 16 43 	call	0x862c <fatxGetNextPage>
    6d08:	9a 83       	std	Y+2, r25	; 0x02
    6d0a:	89 83       	std	Y+1, r24	; 0x01
									_SendPacket();
    6d0c:	0e 94 d5 2e 	call	0x5daa <_SendPacket>
    6d10:	eb cf       	rjmp	.-42     	; 0x6ce8 <.1355_finished+0x32a>
    6d12:	8b 81       	ldd	r24, Y+3	; 0x03
    6d14:	8f 5f       	subi	r24, 0xFF	; 255
    6d16:	8b 83       	std	Y+3, r24	; 0x03
    6d18:	c5 cf       	rjmp	.-118    	; 0x6ca4 <.1355_finished+0x2e6>
								}
							}
						}
						return;
					}else
					if (CMD_FATX_CREATE_FILE == byte)
    6d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d1c:	81 30       	cpi	r24, 0x01	; 1
    6d1e:	19 f4       	brne	.+6      	; 0x6d26 <.1355_finished+0x368>
							fatxCreateFile();
    6d20:	0e 94 40 41 	call	0x8280 <fatxCreateFile>
    6d24:	62 c0       	rjmp	.+196    	; 0x6dea <.1355_finished+0x42c>
					else if (CMD_FATX_DELETE_FILE == byte)
    6d26:	8c 81       	ldd	r24, Y+4	; 0x04
    6d28:	82 30       	cpi	r24, 0x02	; 2
    6d2a:	29 f4       	brne	.+10     	; 0x6d36 <.1355_finished+0x378>
							fatxDeleteFile(g_packetReply.data[1]);
    6d2c:	80 91 d1 07 	lds	r24, 0x07D1
    6d30:	0e 94 a6 41 	call	0x834c <fatxDeleteFile>
    6d34:	5a c0       	rjmp	.+180    	; 0x6dea <.1355_finished+0x42c>
					else if (CMD_FATX_ADD_PAGE == byte)
    6d36:	8c 81       	ldd	r24, Y+4	; 0x04
    6d38:	83 30       	cpi	r24, 0x03	; 3
    6d3a:	49 f4       	brne	.+18     	; 0x6d4e <.1355_finished+0x390>
							fatxAddPageToFile(g_packetReply.data[1],
    6d3c:	60 91 d3 07 	lds	r22, 0x07D3
    6d40:	70 91 d4 07 	lds	r23, 0x07D4
    6d44:	80 91 d1 07 	lds	r24, 0x07D1
    6d48:	0e 94 10 42 	call	0x8420 <fatxAddPageToFile>
    6d4c:	4e c0       	rjmp	.+156    	; 0x6dea <.1355_finished+0x42c>
								*(uint16_t*)&g_packetReply.data[3]);
					else if (CMD_FATX_FORMAT == byte)
    6d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d50:	84 30       	cpi	r24, 0x04	; 4
    6d52:	19 f4       	brne	.+6      	; 0x6d5a <.1355_finished+0x39c>
							fatxFormat();
    6d54:	0e 94 d2 42 	call	0x85a4 <fatxFormat>
    6d58:	48 c0       	rjmp	.+144    	; 0x6dea <.1355_finished+0x42c>
					else if (CMD_FATX_GET_FILE_PAGES == byte);
    6d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d5c:	85 30       	cpi	r24, 0x05	; 5
    6d5e:	09 f4       	brne	.+2      	; 0x6d62 <.1355_finished+0x3a4>
    6d60:	44 c0       	rjmp	.+136    	; 0x6dea <.1355_finished+0x42c>
					else if (CMD_FATX_WRITE_PAGE == byte);
    6d62:	8c 81       	ldd	r24, Y+4	; 0x04
    6d64:	86 30       	cpi	r24, 0x06	; 6
    6d66:	09 f4       	brne	.+2      	; 0x6d6a <.1355_finished+0x3ac>
    6d68:	40 c0       	rjmp	.+128    	; 0x6dea <.1355_finished+0x42c>
					else if (CMD_FATX_OPEN_FILE == byte)
    6d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d6c:	87 30       	cpi	r24, 0x07	; 7
    6d6e:	49 f4       	brne	.+18     	; 0x6d82 <.1355_finished+0x3c4>
							g_packetReply.data[1] =
    6d70:	60 91 d2 07 	lds	r22, 0x07D2
    6d74:	80 91 d1 07 	lds	r24, 0x07D1
    6d78:	0e 94 3b 43 	call	0x8676 <fatxOpenFile>
    6d7c:	80 93 d1 07 	sts	0x07D1, r24
    6d80:	34 c0       	rjmp	.+104    	; 0x6dea <.1355_finished+0x42c>
								fatxOpenFile(g_packetReply.data[1],
									g_packetReply.data[2]);
					else if (CMD_FATX_READ_PAGE == byte)
    6d82:	8c 81       	ldd	r24, Y+4	; 0x04
    6d84:	89 30       	cpi	r24, 0x09	; 9
    6d86:	39 f4       	brne	.+14     	; 0x6d96 <.1355_finished+0x3d8>
							g_packetReply.data[1] =
    6d88:	82 ed       	ldi	r24, 0xD2	; 210
    6d8a:	97 e0       	ldi	r25, 0x07	; 7
    6d8c:	0e 94 41 44 	call	0x8882 <fatxReadByteFromFile>
    6d90:	80 93 d1 07 	sts	0x07D1, r24
    6d94:	2a c0       	rjmp	.+84     	; 0x6dea <.1355_finished+0x42c>
								fatxReadByteFromFile(&g_packetReply.data[2]);
					else if (CMD_FATX_SEEK == byte)
    6d96:	8c 81       	ldd	r24, Y+4	; 0x04
    6d98:	8a 30       	cpi	r24, 0x0A	; 10
    6d9a:	41 f4       	brne	.+16     	; 0x6dac <.1355_finished+0x3ee>
							g_packetReply.data[1] =
    6d9c:	80 91 d1 07 	lds	r24, 0x07D1
    6da0:	99 27       	eor	r25, r25
    6da2:	0e 94 d4 44 	call	0x89a8 <fatxFileSeek>
    6da6:	80 93 d1 07 	sts	0x07D1, r24
    6daa:	1f c0       	rjmp	.+62     	; 0x6dea <.1355_finished+0x42c>
								fatxFileSeek(g_packetReply.data[1]);
					else if (CMD_FATX_READ_BYTE == byte)
    6dac:	8c 81       	ldd	r24, Y+4	; 0x04
    6dae:	8b 30       	cpi	r24, 0x0B	; 11
    6db0:	39 f4       	brne	.+14     	; 0x6dc0 <.1355_finished+0x402>
							g_packetReply.data[1] =
    6db2:	82 ed       	ldi	r24, 0xD2	; 210
    6db4:	97 e0       	ldi	r25, 0x07	; 7
    6db6:	0e 94 41 44 	call	0x8882 <fatxReadByteFromFile>
    6dba:	80 93 d1 07 	sts	0x07D1, r24
    6dbe:	15 c0       	rjmp	.+42     	; 0x6dea <.1355_finished+0x42c>
								fatxReadByteFromFile(&g_packetReply.data[2]);
					else if (CMD_FATX_WRITE_BYTE == byte)
    6dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    6dc2:	8c 30       	cpi	r24, 0x0C	; 12
    6dc4:	39 f4       	brne	.+14     	; 0x6dd4 <.1355_finished+0x416>
							g_packetReply.data[1] =
    6dc6:	80 91 d1 07 	lds	r24, 0x07D1
    6dca:	0e 94 36 45 	call	0x8a6c <fatxWriteByteToFile>
    6dce:	80 93 d1 07 	sts	0x07D1, r24
    6dd2:	0b c0       	rjmp	.+22     	; 0x6dea <.1355_finished+0x42c>
								fatxWriteByteToFile(g_packetReply.data[1]);
					else if (CMD_FATX_FLUSH_FILE == byte)
    6dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    6dd6:	8d 30       	cpi	r24, 0x0D	; 13
    6dd8:	19 f4       	brne	.+6      	; 0x6de0 <.1355_finished+0x422>
							fatxFlushFile();
    6dda:	0e 94 ce 45 	call	0x8b9c <fatxFlushFile>
    6dde:	05 c0       	rjmp	.+10     	; 0x6dea <.1355_finished+0x42c>
					else if (CMD_CLOSE_FILE == byte)
    6de0:	8c 81       	ldd	r24, Y+4	; 0x04
    6de2:	8e 30       	cpi	r24, 0x0E	; 14
    6de4:	11 f4       	brne	.+4      	; 0x6dea <.1355_finished+0x42c>
							fatxCloseFile();
    6de6:	0e 94 af 43 	call	0x875e <fatxCloseFile>
				case CMD_TEL:
					if (!g_packetReply.data[0])		//   CMD_TEL_BUTTON
    6dea:	80 91 d0 07 	lds	r24, 0x07D0
    6dee:	88 23       	and	r24, r24
    6df0:	09 f0       	breq	.+2      	; 0x6df4 <.1355_finished+0x436>
    6df2:	af c0       	rjmp	.+350    	; 0x6f52 <.1355_finished+0x594>
					{
						AddKey(g_packetReply.data[1]);
    6df4:	80 91 d1 07 	lds	r24, 0x07D1
    6df8:	0e 94 c9 2a 	call	0x5592 <AddKey>
					};
					break;
    6dfc:	aa c0       	rjmp	.+340    	; 0x6f52 <.1355_finished+0x594>
				case CMD_SPEAKERVOLUME:
					//SetSpeakerVolume(g_packetReply.data[0]);
					break;
				case CMD_GSM:
					if (!byte)
    6dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    6e00:	88 23       	and	r24, r24
    6e02:	31 f4       	brne	.+12     	; 0x6e10 <.1355_finished+0x452>
						PORTD &= ~PWR;
    6e04:	80 91 32 00 	lds	r24, 0x0032
    6e08:	8f 7e       	andi	r24, 0xEF	; 239
    6e0a:	80 93 32 00 	sts	0x0032, r24
    6e0e:	8d c0       	rjmp	.+282    	; 0x6f2a <.1355_finished+0x56c>
					else if (1 == byte)
    6e10:	8c 81       	ldd	r24, Y+4	; 0x04
    6e12:	81 30       	cpi	r24, 0x01	; 1
    6e14:	31 f4       	brne	.+12     	; 0x6e22 <.1355_finished+0x464>
							PORTD |= PWR;
    6e16:	80 91 32 00 	lds	r24, 0x0032
    6e1a:	80 61       	ori	r24, 0x10	; 16
    6e1c:	80 93 32 00 	sts	0x0032, r24
    6e20:	84 c0       	rjmp	.+264    	; 0x6f2a <.1355_finished+0x56c>
					else if (byte == 2)
    6e22:	8c 81       	ldd	r24, Y+4	; 0x04
    6e24:	82 30       	cpi	r24, 0x02	; 2
    6e26:	49 f5       	brne	.+82     	; 0x6e7a <.1355_finished+0x4bc>
					{	// стартует потоковый режим записи во флешку -
						g_StreamMode = 1;
    6e28:	81 e0       	ldi	r24, 0x01	; 1
    6e2a:	80 93 a2 07 	sts	0x07A2, r24
						g_ShowTime = 0;
    6e2e:	10 92 f7 06 	sts	0x06F7, r1
						//  куда записывать данные
						g_StreamStartPage = *(uint16_t*)&g_packetReply.data[1];
    6e32:	80 91 d1 07 	lds	r24, 0x07D1
    6e36:	90 91 d2 07 	lds	r25, 0x07D2
    6e3a:	90 93 7c 07 	sts	0x077C, r25
    6e3e:	80 93 7b 07 	sts	0x077B, r24
						//  сколько страниц с данными сейчас запишется в этом режиме
						g_StreamEndPage = g_StreamStartPage +
    6e42:	20 91 d3 07 	lds	r18, 0x07D3
    6e46:	30 91 d4 07 	lds	r19, 0x07D4
    6e4a:	80 91 7b 07 	lds	r24, 0x077B
    6e4e:	90 91 7c 07 	lds	r25, 0x077C
    6e52:	82 0f       	add	r24, r18
    6e54:	93 1f       	adc	r25, r19
    6e56:	90 93 a4 07 	sts	0x07A4, r25
    6e5a:	80 93 a3 07 	sts	0x07A3, r24
							*(uint16_t*)&g_packetReply.data[3];
						g_StreamCurByteCounter = 0;
    6e5e:	10 92 a6 07 	sts	0x07A6, r1
    6e62:	10 92 a5 07 	sts	0x07A5, r1
						g_packetReplyPos = 0;		//  в этом режиме - активный буфер
    6e66:	10 92 67 06 	sts	0x0667, r1
						AT45SetWriteBufferPos(0, 0);
    6e6a:	60 e0       	ldi	r22, 0x00	; 0
    6e6c:	70 e0       	ldi	r23, 0x00	; 0
    6e6e:	80 e0       	ldi	r24, 0x00	; 0
    6e70:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
						ClearScreen();
    6e74:	0e 94 79 29 	call	0x52f2 <ClearScreen>
    6e78:	58 c0       	rjmp	.+176    	; 0x6f2a <.1355_finished+0x56c>
					}
					else if (byte == 3)
    6e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    6e7c:	83 30       	cpi	r24, 0x03	; 3
    6e7e:	19 f4       	brne	.+6      	; 0x6e86 <.1355_finished+0x4c8>
							InitPWM();
    6e80:	0e 94 b3 28 	call	0x5166 <InitPWM>
    6e84:	52 c0       	rjmp	.+164    	; 0x6f2a <.1355_finished+0x56c>
					else if (byte == 4)
    6e86:	8c 81       	ldd	r24, Y+4	; 0x04
    6e88:	84 30       	cpi	r24, 0x04	; 4
    6e8a:	19 f4       	brne	.+6      	; 0x6e92 <.1355_finished+0x4d4>
							TCCR1B = 0;
    6e8c:	10 92 4e 00 	sts	0x004E, r1
    6e90:	4c c0       	rjmp	.+152    	; 0x6f2a <.1355_finished+0x56c>
					else if (byte == 5)
    6e92:	8c 81       	ldd	r24, Y+4	; 0x04
    6e94:	85 30       	cpi	r24, 0x05	; 5
    6e96:	41 f4       	brne	.+16     	; 0x6ea8 <.1355_finished+0x4ea>
							OCR1B = g_packetReply.data[1];
    6e98:	80 91 d1 07 	lds	r24, 0x07D1
    6e9c:	99 27       	eor	r25, r25
    6e9e:	90 93 49 00 	sts	0x0049, r25
    6ea2:	80 93 48 00 	sts	0x0048, r24
    6ea6:	41 c0       	rjmp	.+130    	; 0x6f2a <.1355_finished+0x56c>
					else if (byte == 6)
    6ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    6eaa:	86 30       	cpi	r24, 0x06	; 6
    6eac:	79 f4       	brne	.+30     	; 0x6ecc <.1355_finished+0x50e>
						 {
							*(uint16_t*)&g_packetReply.data[1] = a2dConvert10bit(1);
    6eae:	81 e0       	ldi	r24, 0x01	; 1
    6eb0:	0e 94 f0 47 	call	0x8fe0 <a2dConvert10bit>
    6eb4:	90 93 d2 07 	sts	0x07D2, r25
    6eb8:	80 93 d1 07 	sts	0x07D1, r24
							g_packetReply.data[3] = 0;
    6ebc:	10 92 d3 07 	sts	0x07D3, r1
							g_packetReply.data[4] = a2dConvert8bit(1);
    6ec0:	81 e0       	ldi	r24, 0x01	; 1
    6ec2:	0e 94 2d 48 	call	0x905a <a2dConvert8bit>
    6ec6:	80 93 d4 07 	sts	0x07D4, r24
    6eca:	2f c0       	rjmp	.+94     	; 0x6f2a <.1355_finished+0x56c>
						 }
					else if (byte == 7)
    6ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    6ece:	87 30       	cpi	r24, 0x07	; 7
    6ed0:	29 f4       	brne	.+10     	; 0x6edc <.1355_finished+0x51e>
							StartLineAnalize(g_packetReply.data[1]);
    6ed2:	80 91 d1 07 	lds	r24, 0x07D1
    6ed6:	0e 94 38 20 	call	0x4070 <StartLineAnalize>
    6eda:	27 c0       	rjmp	.+78     	; 0x6f2a <.1355_finished+0x56c>
							//*(uint16_t*)&g_packetReply.data[1] = SP;
					else if (byte == 8)
    6edc:	8c 81       	ldd	r24, Y+4	; 0x04
    6ede:	88 30       	cpi	r24, 0x08	; 8
    6ee0:	89 f4       	brne	.+34     	; 0x6f04 <.1355_finished+0x546>
							g_params[g_packetReply.data[1]] =
    6ee2:	80 91 d1 07 	lds	r24, 0x07D1
    6ee6:	28 2f       	mov	r18, r24
    6ee8:	33 27       	eor	r19, r19
    6eea:	c9 01       	movw	r24, r18
    6eec:	82 0f       	add	r24, r18
    6eee:	93 1f       	adc	r25, r19
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	e8 5f       	subi	r30, 0xF8	; 248
    6ef4:	fb 4f       	sbci	r31, 0xFB	; 251
    6ef6:	80 91 d2 07 	lds	r24, 0x07D2
    6efa:	90 91 d3 07 	lds	r25, 0x07D3
    6efe:	91 83       	std	Z+1, r25	; 0x01
    6f00:	80 83       	st	Z, r24
    6f02:	13 c0       	rjmp	.+38     	; 0x6f2a <.1355_finished+0x56c>
								*(uint16_t*)&g_packetReply.data[2];
					else if (byte == 9)
    6f04:	8c 81       	ldd	r24, Y+4	; 0x04
    6f06:	89 30       	cpi	r24, 0x09	; 9
    6f08:	41 f4       	brne	.+16     	; 0x6f1a <.1355_finished+0x55c>
							//  изменение любого байта в оперативной памяти
							//  можно корректировать что-хочешь
							*((unsigned char*)*(unsigned short*)(&g_packetReply.data[2]))
    6f0a:	e0 91 d2 07 	lds	r30, 0x07D2
    6f0e:	f0 91 d3 07 	lds	r31, 0x07D3
    6f12:	80 91 d1 07 	lds	r24, 0x07D1
    6f16:	80 83       	st	Z, r24
    6f18:	08 c0       	rjmp	.+16     	; 0x6f2a <.1355_finished+0x56c>
								= g_packetReply.data[1];
					else if (byte == 10)
    6f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6f1c:	8a 30       	cpi	r24, 0x0A	; 10
    6f1e:	29 f4       	brne	.+10     	; 0x6f2a <.1355_finished+0x56c>
					{
						GSM_Transmit(g_packetReply.data[1]);
    6f20:	80 91 d1 07 	lds	r24, 0x07D1
    6f24:	0e 94 7f 2b 	call	0x56fe <GSM_Transmit>
						return;
    6f28:	2a c0       	rjmp	.+84     	; 0x6f7e <.1355_finished+0x5c0>
					}

				case CMD_ZVUK:
					if (!byte)
    6f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    6f2c:	88 23       	and	r24, r24
    6f2e:	39 f4       	brne	.+14     	; 0x6f3e <.1355_finished+0x580>
							//  установить начальную страницу для фразы
							//zvPage = *(uint16_t*)&g_packetReply.data[1];
							setstart(*(uint16_t*)&g_packetReply.data[1]);
    6f30:	80 91 d1 07 	lds	r24, 0x07D1
    6f34:	90 91 d2 07 	lds	r25, 0x07D2
    6f38:	0e 94 1d 20 	call	0x403a <setstart>
    6f3c:	0a c0       	rjmp	.+20     	; 0x6f52 <.1355_finished+0x594>
					else
					if (1 == byte)
    6f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    6f40:	81 30       	cpi	r24, 0x01	; 1
    6f42:	39 f4       	brne	.+14     	; 0x6f52 <.1355_finished+0x594>
						SendVoice(*(uint16_t*)&g_packetReply.data[1], 1);
    6f44:	61 e0       	ldi	r22, 0x01	; 1
    6f46:	80 91 d1 07 	lds	r24, 0x07D1
    6f4a:	90 91 d2 07 	lds	r25, 0x07D2
    6f4e:	0e 94 61 1c 	call	0x38c2 <SendVoice>
			}

	for (byte = 0; byte < PACKET_SIZE; byte++)
    6f52:	1c 82       	std	Y+4, r1	; 0x04
    6f54:	8c 81       	ldd	r24, Y+4	; 0x04
    6f56:	80 31       	cpi	r24, 0x10	; 16
    6f58:	80 f4       	brcc	.+32     	; 0x6f7a <.1355_finished+0x5bc>
		((pMas)(&g_readyPacket))[byte] = ((pMas)&g_packetReply)[byte];
    6f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    6f5c:	99 27       	eor	r25, r25
    6f5e:	dc 01       	movw	r26, r24
    6f60:	a9 55       	subi	r26, 0x59	; 89
    6f62:	b8 4f       	sbci	r27, 0xF8	; 248
    6f64:	8c 81       	ldd	r24, Y+4	; 0x04
    6f66:	99 27       	eor	r25, r25
    6f68:	fc 01       	movw	r30, r24
    6f6a:	e3 53       	subi	r30, 0x33	; 51
    6f6c:	f8 4f       	sbci	r31, 0xF8	; 248
    6f6e:	80 81       	ld	r24, Z
    6f70:	8c 93       	st	X, r24
    6f72:	8c 81       	ldd	r24, Y+4	; 0x04
    6f74:	8f 5f       	subi	r24, 0xFF	; 255
    6f76:	8c 83       	std	Y+4, r24	; 0x04
    6f78:	ed cf       	rjmp	.-38     	; 0x6f54 <.1355_finished+0x596>

	SendPacket_();		//  немедленный ответ
    6f7a:	0e 94 fe 2e 	call	0x5dfc <SendPacket_>
    6f7e:	64 96       	adiw	r28, 0x14	; 20
    6f80:	0f b6       	in	r0, 0x3f	; 63
    6f82:	f8 94       	cli
    6f84:	de bf       	out	0x3e, r29	; 62
    6f86:	0f be       	out	0x3f, r0	; 63
    6f88:	cd bf       	out	0x3d, r28	; 61
    6f8a:	df 91       	pop	r29
    6f8c:	cf 91       	pop	r28
    6f8e:	1f 91       	pop	r17
    6f90:	0f 91       	pop	r16
    6f92:	08 95       	ret

00006f94 <SendManualPacket>:
}

void SendManualPacket(unsigned char* sz)
{
    6f94:	0f 93       	push	r16
    6f96:	1f 93       	push	r17
    6f98:	cf 93       	push	r28
    6f9a:	df 93       	push	r29
    6f9c:	cd b7       	in	r28, 0x3d	; 61
    6f9e:	de b7       	in	r29, 0x3e	; 62
    6fa0:	27 97       	sbiw	r28, 0x07	; 7
    6fa2:	0f b6       	in	r0, 0x3f	; 63
    6fa4:	f8 94       	cli
    6fa6:	de bf       	out	0x3e, r29	; 62
    6fa8:	0f be       	out	0x3f, r0	; 63
    6faa:	cd bf       	out	0x3d, r28	; 61
    6fac:	9a 83       	std	Y+2, r25	; 0x02
    6fae:	89 83       	std	Y+1, r24	; 0x01
	unsigned char k, x;
	unsigned char buf[3];

	x = 1;
    6fb0:	81 e0       	ldi	r24, 0x01	; 1
    6fb2:	8c 83       	std	Y+4, r24	; 0x04

	for (k = 0; k < MAX_INPUT; k += 3)
    6fb4:	1b 82       	std	Y+3, r1	; 0x03
    6fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    6fb8:	80 31       	cpi	r24, 0x10	; 16
    6fba:	a8 f5       	brcc	.+106    	; 0x7026 <SendManualPacket+0x92>
	{
		buf[0] = sz[k];
    6fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    6fbe:	28 2f       	mov	r18, r24
    6fc0:	33 27       	eor	r19, r19
    6fc2:	89 81       	ldd	r24, Y+1	; 0x01
    6fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    6fc6:	f9 01       	movw	r30, r18
    6fc8:	e8 0f       	add	r30, r24
    6fca:	f9 1f       	adc	r31, r25
    6fcc:	80 81       	ld	r24, Z
    6fce:	8d 83       	std	Y+5, r24	; 0x05
		buf[1] = sz[k + 1];
    6fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    6fd2:	28 2f       	mov	r18, r24
    6fd4:	33 27       	eor	r19, r19
    6fd6:	89 81       	ldd	r24, Y+1	; 0x01
    6fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    6fda:	82 0f       	add	r24, r18
    6fdc:	93 1f       	adc	r25, r19
    6fde:	fc 01       	movw	r30, r24
    6fe0:	31 96       	adiw	r30, 0x01	; 1
    6fe2:	80 81       	ld	r24, Z
    6fe4:	8e 83       	std	Y+6, r24	; 0x06
		buf[2] = sz[k + 2];
    6fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    6fe8:	28 2f       	mov	r18, r24
    6fea:	33 27       	eor	r19, r19
    6fec:	89 81       	ldd	r24, Y+1	; 0x01
    6fee:	9a 81       	ldd	r25, Y+2	; 0x02
    6ff0:	82 0f       	add	r24, r18
    6ff2:	93 1f       	adc	r25, r19
    6ff4:	fc 01       	movw	r30, r24
    6ff6:	32 96       	adiw	r30, 0x02	; 2
    6ff8:	80 81       	ld	r24, Z
    6ffa:	8f 83       	std	Y+7, r24	; 0x07

		sz[x] = atoi(buf);
    6ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    6ffe:	28 2f       	mov	r18, r24
    7000:	33 27       	eor	r19, r19
    7002:	89 81       	ldd	r24, Y+1	; 0x01
    7004:	9a 81       	ldd	r25, Y+2	; 0x02
    7006:	89 01       	movw	r16, r18
    7008:	08 0f       	add	r16, r24
    700a:	19 1f       	adc	r17, r25
    700c:	ce 01       	movw	r24, r28
    700e:	05 96       	adiw	r24, 0x05	; 5
    7010:	0e 94 9e 4e 	call	0x9d3c <atoi>
    7014:	f8 01       	movw	r30, r16
    7016:	80 83       	st	Z, r24
		x++;
    7018:	8c 81       	ldd	r24, Y+4	; 0x04
    701a:	8f 5f       	subi	r24, 0xFF	; 255
    701c:	8c 83       	std	Y+4, r24	; 0x04
    701e:	8b 81       	ldd	r24, Y+3	; 0x03
    7020:	8d 5f       	subi	r24, 0xFD	; 253
    7022:	8b 83       	std	Y+3, r24	; 0x03
    7024:	c8 cf       	rjmp	.-112    	; 0x6fb6 <SendManualPacket+0x22>
	}

	for (k = x; k < PACKET_SIZE; k++)
    7026:	8c 81       	ldd	r24, Y+4	; 0x04
    7028:	8b 83       	std	Y+3, r24	; 0x03
    702a:	8b 81       	ldd	r24, Y+3	; 0x03
    702c:	80 31       	cpi	r24, 0x10	; 16
    702e:	68 f4       	brcc	.+26     	; 0x704a <SendManualPacket+0xb6>
		sz[k] = 0;
    7030:	8b 81       	ldd	r24, Y+3	; 0x03
    7032:	28 2f       	mov	r18, r24
    7034:	33 27       	eor	r19, r19
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	9a 81       	ldd	r25, Y+2	; 0x02
    703a:	f9 01       	movw	r30, r18
    703c:	e8 0f       	add	r30, r24
    703e:	f9 1f       	adc	r31, r25
    7040:	10 82       	st	Z, r1
    7042:	8b 81       	ldd	r24, Y+3	; 0x03
    7044:	8f 5f       	subi	r24, 0xFF	; 255
    7046:	8b 83       	std	Y+3, r24	; 0x03
    7048:	f0 cf       	rjmp	.-32     	; 0x702a <SendManualPacket+0x96>

	SendPacket((PPACKET)sz);
    704a:	89 81       	ldd	r24, Y+1	; 0x01
    704c:	9a 81       	ldd	r25, Y+2	; 0x02
    704e:	0e 94 2d 2f 	call	0x5e5a <SendPacket>
    7052:	27 96       	adiw	r28, 0x07	; 7
    7054:	0f b6       	in	r0, 0x3f	; 63
    7056:	f8 94       	cli
    7058:	de bf       	out	0x3e, r29	; 62
    705a:	0f be       	out	0x3f, r0	; 63
    705c:	cd bf       	out	0x3d, r28	; 61
    705e:	df 91       	pop	r29
    7060:	cf 91       	pop	r28
    7062:	1f 91       	pop	r17
    7064:	0f 91       	pop	r16
    7066:	08 95       	ret

00007068 <EnablePoll>:
}

void EnablePoll(unsigned char pollValue)
{
    7068:	cf 93       	push	r28
    706a:	df 93       	push	r29
    706c:	cd b7       	in	r28, 0x3d	; 61
    706e:	de b7       	in	r29, 0x3e	; 62
    7070:	21 97       	sbiw	r28, 0x01	; 1
    7072:	0f b6       	in	r0, 0x3f	; 63
    7074:	f8 94       	cli
    7076:	de bf       	out	0x3e, r29	; 62
    7078:	0f be       	out	0x3f, r0	; 63
    707a:	cd bf       	out	0x3d, r28	; 61
    707c:	89 83       	std	Y+1, r24	; 0x01
	g_PollEnable = pollValue;
    707e:	89 81       	ldd	r24, Y+1	; 0x01
    7080:	80 93 cc 07 	sts	0x07CC, r24
    7084:	21 96       	adiw	r28, 0x01	; 1
    7086:	0f b6       	in	r0, 0x3f	; 63
    7088:	f8 94       	cli
    708a:	de bf       	out	0x3e, r29	; 62
    708c:	0f be       	out	0x3f, r0	; 63
    708e:	cd bf       	out	0x3d, r28	; 61
    7090:	df 91       	pop	r29
    7092:	cf 91       	pop	r28
    7094:	08 95       	ret

00007096 <ChangeSensorReactionTimeout>:
}

void ChangeSensorReactionTimeout(unsigned short newValue)
{
    7096:	cf 93       	push	r28
    7098:	df 93       	push	r29
    709a:	cd b7       	in	r28, 0x3d	; 61
    709c:	de b7       	in	r29, 0x3e	; 62
    709e:	24 97       	sbiw	r28, 0x04	; 4
    70a0:	0f b6       	in	r0, 0x3f	; 63
    70a2:	f8 94       	cli
    70a4:	de bf       	out	0x3e, r29	; 62
    70a6:	0f be       	out	0x3f, r0	; 63
    70a8:	cd bf       	out	0x3d, r28	; 61
    70aa:	9a 83       	std	Y+2, r25	; 0x02
    70ac:	89 83       	std	Y+1, r24	; 0x01
	unsigned short adr;

#ifndef NEWVG
	adr = g_CurDev.adr - 3;
#else
	adr = 0;
    70ae:	1c 82       	std	Y+4, r1	; 0x04
    70b0:	1b 82       	std	Y+3, r1	; 0x03
#endif

	adr = EADR_DEVICE_LIST + (0)*sizeof(XDEVICE) + 3 +
    70b2:	80 91 f6 07 	lds	r24, 0x07F6
    70b6:	99 27       	eor	r25, r25
    70b8:	88 0f       	add	r24, r24
    70ba:	99 1f       	adc	r25, r25
    70bc:	8d 5f       	subi	r24, 0xFD	; 253
    70be:	9e 4f       	sbci	r25, 0xFE	; 254
    70c0:	9c 83       	std	Y+4, r25	; 0x04
    70c2:	8b 83       	std	Y+3, r24	; 0x03
		(g_CurDev.curSensor << 1);

//	g_devList[g_CurDev.adr - 3].sensorTimeout[g_CurDev.curSensor] = newValue;
	g_CurDev.sensorTimeout[g_CurDev.curSensor] = newValue;
    70c4:	80 91 f6 07 	lds	r24, 0x07F6
    70c8:	28 2f       	mov	r18, r24
    70ca:	33 27       	eor	r19, r19
    70cc:	c9 01       	movw	r24, r18
    70ce:	82 0f       	add	r24, r18
    70d0:	93 1f       	adc	r25, r19
    70d2:	fc 01       	movw	r30, r24
    70d4:	ea 51       	subi	r30, 0x1A	; 26
    70d6:	f8 4f       	sbci	r31, 0xF8	; 248
    70d8:	89 81       	ldd	r24, Y+1	; 0x01
    70da:	9a 81       	ldd	r25, Y+2	; 0x02
    70dc:	91 83       	std	Z+1, r25	; 0x01
    70de:	80 83       	st	Z, r24

//	eeprom_write_word((unsigned char*)adr, newValue);
	eeprom_write_byte_1((unsigned char*)adr, newValue & 0x00FF);
    70e0:	69 81       	ldd	r22, Y+1	; 0x01
    70e2:	8b 81       	ldd	r24, Y+3	; 0x03
    70e4:	9c 81       	ldd	r25, Y+4	; 0x04
    70e6:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
	eeprom_write_byte_1((unsigned char*)adr + 1, newValue >> 8);
    70ea:	89 81       	ldd	r24, Y+1	; 0x01
    70ec:	9a 81       	ldd	r25, Y+2	; 0x02
    70ee:	29 2f       	mov	r18, r25
    70f0:	33 27       	eor	r19, r19
    70f2:	8b 81       	ldd	r24, Y+3	; 0x03
    70f4:	9c 81       	ldd	r25, Y+4	; 0x04
    70f6:	01 96       	adiw	r24, 0x01	; 1
    70f8:	62 2f       	mov	r22, r18
    70fa:	0e 94 c9 39 	call	0x7392 <eeprom_write_byte_1>
    70fe:	24 96       	adiw	r28, 0x04	; 4
    7100:	0f b6       	in	r0, 0x3f	; 63
    7102:	f8 94       	cli
    7104:	de bf       	out	0x3e, r29	; 62
    7106:	0f be       	out	0x3f, r0	; 63
    7108:	cd bf       	out	0x3d, r28	; 61
    710a:	df 91       	pop	r29
    710c:	cf 91       	pop	r28
    710e:	08 95       	ret

00007110 <SetDefBuiltinTimeout>:
}

void SetDefBuiltinTimeout(unsigned short timeout)
{
    7110:	cf 93       	push	r28
    7112:	df 93       	push	r29
    7114:	cd b7       	in	r28, 0x3d	; 61
    7116:	de b7       	in	r29, 0x3e	; 62
    7118:	26 97       	sbiw	r28, 0x06	; 6
    711a:	0f b6       	in	r0, 0x3f	; 63
    711c:	f8 94       	cli
    711e:	de bf       	out	0x3e, r29	; 62
    7120:	0f be       	out	0x3f, r0	; 63
    7122:	cd bf       	out	0x3d, r28	; 61
    7124:	9a 83       	std	Y+2, r25	; 0x02
    7126:	89 83       	std	Y+1, r24	; 0x01
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    7128:	83 e1       	ldi	r24, 0x13	; 19
    712a:	91 e0       	ldi	r25, 0x01	; 1
    712c:	9c 83       	std	Y+4, r25	; 0x04
    712e:	8b 83       	std	Y+3, r24	; 0x03
    7130:	89 81       	ldd	r24, Y+1	; 0x01
    7132:	9a 81       	ldd	r25, Y+2	; 0x02
    7134:	9e 83       	std	Y+6, r25	; 0x06
    7136:	8d 83       	std	Y+5, r24	; 0x05
  asm volatile (
    7138:	ab 81       	ldd	r26, Y+3	; 0x03
    713a:	bc 81       	ldd	r27, Y+4	; 0x04
    713c:	8d 81       	ldd	r24, Y+5	; 0x05
    713e:	9e 81       	ldd	r25, Y+6	; 0x06
    7140:	0c 01       	movw	r0, r24
    7142:	0e 94 3c 50 	call	0xa078 <__eeprom_write_word_1C1D1E>
    7146:	bc 83       	std	Y+4, r27	; 0x04
    7148:	ab 83       	std	Y+3, r26	; 0x03
	eeprom_write_word((unsigned short*)(EADR_DEVICE_LIST + 19), timeout);
	g_devList[0].ohrTimeout = timeout;
    714a:	89 81       	ldd	r24, Y+1	; 0x01
    714c:	9a 81       	ldd	r25, Y+2	; 0x02
    714e:	90 93 cb 07 	sts	0x07CB, r25
    7152:	80 93 ca 07 	sts	0x07CA, r24
	g_CurDev.ohrTimeout = timeout;
    7156:	89 81       	ldd	r24, Y+1	; 0x01
    7158:	9a 81       	ldd	r25, Y+2	; 0x02
    715a:	90 93 f8 07 	sts	0x07F8, r25
    715e:	80 93 f7 07 	sts	0x07F7, r24
    7162:	26 96       	adiw	r28, 0x06	; 6
    7164:	0f b6       	in	r0, 0x3f	; 63
    7166:	f8 94       	cli
    7168:	de bf       	out	0x3e, r29	; 62
    716a:	0f be       	out	0x3f, r0	; 63
    716c:	cd bf       	out	0x3d, r28	; 61
    716e:	df 91       	pop	r29
    7170:	cf 91       	pop	r28
    7172:	08 95       	ret

00007174 <delayms>:
#include "lcd.h"
#include "spi.h"

void delayms(unsigned short ms)
{
    7174:	cf 93       	push	r28
    7176:	df 93       	push	r29
    7178:	cd b7       	in	r28, 0x3d	; 61
    717a:	de b7       	in	r29, 0x3e	; 62
    717c:	26 97       	sbiw	r28, 0x06	; 6
    717e:	0f b6       	in	r0, 0x3f	; 63
    7180:	f8 94       	cli
    7182:	de bf       	out	0x3e, r29	; 62
    7184:	0f be       	out	0x3f, r0	; 63
    7186:	cd bf       	out	0x3d, r28	; 61
    7188:	9a 83       	std	Y+2, r25	; 0x02
    718a:	89 83       	std	Y+1, r24	; 0x01
	unsigned short k;
	unsigned short i;

	for (i = 0; i < ms; i++)
    718c:	1e 82       	std	Y+6, r1	; 0x06
    718e:	1d 82       	std	Y+5, r1	; 0x05
    7190:	2d 81       	ldd	r18, Y+5	; 0x05
    7192:	3e 81       	ldd	r19, Y+6	; 0x06
    7194:	89 81       	ldd	r24, Y+1	; 0x01
    7196:	9a 81       	ldd	r25, Y+2	; 0x02
    7198:	28 17       	cp	r18, r24
    719a:	39 07       	cpc	r19, r25
    719c:	a8 f4       	brcc	.+42     	; 0x71c8 <delayms+0x54>
	{
		for (k = 0; k < 798; k++)
    719e:	1c 82       	std	Y+4, r1	; 0x04
    71a0:	1b 82       	std	Y+3, r1	; 0x03
    71a2:	8b 81       	ldd	r24, Y+3	; 0x03
    71a4:	9c 81       	ldd	r25, Y+4	; 0x04
    71a6:	23 e0       	ldi	r18, 0x03	; 3
    71a8:	8e 31       	cpi	r24, 0x1E	; 30
    71aa:	92 07       	cpc	r25, r18
    71ac:	38 f4       	brcc	.+14     	; 0x71bc <delayms+0x48>
		{	
			asm("nop");
    71ae:	00 00       	nop
    71b0:	8b 81       	ldd	r24, Y+3	; 0x03
    71b2:	9c 81       	ldd	r25, Y+4	; 0x04
    71b4:	01 96       	adiw	r24, 0x01	; 1
    71b6:	9c 83       	std	Y+4, r25	; 0x04
    71b8:	8b 83       	std	Y+3, r24	; 0x03
    71ba:	f3 cf       	rjmp	.-26     	; 0x71a2 <delayms+0x2e>
    71bc:	8d 81       	ldd	r24, Y+5	; 0x05
    71be:	9e 81       	ldd	r25, Y+6	; 0x06
    71c0:	01 96       	adiw	r24, 0x01	; 1
    71c2:	9e 83       	std	Y+6, r25	; 0x06
    71c4:	8d 83       	std	Y+5, r24	; 0x05
    71c6:	e4 cf       	rjmp	.-56     	; 0x7190 <delayms+0x1c>
    71c8:	26 96       	adiw	r28, 0x06	; 6
    71ca:	0f b6       	in	r0, 0x3f	; 63
    71cc:	f8 94       	cli
    71ce:	de bf       	out	0x3e, r29	; 62
    71d0:	0f be       	out	0x3f, r0	; 63
    71d2:	cd bf       	out	0x3d, r28	; 61
    71d4:	df 91       	pop	r29
    71d6:	cf 91       	pop	r28
    71d8:	08 95       	ret

000071da <delay_loop_2>:
		}
	}
}

void delay_loop_2(uint16_t __count)
{
    71da:	cf 93       	push	r28
    71dc:	df 93       	push	r29
    71de:	cd b7       	in	r28, 0x3d	; 61
    71e0:	de b7       	in	r29, 0x3e	; 62
    71e2:	22 97       	sbiw	r28, 0x02	; 2
    71e4:	0f b6       	in	r0, 0x3f	; 63
    71e6:	f8 94       	cli
    71e8:	de bf       	out	0x3e, r29	; 62
    71ea:	0f be       	out	0x3f, r0	; 63
    71ec:	cd bf       	out	0x3d, r28	; 61
    71ee:	9a 83       	std	Y+2, r25	; 0x02
    71f0:	89 83       	std	Y+1, r24	; 0x01
	__asm__ volatile (
    71f2:	89 81       	ldd	r24, Y+1	; 0x01
    71f4:	9a 81       	ldd	r25, Y+2	; 0x02
    71f6:	01 97       	sbiw	r24, 0x01	; 1
    71f8:	f1 f7       	brne	.-4      	; 0x71f6 <delay_loop_2+0x1c>
    71fa:	9a 83       	std	Y+2, r25	; 0x02
    71fc:	89 83       	std	Y+1, r24	; 0x01
    71fe:	22 96       	adiw	r28, 0x02	; 2
    7200:	0f b6       	in	r0, 0x3f	; 63
    7202:	f8 94       	cli
    7204:	de bf       	out	0x3e, r29	; 62
    7206:	0f be       	out	0x3f, r0	; 63
    7208:	cd bf       	out	0x3d, r28	; 61
    720a:	df 91       	pop	r29
    720c:	cf 91       	pop	r28
    720e:	08 95       	ret

00007210 <epmrbl>:
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}

void epmrbl(void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t size)

{
    7210:	cf 93       	push	r28
    7212:	df 93       	push	r29
    7214:	cd b7       	in	r28, 0x3d	; 61
    7216:	de b7       	in	r29, 0x3e	; 62
    7218:	2f 97       	sbiw	r28, 0x0f	; 15
    721a:	0f b6       	in	r0, 0x3f	; 63
    721c:	f8 94       	cli
    721e:	de bf       	out	0x3e, r29	; 62
    7220:	0f be       	out	0x3f, r0	; 63
    7222:	cd bf       	out	0x3d, r28	; 61
    7224:	9a 83       	std	Y+2, r25	; 0x02
    7226:	89 83       	std	Y+1, r24	; 0x01
    7228:	7c 83       	std	Y+4, r23	; 0x04
    722a:	6b 83       	std	Y+3, r22	; 0x03
    722c:	5e 83       	std	Y+6, r21	; 0x06
    722e:	4d 83       	std	Y+5, r20	; 0x05
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    7230:	89 81       	ldd	r24, Y+1	; 0x01
    7232:	9a 81       	ldd	r25, Y+2	; 0x02
    7234:	98 87       	std	Y+8, r25	; 0x08
    7236:	8f 83       	std	Y+7, r24	; 0x07
    7238:	8b 81       	ldd	r24, Y+3	; 0x03
    723a:	9c 81       	ldd	r25, Y+4	; 0x04
    723c:	9a 87       	std	Y+10, r25	; 0x0a
    723e:	89 87       	std	Y+9, r24	; 0x09
    7240:	8d 81       	ldd	r24, Y+5	; 0x05
    7242:	9e 81       	ldd	r25, Y+6	; 0x06
    7244:	9c 87       	std	Y+12, r25	; 0x0c
    7246:	8b 87       	std	Y+11, r24	; 0x0b
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 
    7248:	8b 85       	ldd	r24, Y+11	; 0x0b
    724a:	9c 85       	ldd	r25, Y+12	; 0x0c
    724c:	9e 87       	std	Y+14, r25	; 0x0e
    724e:	8d 87       	std	Y+13, r24	; 0x0d

      asm volatile ( 
    7250:	8d 85       	ldd	r24, Y+13	; 0x0d
    7252:	9e 85       	ldd	r25, Y+14	; 0x0e
    7254:	a9 85       	ldd	r26, Y+9	; 0x09
    7256:	ba 85       	ldd	r27, Y+10	; 0x0a
    7258:	ef 81       	ldd	r30, Y+7	; 0x07
    725a:	f8 85       	ldd	r31, Y+8	; 0x08

0000725c <.82_start>:
    725c:	01 97       	sbiw	r24, 0x01	; 1
    725e:	24 f0       	brlt	.+8      	; 0x7268 <.82_finished>
    7260:	0e 94 23 50 	call	0xa046 <__eeprom_read_byte_1C1D1E>
    7264:	01 92       	st	Z+, r0
    7266:	fa cf       	rjmp	.-12     	; 0x725c <.82_start>

00007268 <.82_finished>:
    7268:	9e 87       	std	Y+14, r25	; 0x0e
    726a:	8d 87       	std	Y+13, r24	; 0x0d
    726c:	cd 01       	movw	r24, r26
    726e:	9a 87       	std	Y+10, r25	; 0x0a
    7270:	89 87       	std	Y+9, r24	; 0x09
    7272:	cf 01       	movw	r24, r30
    7274:	98 87       	std	Y+8, r25	; 0x08
    7276:	8f 83       	std	Y+7, r24	; 0x07
    7278:	2f 96       	adiw	r28, 0x0f	; 15
    727a:	0f b6       	in	r0, 0x3f	; 63
    727c:	f8 94       	cli
    727e:	de bf       	out	0x3e, r29	; 62
    7280:	0f be       	out	0x3f, r0	; 63
    7282:	cd bf       	out	0x3d, r28	; 61
    7284:	df 91       	pop	r29
    7286:	cf 91       	pop	r28
    7288:	08 95       	ret

0000728a <epmwbl>:
	eeprom_read_block(pointer_ram, pointer_eeprom, size);
}

void epmwbl(const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t size)
{
    728a:	cf 93       	push	r28
    728c:	df 93       	push	r29
    728e:	cd b7       	in	r28, 0x3d	; 61
    7290:	de b7       	in	r29, 0x3e	; 62
    7292:	2f 97       	sbiw	r28, 0x0f	; 15
    7294:	0f b6       	in	r0, 0x3f	; 63
    7296:	f8 94       	cli
    7298:	de bf       	out	0x3e, r29	; 62
    729a:	0f be       	out	0x3f, r0	; 63
    729c:	cd bf       	out	0x3d, r28	; 61
    729e:	9a 83       	std	Y+2, r25	; 0x02
    72a0:	89 83       	std	Y+1, r24	; 0x01
    72a2:	7c 83       	std	Y+4, r23	; 0x04
    72a4:	6b 83       	std	Y+3, r22	; 0x03
    72a6:	5e 83       	std	Y+6, r21	; 0x06
    72a8:	4d 83       	std	Y+5, r20	; 0x05
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    72aa:	89 81       	ldd	r24, Y+1	; 0x01
    72ac:	9a 81       	ldd	r25, Y+2	; 0x02
    72ae:	98 87       	std	Y+8, r25	; 0x08
    72b0:	8f 83       	std	Y+7, r24	; 0x07
    72b2:	8b 81       	ldd	r24, Y+3	; 0x03
    72b4:	9c 81       	ldd	r25, Y+4	; 0x04
    72b6:	9a 87       	std	Y+10, r25	; 0x0a
    72b8:	89 87       	std	Y+9, r24	; 0x09
    72ba:	8d 81       	ldd	r24, Y+5	; 0x05
    72bc:	9e 81       	ldd	r25, Y+6	; 0x06
    72be:	9c 87       	std	Y+12, r25	; 0x0c
    72c0:	8b 87       	std	Y+11, r24	; 0x0b
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 
    72c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    72c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    72c6:	9e 87       	std	Y+14, r25	; 0x0e
    72c8:	8d 87       	std	Y+13, r24	; 0x0d

      asm volatile ( 
    72ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    72cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    72ce:	a9 85       	ldd	r26, Y+9	; 0x09
    72d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    72d2:	ef 81       	ldd	r30, Y+7	; 0x07
    72d4:	f8 85       	ldd	r31, Y+8	; 0x08

000072d6 <.123_start>:
    72d6:	01 97       	sbiw	r24, 0x01	; 1
    72d8:	24 f0       	brlt	.+8      	; 0x72e2 <.123_finished>
    72da:	01 90       	ld	r0, Z+
    72dc:	0e 94 30 50 	call	0xa060 <__eeprom_write_byte_1C1D1E>
    72e0:	fa cf       	rjmp	.-12     	; 0x72d6 <.123_start>

000072e2 <.123_finished>:
    72e2:	9e 87       	std	Y+14, r25	; 0x0e
    72e4:	8d 87       	std	Y+13, r24	; 0x0d
    72e6:	cd 01       	movw	r24, r26
    72e8:	9a 87       	std	Y+10, r25	; 0x0a
    72ea:	89 87       	std	Y+9, r24	; 0x09
    72ec:	cf 01       	movw	r24, r30
    72ee:	98 87       	std	Y+8, r25	; 0x08
    72f0:	8f 83       	std	Y+7, r24	; 0x07
    72f2:	2f 96       	adiw	r28, 0x0f	; 15
    72f4:	0f b6       	in	r0, 0x3f	; 63
    72f6:	f8 94       	cli
    72f8:	de bf       	out	0x3e, r29	; 62
    72fa:	0f be       	out	0x3f, r0	; 63
    72fc:	cd bf       	out	0x3d, r28	; 61
    72fe:	df 91       	pop	r29
    7300:	cf 91       	pop	r28
    7302:	08 95       	ret

00007304 <epmrw>:
	eeprom_write_block(pointer_ram, pointer_eeprom, size);
}

unsigned short epmrw(const uint16_t * adr)
{
    7304:	cf 93       	push	r28
    7306:	df 93       	push	r29
    7308:	cd b7       	in	r28, 0x3d	; 61
    730a:	de b7       	in	r29, 0x3e	; 62
    730c:	28 97       	sbiw	r28, 0x08	; 8
    730e:	0f b6       	in	r0, 0x3f	; 63
    7310:	f8 94       	cli
    7312:	de bf       	out	0x3e, r29	; 62
    7314:	0f be       	out	0x3f, r0	; 63
    7316:	cd bf       	out	0x3d, r28	; 61
    7318:	9a 83       	std	Y+2, r25	; 0x02
    731a:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    731c:	89 81       	ldd	r24, Y+1	; 0x01
    731e:	9a 81       	ldd	r25, Y+2	; 0x02
    7320:	9c 83       	std	Y+4, r25	; 0x04
    7322:	8b 83       	std	Y+3, r24	; 0x03
  uint16_t result;

  asm ( 
    7324:	ab 81       	ldd	r26, Y+3	; 0x03
    7326:	bc 81       	ldd	r27, Y+4	; 0x04
    7328:	0e 94 2b 50 	call	0xa056 <__eeprom_read_word_1C1D1E>
    732c:	bc 83       	std	Y+4, r27	; 0x04
    732e:	ab 83       	std	Y+3, r26	; 0x03
    7330:	cf 01       	movw	r24, r30
    7332:	98 87       	std	Y+8, r25	; 0x08
    7334:	8f 83       	std	Y+7, r24	; 0x07
    7336:	8f 81       	ldd	r24, Y+7	; 0x07
    7338:	98 85       	ldd	r25, Y+8	; 0x08
    733a:	9e 83       	std	Y+6, r25	; 0x06
    733c:	8d 83       	std	Y+5, r24	; 0x05
    733e:	8d 81       	ldd	r24, Y+5	; 0x05
    7340:	9e 81       	ldd	r25, Y+6	; 0x06
    7342:	28 96       	adiw	r28, 0x08	; 8
    7344:	0f b6       	in	r0, 0x3f	; 63
    7346:	f8 94       	cli
    7348:	de bf       	out	0x3e, r29	; 62
    734a:	0f be       	out	0x3f, r0	; 63
    734c:	cd bf       	out	0x3d, r28	; 61
    734e:	df 91       	pop	r29
    7350:	cf 91       	pop	r28
    7352:	08 95       	ret

00007354 <eeprom_read_byte_1>:
	return eeprom_read_word(adr);
}

uint8_t eeprom_read_byte_1 (unsigned char* addr) 
{
    7354:	cf 93       	push	r28
    7356:	df 93       	push	r29
    7358:	cd b7       	in	r28, 0x3d	; 61
    735a:	de b7       	in	r29, 0x3e	; 62
    735c:	23 97       	sbiw	r28, 0x03	; 3
    735e:	0f b6       	in	r0, 0x3f	; 63
    7360:	f8 94       	cli
    7362:	de bf       	out	0x3e, r29	; 62
    7364:	0f be       	out	0x3f, r0	; 63
    7366:	cd bf       	out	0x3d, r28	; 61
    7368:	9a 83       	std	Y+2, r25	; 0x02
    736a:	89 83       	std	Y+1, r24	; 0x01
  uint8_t result;
  asm volatile
    736c:	a9 81       	ldd	r26, Y+1	; 0x01
    736e:	ba 81       	ldd	r27, Y+2	; 0x02
    7370:	0e 94 23 50 	call	0xa046 <__eeprom_read_byte_1C1D1E>
    7374:	80 2d       	mov	r24, r0
    7376:	ba 83       	std	Y+2, r27	; 0x02
    7378:	a9 83       	std	Y+1, r26	; 0x01
    737a:	8b 83       	std	Y+3, r24	; 0x03
      ( XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
        "mov %1,__tmp_reg__"
       : "+x" (addr),
         "=r" (result)
       : );
  return result;
    737c:	8b 81       	ldd	r24, Y+3	; 0x03
    737e:	99 27       	eor	r25, r25
    7380:	23 96       	adiw	r28, 0x03	; 3
    7382:	0f b6       	in	r0, 0x3f	; 63
    7384:	f8 94       	cli
    7386:	de bf       	out	0x3e, r29	; 62
    7388:	0f be       	out	0x3f, r0	; 63
    738a:	cd bf       	out	0x3d, r28	; 61
    738c:	df 91       	pop	r29
    738e:	cf 91       	pop	r28
    7390:	08 95       	ret

00007392 <eeprom_write_byte_1>:
}

void eeprom_write_byte_1 (unsigned char *addr, unsigned char value)
{
    7392:	cf 93       	push	r28
    7394:	df 93       	push	r29
    7396:	cd b7       	in	r28, 0x3d	; 61
    7398:	de b7       	in	r29, 0x3e	; 62
    739a:	23 97       	sbiw	r28, 0x03	; 3
    739c:	0f b6       	in	r0, 0x3f	; 63
    739e:	f8 94       	cli
    73a0:	de bf       	out	0x3e, r29	; 62
    73a2:	0f be       	out	0x3f, r0	; 63
    73a4:	cd bf       	out	0x3d, r28	; 61
    73a6:	9a 83       	std	Y+2, r25	; 0x02
    73a8:	89 83       	std	Y+1, r24	; 0x01
    73aa:	6b 83       	std	Y+3, r22	; 0x03
  asm volatile (
    73ac:	a9 81       	ldd	r26, Y+1	; 0x01
    73ae:	ba 81       	ldd	r27, Y+2	; 0x02
    73b0:	8b 81       	ldd	r24, Y+3	; 0x03
    73b2:	08 2e       	mov	r0, r24
    73b4:	0e 94 30 50 	call	0xa060 <__eeprom_write_byte_1C1D1E>
    73b8:	ba 83       	std	Y+2, r27	; 0x02
    73ba:	a9 83       	std	Y+1, r26	; 0x01
    73bc:	23 96       	adiw	r28, 0x03	; 3
    73be:	0f b6       	in	r0, 0x3f	; 63
    73c0:	f8 94       	cli
    73c2:	de bf       	out	0x3e, r29	; 62
    73c4:	0f be       	out	0x3f, r0	; 63
    73c6:	cd bf       	out	0x3d, r28	; 61
    73c8:	df 91       	pop	r29
    73ca:	cf 91       	pop	r28
    73cc:	08 95       	ret

000073ce <Error>:
         "mov __tmp_reg__,%1"      CR_TAB
         XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX
       : "+x" (addr)
       : "r"  (value)
       : "memory"
      );
}

void Error(unsigned char errcode)
{
    73ce:	cf 93       	push	r28
    73d0:	df 93       	push	r29
    73d2:	cd b7       	in	r28, 0x3d	; 61
    73d4:	de b7       	in	r29, 0x3e	; 62
    73d6:	2b 97       	sbiw	r28, 0x0b	; 11
    73d8:	0f b6       	in	r0, 0x3f	; 63
    73da:	f8 94       	cli
    73dc:	de bf       	out	0x3e, r29	; 62
    73de:	0f be       	out	0x3f, r0	; 63
    73e0:	cd bf       	out	0x3d, r28	; 61
    73e2:	89 83       	std	Y+1, r24	; 0x01
	char ee[10] = {0};
    73e4:	8a e0       	ldi	r24, 0x0A	; 10
    73e6:	fe 01       	movw	r30, r28
    73e8:	32 96       	adiw	r30, 0x02	; 2
    73ea:	11 92       	st	Z+, r1
    73ec:	8a 95       	dec	r24
    73ee:	e9 f7       	brne	.-6      	; 0x73ea <Error+0x1c>
	cli();
    73f0:	f8 94       	cli
	ClearScreen();
    73f2:	0e 94 79 29 	call	0x52f2 <ClearScreen>
	OutStr("Error ");
    73f6:	8c e7       	ldi	r24, 0x7C	; 124
    73f8:	95 e0       	ldi	r25, 0x05	; 5
    73fa:	0e 94 24 29 	call	0x5248 <OutStr>
	OutStr(itoa(errcode, ee, 10));
    73fe:	9e 01       	movw	r18, r28
    7400:	2e 5f       	subi	r18, 0xFE	; 254
    7402:	3f 4f       	sbci	r19, 0xFF	; 255
    7404:	89 81       	ldd	r24, Y+1	; 0x01
    7406:	99 27       	eor	r25, r25
    7408:	4a e0       	ldi	r20, 0x0A	; 10
    740a:	50 e0       	ldi	r21, 0x00	; 0
    740c:	b9 01       	movw	r22, r18
    740e:	0e 94 6a 4f 	call	0x9ed4 <itoa>
    7412:	0e 94 24 29 	call	0x5248 <OutStr>
    7416:	2b 96       	adiw	r28, 0x0b	; 11
    7418:	0f b6       	in	r0, 0x3f	; 63
    741a:	f8 94       	cli
    741c:	de bf       	out	0x3e, r29	; 62
    741e:	0f be       	out	0x3f, r0	; 63
    7420:	cd bf       	out	0x3d, r28	; 61
    7422:	df 91       	pop	r29
    7424:	cf 91       	pop	r28
    7426:	08 95       	ret

00007428 <SetSpeakerVolume>:
}

void SetSpeakerVolume(unsigned char value)
{
    7428:	cf 93       	push	r28
    742a:	df 93       	push	r29
    742c:	cd b7       	in	r28, 0x3d	; 61
    742e:	de b7       	in	r29, 0x3e	; 62
    7430:	21 97       	sbiw	r28, 0x01	; 1
    7432:	0f b6       	in	r0, 0x3f	; 63
    7434:	f8 94       	cli
    7436:	de bf       	out	0x3e, r29	; 62
    7438:	0f be       	out	0x3f, r0	; 63
    743a:	cd bf       	out	0x3d, r28	; 61
    743c:	89 83       	std	Y+1, r24	; 0x01
	PORTB &= ~(1 << CSR);
    743e:	80 91 38 00 	lds	r24, 0x0038
    7442:	8f 7d       	andi	r24, 0xDF	; 223
    7444:	80 93 38 00 	sts	0x0038, r24
	spiTransferByte(0x11);
    7448:	81 e1       	ldi	r24, 0x11	; 17
    744a:	0e 94 ec 2d 	call	0x5bd8 <spiTransferByte>
	spiTransferByte(value);
    744e:	89 81       	ldd	r24, Y+1	; 0x01
    7450:	0e 94 ec 2d 	call	0x5bd8 <spiTransferByte>
	//spiTransferByte(0x21);
//	spiTransferByte(0x01);
	PORTB |= (1 << CSR);
    7454:	80 91 38 00 	lds	r24, 0x0038
    7458:	80 62       	ori	r24, 0x20	; 32
    745a:	80 93 38 00 	sts	0x0038, r24
    745e:	21 96       	adiw	r28, 0x01	; 1
    7460:	0f b6       	in	r0, 0x3f	; 63
    7462:	f8 94       	cli
    7464:	de bf       	out	0x3e, r29	; 62
    7466:	0f be       	out	0x3f, r0	; 63
    7468:	cd bf       	out	0x3d, r28	; 61
    746a:	df 91       	pop	r29
    746c:	cf 91       	pop	r28
    746e:	08 95       	ret

00007470 <HexByte>:
}

unsigned short hitrmas[3] = {1, 16, 256};

unsigned char HexByte(unsigned char byte)
{
    7470:	cf 93       	push	r28
    7472:	df 93       	push	r29
    7474:	cd b7       	in	r28, 0x3d	; 61
    7476:	de b7       	in	r29, 0x3e	; 62
    7478:	23 97       	sbiw	r28, 0x03	; 3
    747a:	0f b6       	in	r0, 0x3f	; 63
    747c:	f8 94       	cli
    747e:	de bf       	out	0x3e, r29	; 62
    7480:	0f be       	out	0x3f, r0	; 63
    7482:	cd bf       	out	0x3d, r28	; 61
    7484:	89 83       	std	Y+1, r24	; 0x01
	if ((byte >= 0x30) && (byte <= 0x39))
    7486:	89 81       	ldd	r24, Y+1	; 0x01
    7488:	80 33       	cpi	r24, 0x30	; 48
    748a:	48 f0       	brcs	.+18     	; 0x749e <HexByte+0x2e>
    748c:	89 81       	ldd	r24, Y+1	; 0x01
    748e:	8a 33       	cpi	r24, 0x3A	; 58
    7490:	30 f4       	brcc	.+12     	; 0x749e <HexByte+0x2e>
		return byte - 0x30;
    7492:	89 81       	ldd	r24, Y+1	; 0x01
    7494:	80 53       	subi	r24, 0x30	; 48
    7496:	99 27       	eor	r25, r25
    7498:	9b 83       	std	Y+3, r25	; 0x03
    749a:	8a 83       	std	Y+2, r24	; 0x02
    749c:	10 c0       	rjmp	.+32     	; 0x74be <HexByte+0x4e>
	else
	if ((byte >= 'A') && (byte <= 'F'))
    749e:	89 81       	ldd	r24, Y+1	; 0x01
    74a0:	81 34       	cpi	r24, 0x41	; 65
    74a2:	48 f0       	brcs	.+18     	; 0x74b6 <HexByte+0x46>
    74a4:	89 81       	ldd	r24, Y+1	; 0x01
    74a6:	87 34       	cpi	r24, 0x47	; 71
    74a8:	30 f4       	brcc	.+12     	; 0x74b6 <HexByte+0x46>
		return byte - 'A' + 10;
    74aa:	89 81       	ldd	r24, Y+1	; 0x01
    74ac:	87 53       	subi	r24, 0x37	; 55
    74ae:	99 27       	eor	r25, r25
    74b0:	9b 83       	std	Y+3, r25	; 0x03
    74b2:	8a 83       	std	Y+2, r24	; 0x02
    74b4:	04 c0       	rjmp	.+8      	; 0x74be <HexByte+0x4e>
	
	return byte;
    74b6:	89 81       	ldd	r24, Y+1	; 0x01
    74b8:	99 27       	eor	r25, r25
    74ba:	9b 83       	std	Y+3, r25	; 0x03
    74bc:	8a 83       	std	Y+2, r24	; 0x02
}
    74be:	8a 81       	ldd	r24, Y+2	; 0x02
    74c0:	9b 81       	ldd	r25, Y+3	; 0x03
    74c2:	23 96       	adiw	r28, 0x03	; 3
    74c4:	0f b6       	in	r0, 0x3f	; 63
    74c6:	f8 94       	cli
    74c8:	de bf       	out	0x3e, r29	; 62
    74ca:	0f be       	out	0x3f, r0	; 63
    74cc:	cd bf       	out	0x3d, r28	; 61
    74ce:	df 91       	pop	r29
    74d0:	cf 91       	pop	r28
    74d2:	08 95       	ret

000074d4 <HexToInt>:

unsigned short HexToInt(char* sz)
{
    74d4:	cf 93       	push	r28
    74d6:	df 93       	push	r29
    74d8:	cd b7       	in	r28, 0x3d	; 61
    74da:	de b7       	in	r29, 0x3e	; 62
    74dc:	26 97       	sbiw	r28, 0x06	; 6
    74de:	0f b6       	in	r0, 0x3f	; 63
    74e0:	f8 94       	cli
    74e2:	de bf       	out	0x3e, r29	; 62
    74e4:	0f be       	out	0x3f, r0	; 63
    74e6:	cd bf       	out	0x3d, r28	; 61
    74e8:	9a 83       	std	Y+2, r25	; 0x02
    74ea:	89 83       	std	Y+1, r24	; 0x01
	unsigned char k, len;
	unsigned short res = 0;
    74ec:	1e 82       	std	Y+6, r1	; 0x06
    74ee:	1d 82       	std	Y+5, r1	; 0x05

	k = len = strlen(sz);
    74f0:	89 81       	ldd	r24, Y+1	; 0x01
    74f2:	9a 81       	ldd	r25, Y+2	; 0x02
    74f4:	0e 94 37 4f 	call	0x9e6e <strlen>
    74f8:	8c 83       	std	Y+4, r24	; 0x04
    74fa:	8c 81       	ldd	r24, Y+4	; 0x04
    74fc:	8b 83       	std	Y+3, r24	; 0x03
	//k = len;
	
	do
	{
		k--;
    74fe:	8b 81       	ldd	r24, Y+3	; 0x03
    7500:	81 50       	subi	r24, 0x01	; 1
    7502:	8b 83       	std	Y+3, r24	; 0x03
		res = res + HexByte(sz[k]) * hitrmas[len - k - 1];
    7504:	8b 81       	ldd	r24, Y+3	; 0x03
    7506:	28 2f       	mov	r18, r24
    7508:	33 27       	eor	r19, r19
    750a:	89 81       	ldd	r24, Y+1	; 0x01
    750c:	9a 81       	ldd	r25, Y+2	; 0x02
    750e:	f9 01       	movw	r30, r18
    7510:	e8 0f       	add	r30, r24
    7512:	f9 1f       	adc	r31, r25
    7514:	80 81       	ld	r24, Z
    7516:	0e 94 38 3a 	call	0x7470 <HexByte>
    751a:	48 2f       	mov	r20, r24
    751c:	55 27       	eor	r21, r21
    751e:	8c 81       	ldd	r24, Y+4	; 0x04
    7520:	28 2f       	mov	r18, r24
    7522:	33 27       	eor	r19, r19
    7524:	8b 81       	ldd	r24, Y+3	; 0x03
    7526:	99 27       	eor	r25, r25
    7528:	28 1b       	sub	r18, r24
    752a:	39 0b       	sbc	r19, r25
    752c:	c9 01       	movw	r24, r18
    752e:	82 0f       	add	r24, r18
    7530:	93 1f       	adc	r25, r19
    7532:	fc 01       	movw	r30, r24
    7534:	ef 57       	subi	r30, 0x7F	; 127
    7536:	fa 4f       	sbci	r31, 0xFA	; 250
    7538:	80 81       	ld	r24, Z
    753a:	91 81       	ldd	r25, Z+1	; 0x01
    753c:	48 9f       	mul	r20, r24
    753e:	90 01       	movw	r18, r0
    7540:	49 9f       	mul	r20, r25
    7542:	30 0d       	add	r19, r0
    7544:	58 9f       	mul	r21, r24
    7546:	30 0d       	add	r19, r0
    7548:	11 24       	eor	r1, r1
    754a:	8d 81       	ldd	r24, Y+5	; 0x05
    754c:	9e 81       	ldd	r25, Y+6	; 0x06
    754e:	82 0f       	add	r24, r18
    7550:	93 1f       	adc	r25, r19
    7552:	9e 83       	std	Y+6, r25	; 0x06
    7554:	8d 83       	std	Y+5, r24	; 0x05
	}while (k);
    7556:	8b 81       	ldd	r24, Y+3	; 0x03
    7558:	88 23       	and	r24, r24
    755a:	09 f0       	breq	.+2      	; 0x755e <HexToInt+0x8a>
    755c:	d0 cf       	rjmp	.-96     	; 0x74fe <HexToInt+0x2a>

	return res;
    755e:	8d 81       	ldd	r24, Y+5	; 0x05
    7560:	9e 81       	ldd	r25, Y+6	; 0x06
    7562:	26 96       	adiw	r28, 0x06	; 6
    7564:	0f b6       	in	r0, 0x3f	; 63
    7566:	f8 94       	cli
    7568:	de bf       	out	0x3e, r29	; 62
    756a:	0f be       	out	0x3f, r0	; 63
    756c:	cd bf       	out	0x3d, r28	; 61
    756e:	df 91       	pop	r29
    7570:	cf 91       	pop	r28
    7572:	08 95       	ret

00007574 <GSM_Init>:
#include "GSM.h"


void GSM_Init(void)
{	// инициализация USART1
    7574:	cf 93       	push	r28
    7576:	df 93       	push	r29
    7578:	cd b7       	in	r28, 0x3d	; 61
    757a:	de b7       	in	r29, 0x3e	; 62

	UCSR1B = 0;
    757c:	10 92 9a 00 	sts	0x009A, r1

	UCSR1A = _BV(U2X);
    7580:	82 e0       	ldi	r24, 0x02	; 2
    7582:	80 93 9b 00 	sts	0x009B, r24
//	UBRR1L = baudrates[br];		

  	UCSR1B = _BV(TXEN) | _BV(RXEN) /*| _BV(TXCIE) */| _BV(RXCIE); /* tx/rx enable */
    7586:	88 e9       	ldi	r24, 0x98	; 152
    7588:	80 93 9a 00 	sts	0x009A, r24
    758c:	df 91       	pop	r29
    758e:	cf 91       	pop	r28
    7590:	08 95       	ret

00007592 <GSM_TurnOn>:
}	

void GSM_TurnOn(void)
{
    7592:	cf 93       	push	r28
    7594:	df 93       	push	r29
    7596:	cd b7       	in	r28, 0x3d	; 61
    7598:	de b7       	in	r29, 0x3e	; 62
    759a:	df 91       	pop	r29
    759c:	cf 91       	pop	r28
    759e:	08 95       	ret

000075a0 <GSM_TurnOff>:
}

void GSM_TurnOff(void)
{
    75a0:	cf 93       	push	r28
    75a2:	df 93       	push	r29
    75a4:	cd b7       	in	r28, 0x3d	; 61
    75a6:	de b7       	in	r29, 0x3e	; 62
    75a8:	df 91       	pop	r29
    75aa:	cf 91       	pop	r28
    75ac:	08 95       	ret

000075ae <GSM_SendATCommand>:
}

void GSM_SendATCommand(unsigned char cmd)
{
    75ae:	cf 93       	push	r28
    75b0:	df 93       	push	r29
    75b2:	cd b7       	in	r28, 0x3d	; 61
    75b4:	de b7       	in	r29, 0x3e	; 62
    75b6:	21 97       	sbiw	r28, 0x01	; 1
    75b8:	0f b6       	in	r0, 0x3f	; 63
    75ba:	f8 94       	cli
    75bc:	de bf       	out	0x3e, r29	; 62
    75be:	0f be       	out	0x3f, r0	; 63
    75c0:	cd bf       	out	0x3d, r28	; 61
    75c2:	89 83       	std	Y+1, r24	; 0x01
    75c4:	21 96       	adiw	r28, 0x01	; 1
    75c6:	0f b6       	in	r0, 0x3f	; 63
    75c8:	f8 94       	cli
    75ca:	de bf       	out	0x3e, r29	; 62
    75cc:	0f be       	out	0x3f, r0	; 63
    75ce:	cd bf       	out	0x3d, r28	; 61
    75d0:	df 91       	pop	r29
    75d2:	cf 91       	pop	r28
    75d4:	08 95       	ret

000075d6 <AT45Init>:
										B2_TO_MM_PAGE_PROG_WITH_ERASE};
unsigned char page_select_to_buf[2] = {MM_PAGE_TO_B1_XFER, MM_PAGE_TO_B2_XFER};

void AT45Init(void)
{
    75d6:	cf 93       	push	r28
    75d8:	df 93       	push	r29
    75da:	cd b7       	in	r28, 0x3d	; 61
    75dc:	de b7       	in	r29, 0x3e	; 62
	wBufPos[0] = 0;
    75de:	10 92 6a 06 	sts	0x066A, r1
    75e2:	10 92 69 06 	sts	0x0669, r1
	rBufPos[0] = 0;
    75e6:	10 92 6e 06 	sts	0x066E, r1
    75ea:	10 92 6d 06 	sts	0x066D, r1
    75ee:	df 91       	pop	r29
    75f0:	cf 91       	pop	r28
    75f2:	08 95       	ret

000075f4 <AT45SetReadBufferPos>:
}

//  устанавливает позицию чтения буфера на слово номер pos
void AT45SetReadBufferPos(unsigned char bufno, unsigned short pos)
{
    75f4:	cf 93       	push	r28
    75f6:	df 93       	push	r29
    75f8:	cd b7       	in	r28, 0x3d	; 61
    75fa:	de b7       	in	r29, 0x3e	; 62
    75fc:	23 97       	sbiw	r28, 0x03	; 3
    75fe:	0f b6       	in	r0, 0x3f	; 63
    7600:	f8 94       	cli
    7602:	de bf       	out	0x3e, r29	; 62
    7604:	0f be       	out	0x3f, r0	; 63
    7606:	cd bf       	out	0x3d, r28	; 61
    7608:	89 83       	std	Y+1, r24	; 0x01
    760a:	7b 83       	std	Y+3, r23	; 0x03
    760c:	6a 83       	std	Y+2, r22	; 0x02
	rBufPos[bufno] = pos;
    760e:	89 81       	ldd	r24, Y+1	; 0x01
    7610:	28 2f       	mov	r18, r24
    7612:	33 27       	eor	r19, r19
    7614:	c9 01       	movw	r24, r18
    7616:	82 0f       	add	r24, r18
    7618:	93 1f       	adc	r25, r19
    761a:	fc 01       	movw	r30, r24
    761c:	e3 59       	subi	r30, 0x93	; 147
    761e:	f9 4f       	sbci	r31, 0xF9	; 249
    7620:	8a 81       	ldd	r24, Y+2	; 0x02
    7622:	9b 81       	ldd	r25, Y+3	; 0x03
    7624:	91 83       	std	Z+1, r25	; 0x01
    7626:	80 83       	st	Z, r24
    7628:	23 96       	adiw	r28, 0x03	; 3
    762a:	0f b6       	in	r0, 0x3f	; 63
    762c:	f8 94       	cli
    762e:	de bf       	out	0x3e, r29	; 62
    7630:	0f be       	out	0x3f, r0	; 63
    7632:	cd bf       	out	0x3d, r28	; 61
    7634:	df 91       	pop	r29
    7636:	cf 91       	pop	r28
    7638:	08 95       	ret

0000763a <AT45SetWriteBufferPos>:
}

void AT45SetWriteBufferPos(unsigned char bufno, unsigned short pos)
{
    763a:	cf 93       	push	r28
    763c:	df 93       	push	r29
    763e:	cd b7       	in	r28, 0x3d	; 61
    7640:	de b7       	in	r29, 0x3e	; 62
    7642:	23 97       	sbiw	r28, 0x03	; 3
    7644:	0f b6       	in	r0, 0x3f	; 63
    7646:	f8 94       	cli
    7648:	de bf       	out	0x3e, r29	; 62
    764a:	0f be       	out	0x3f, r0	; 63
    764c:	cd bf       	out	0x3d, r28	; 61
    764e:	89 83       	std	Y+1, r24	; 0x01
    7650:	7b 83       	std	Y+3, r23	; 0x03
    7652:	6a 83       	std	Y+2, r22	; 0x02
	wBufPos[bufno] = pos;
    7654:	89 81       	ldd	r24, Y+1	; 0x01
    7656:	28 2f       	mov	r18, r24
    7658:	33 27       	eor	r19, r19
    765a:	c9 01       	movw	r24, r18
    765c:	82 0f       	add	r24, r18
    765e:	93 1f       	adc	r25, r19
    7660:	fc 01       	movw	r30, r24
    7662:	e7 59       	subi	r30, 0x97	; 151
    7664:	f9 4f       	sbci	r31, 0xF9	; 249
    7666:	8a 81       	ldd	r24, Y+2	; 0x02
    7668:	9b 81       	ldd	r25, Y+3	; 0x03
    766a:	91 83       	std	Z+1, r25	; 0x01
    766c:	80 83       	st	Z, r24
    766e:	23 96       	adiw	r28, 0x03	; 3
    7670:	0f b6       	in	r0, 0x3f	; 63
    7672:	f8 94       	cli
    7674:	de bf       	out	0x3e, r29	; 62
    7676:	0f be       	out	0x3f, r0	; 63
    7678:	cd bf       	out	0x3d, r28	; 61
    767a:	df 91       	pop	r29
    767c:	cf 91       	pop	r28
    767e:	08 95       	ret

00007680 <AT45erase>:
}

void AT45erase(void)
{
    7680:	cf 93       	push	r28
    7682:	df 93       	push	r29
    7684:	cd b7       	in	r28, 0x3d	; 61
    7686:	de b7       	in	r29, 0x3e	; 62
    7688:	22 97       	sbiw	r28, 0x02	; 2
    768a:	0f b6       	in	r0, 0x3f	; 63
    768c:	f8 94       	cli
    768e:	de bf       	out	0x3e, r29	; 62
    7690:	0f be       	out	0x3f, r0	; 63
    7692:	cd bf       	out	0x3d, r28	; 61
    unsigned int block_counter = 0;
    7694:	1a 82       	std	Y+2, r1	; 0x02
    7696:	19 82       	std	Y+1, r1	; 0x01

    ACSR |= CLEARED;                           // set signal flag that new data has to be recorded next
    7698:	80 91 28 00 	lds	r24, 0x0028
    769c:	82 60       	ori	r24, 0x02	; 2
    769e:	80 93 28 00 	sts	0x0028, r24

    // interrupt disabled, SPI port enabled, master mode, MSB first,  SPI mode 3, Fcl/4
   // SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(CPHA);//0x5C;

    while (block_counter < 512)
    76a2:	89 81       	ldd	r24, Y+1	; 0x01
    76a4:	9a 81       	ldd	r25, Y+2	; 0x02
    76a6:	22 e0       	ldi	r18, 0x02	; 2
    76a8:	80 30       	cpi	r24, 0x00	; 0
    76aa:	92 07       	cpc	r25, r18
    76ac:	c0 f5       	brcc	.+112    	; 0x771e <AT45erase+0x9e>
    {
		UNSELECT_AT45;
    76ae:	80 91 38 00 	lds	r24, 0x0038
    76b2:	80 61       	ori	r24, 0x10	; 16
    76b4:	80 93 38 00 	sts	0x0038, r24
        SELECT_AT45;
    76b8:	80 91 38 00 	lds	r24, 0x0038
    76bc:	8f 7e       	andi	r24, 0xEF	; 239
    76be:	80 93 38 00 	sts	0x0038, r24

        spiWriteByte(BLOCK_ERASE);
    76c2:	80 e5       	ldi	r24, 0x50	; 80
    76c4:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
        spiWriteByte((char)(block_counter >> 3));
    76c8:	89 81       	ldd	r24, Y+1	; 0x01
    76ca:	9a 81       	ldd	r25, Y+2	; 0x02
    76cc:	96 95       	lsr	r25
    76ce:	87 95       	ror	r24
    76d0:	96 95       	lsr	r25
    76d2:	87 95       	ror	r24
    76d4:	96 95       	lsr	r25
    76d6:	87 95       	ror	r24
    76d8:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
        spiWriteByte((char)(block_counter << 5));
    76dc:	89 81       	ldd	r24, Y+1	; 0x01
    76de:	9a 81       	ldd	r25, Y+2	; 0x02
    76e0:	88 0f       	add	r24, r24
    76e2:	99 1f       	adc	r25, r25
    76e4:	82 95       	swap	r24
    76e6:	92 95       	swap	r25
    76e8:	90 7f       	andi	r25, 0xF0	; 240
    76ea:	98 27       	eor	r25, r24
    76ec:	80 7f       	andi	r24, 0xF0	; 240
    76ee:	98 27       	eor	r25, r24
    76f0:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
        spiWriteByte(0x00);
    76f4:	80 e0       	ldi	r24, 0x00	; 0
    76f6:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

        UNSELECT_AT45;
    76fa:	80 91 38 00 	lds	r24, 0x0038
    76fe:	80 61       	ori	r24, 0x10	; 16
    7700:	80 93 38 00 	sts	0x0038, r24

        block_counter++;
    7704:	89 81       	ldd	r24, Y+1	; 0x01
    7706:	9a 81       	ldd	r25, Y+2	; 0x02
    7708:	01 96       	adiw	r24, 0x01	; 1
    770a:	9a 83       	std	Y+2, r25	; 0x02
    770c:	89 83       	std	Y+1, r24	; 0x01
        while(!(AT45_PORT_IN & _BV(BUSY_PIN)));    // wait until block is erased
    770e:	80 91 21 00 	lds	r24, 0x0021
    7712:	99 27       	eor	r25, r25
    7714:	84 70       	andi	r24, 0x04	; 4
    7716:	90 70       	andi	r25, 0x00	; 0
    7718:	00 97       	sbiw	r24, 0x00	; 0
    771a:	19 f6       	brne	.-122    	; 0x76a2 <AT45erase+0x22>
    771c:	f8 cf       	rjmp	.-16     	; 0x770e <AT45erase+0x8e>
    771e:	22 96       	adiw	r28, 0x02	; 2
    7720:	0f b6       	in	r0, 0x3f	; 63
    7722:	f8 94       	cli
    7724:	de bf       	out	0x3e, r29	; 62
    7726:	0f be       	out	0x3f, r0	; 63
    7728:	cd bf       	out	0x3d, r28	; 61
    772a:	df 91       	pop	r29
    772c:	cf 91       	pop	r28
    772e:	08 95       	ret

00007730 <AT45ReadStatus>:
    }

    //SPCR = 0x00;
}

char AT45ReadStatus(void)
{
    7730:	cf 93       	push	r28
    7732:	df 93       	push	r29
    7734:	cd b7       	in	r28, 0x3d	; 61
    7736:	de b7       	in	r29, 0x3e	; 62
    7738:	21 97       	sbiw	r28, 0x01	; 1
    773a:	0f b6       	in	r0, 0x3f	; 63
    773c:	f8 94       	cli
    773e:	de bf       	out	0x3e, r29	; 62
    7740:	0f be       	out	0x3f, r0	; 63
    7742:	cd bf       	out	0x3d, r28	; 61
	char res;

	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7744:	80 91 21 00 	lds	r24, 0x0021
    7748:	99 27       	eor	r25, r25
    774a:	84 70       	andi	r24, 0x04	; 4
    774c:	90 70       	andi	r25, 0x00	; 0
    774e:	00 97       	sbiw	r24, 0x00	; 0
    7750:	09 f4       	brne	.+2      	; 0x7754 <AT45ReadStatus+0x24>
    7752:	f8 cf       	rjmp	.-16     	; 0x7744 <AT45ReadStatus+0x14>

	UNSELECT_AT45;
    7754:	80 91 38 00 	lds	r24, 0x0038
    7758:	80 61       	ori	r24, 0x10	; 16
    775a:	80 93 38 00 	sts	0x0038, r24
	SELECT_AT45;
    775e:	80 91 38 00 	lds	r24, 0x0038
    7762:	8f 7e       	andi	r24, 0xEF	; 239
    7764:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(0xD7);
    7768:	87 ed       	ldi	r24, 0xD7	; 215
    776a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	res = spiReadByte();
    776e:	0e 94 5b 2e 	call	0x5cb6 <spiReadByte>
    7772:	89 83       	std	Y+1, r24	; 0x01

	UNSELECT_AT45;
    7774:	80 91 38 00 	lds	r24, 0x0038
    7778:	80 61       	ori	r24, 0x10	; 16
    777a:	80 93 38 00 	sts	0x0038, r24
	return res;
    777e:	89 81       	ldd	r24, Y+1	; 0x01
    7780:	99 27       	eor	r25, r25
    7782:	87 fd       	sbrc	r24, 7
    7784:	90 95       	com	r25
    7786:	21 96       	adiw	r28, 0x01	; 1
    7788:	0f b6       	in	r0, 0x3f	; 63
    778a:	f8 94       	cli
    778c:	de bf       	out	0x3e, r29	; 62
    778e:	0f be       	out	0x3f, r0	; 63
    7790:	cd bf       	out	0x3d, r28	; 61
    7792:	df 91       	pop	r29
    7794:	cf 91       	pop	r28
    7796:	08 95       	ret

00007798 <AT45WriteByteToBuffer>:
}

char AT45WriteByteToBuffer(unsigned char bufno, unsigned char byte)
{
    7798:	cf 93       	push	r28
    779a:	df 93       	push	r29
    779c:	cd b7       	in	r28, 0x3d	; 61
    779e:	de b7       	in	r29, 0x3e	; 62
    77a0:	22 97       	sbiw	r28, 0x02	; 2
    77a2:	0f b6       	in	r0, 0x3f	; 63
    77a4:	f8 94       	cli
    77a6:	de bf       	out	0x3e, r29	; 62
    77a8:	0f be       	out	0x3f, r0	; 63
    77aa:	cd bf       	out	0x3d, r28	; 61
    77ac:	89 83       	std	Y+1, r24	; 0x01
    77ae:	6a 83       	std	Y+2, r22	; 0x02
	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    77b0:	80 91 21 00 	lds	r24, 0x0021
    77b4:	99 27       	eor	r25, r25
    77b6:	84 70       	andi	r24, 0x04	; 4
    77b8:	90 70       	andi	r25, 0x00	; 0
    77ba:	00 97       	sbiw	r24, 0x00	; 0
    77bc:	09 f4       	brne	.+2      	; 0x77c0 <AT45WriteByteToBuffer+0x28>
    77be:	f8 cf       	rjmp	.-16     	; 0x77b0 <AT45WriteByteToBuffer+0x18>

	UNSELECT_AT45;
    77c0:	80 91 38 00 	lds	r24, 0x0038
    77c4:	80 61       	ori	r24, 0x10	; 16
    77c6:	80 93 38 00 	sts	0x0038, r24
	SELECT_AT45;
    77ca:	80 91 38 00 	lds	r24, 0x0038
    77ce:	8f 7e       	andi	r24, 0xEF	; 239
    77d0:	80 93 38 00 	sts	0x0038, r24

    spiWriteByte(buf_select_write[bufno]);	//  0x84
    77d4:	89 81       	ldd	r24, Y+1	; 0x01
    77d6:	99 27       	eor	r25, r25
    77d8:	fc 01       	movw	r30, r24
    77da:	e5 57       	subi	r30, 0x75	; 117
    77dc:	fa 4f       	sbci	r31, 0xFA	; 250
    77de:	80 81       	ld	r24, Z
    77e0:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(0x00);
    77e4:	80 e0       	ldi	r24, 0x00	; 0
    77e6:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte((char)(wBufPos[bufno] >> 8));
    77ea:	89 81       	ldd	r24, Y+1	; 0x01
    77ec:	28 2f       	mov	r18, r24
    77ee:	33 27       	eor	r19, r19
    77f0:	c9 01       	movw	r24, r18
    77f2:	82 0f       	add	r24, r18
    77f4:	93 1f       	adc	r25, r19
    77f6:	fc 01       	movw	r30, r24
    77f8:	e7 59       	subi	r30, 0x97	; 151
    77fa:	f9 4f       	sbci	r31, 0xF9	; 249
    77fc:	80 81       	ld	r24, Z
    77fe:	91 81       	ldd	r25, Z+1	; 0x01
    7800:	89 2f       	mov	r24, r25
    7802:	99 27       	eor	r25, r25
    7804:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte((char)wBufPos[bufno] & 0xFF);
    7808:	89 81       	ldd	r24, Y+1	; 0x01
    780a:	28 2f       	mov	r18, r24
    780c:	33 27       	eor	r19, r19
    780e:	c9 01       	movw	r24, r18
    7810:	82 0f       	add	r24, r18
    7812:	93 1f       	adc	r25, r19
    7814:	fc 01       	movw	r30, r24
    7816:	e7 59       	subi	r30, 0x97	; 151
    7818:	f9 4f       	sbci	r31, 0xF9	; 249
    781a:	9f ef       	ldi	r25, 0xFF	; 255
    781c:	80 81       	ld	r24, Z
    781e:	89 23       	and	r24, r25
    7820:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(byte);
    7824:	8a 81       	ldd	r24, Y+2	; 0x02
    7826:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

    UNSELECT_AT45;
    782a:	80 91 38 00 	lds	r24, 0x0038
    782e:	80 61       	ori	r24, 0x10	; 16
    7830:	80 93 38 00 	sts	0x0038, r24

	wBufPos[bufno]++;
    7834:	89 81       	ldd	r24, Y+1	; 0x01
    7836:	28 2f       	mov	r18, r24
    7838:	33 27       	eor	r19, r19
    783a:	c9 01       	movw	r24, r18
    783c:	82 0f       	add	r24, r18
    783e:	93 1f       	adc	r25, r19
    7840:	dc 01       	movw	r26, r24
    7842:	a7 59       	subi	r26, 0x97	; 151
    7844:	b9 4f       	sbci	r27, 0xF9	; 249
    7846:	89 81       	ldd	r24, Y+1	; 0x01
    7848:	28 2f       	mov	r18, r24
    784a:	33 27       	eor	r19, r19
    784c:	c9 01       	movw	r24, r18
    784e:	82 0f       	add	r24, r18
    7850:	93 1f       	adc	r25, r19
    7852:	fc 01       	movw	r30, r24
    7854:	e7 59       	subi	r30, 0x97	; 151
    7856:	f9 4f       	sbci	r31, 0xF9	; 249
    7858:	80 81       	ld	r24, Z
    785a:	91 81       	ldd	r25, Z+1	; 0x01
    785c:	01 96       	adiw	r24, 0x01	; 1
    785e:	8d 93       	st	X+, r24
    7860:	9c 93       	st	X, r25

	return 1;
    7862:	81 e0       	ldi	r24, 0x01	; 1
    7864:	90 e0       	ldi	r25, 0x00	; 0
    7866:	22 96       	adiw	r28, 0x02	; 2
    7868:	0f b6       	in	r0, 0x3f	; 63
    786a:	f8 94       	cli
    786c:	de bf       	out	0x3e, r29	; 62
    786e:	0f be       	out	0x3f, r0	; 63
    7870:	cd bf       	out	0x3d, r28	; 61
    7872:	df 91       	pop	r29
    7874:	cf 91       	pop	r28
    7876:	08 95       	ret

00007878 <AT45WriteBufferToPage>:
}

char AT45WriteBufferToPage(unsigned char bufno, unsigned short pagenum)
{
    7878:	cf 93       	push	r28
    787a:	df 93       	push	r29
    787c:	cd b7       	in	r28, 0x3d	; 61
    787e:	de b7       	in	r29, 0x3e	; 62
    7880:	23 97       	sbiw	r28, 0x03	; 3
    7882:	0f b6       	in	r0, 0x3f	; 63
    7884:	f8 94       	cli
    7886:	de bf       	out	0x3e, r29	; 62
    7888:	0f be       	out	0x3f, r0	; 63
    788a:	cd bf       	out	0x3d, r28	; 61
    788c:	89 83       	std	Y+1, r24	; 0x01
    788e:	7b 83       	std	Y+3, r23	; 0x03
    7890:	6a 83       	std	Y+2, r22	; 0x02
	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7892:	80 91 21 00 	lds	r24, 0x0021
    7896:	99 27       	eor	r25, r25
    7898:	84 70       	andi	r24, 0x04	; 4
    789a:	90 70       	andi	r25, 0x00	; 0
    789c:	00 97       	sbiw	r24, 0x00	; 0
    789e:	09 f4       	brne	.+2      	; 0x78a2 <AT45WriteBufferToPage+0x2a>
    78a0:	f8 cf       	rjmp	.-16     	; 0x7892 <AT45WriteBufferToPage+0x1a>

	//  эта функция выполняет запись буфера в страницу
	UNSELECT_AT45;
    78a2:	80 91 38 00 	lds	r24, 0x0038
    78a6:	80 61       	ori	r24, 0x10	; 16
    78a8:	80 93 38 00 	sts	0x0038, r24
	SELECT_AT45;
    78ac:	80 91 38 00 	lds	r24, 0x0038
    78b0:	8f 7e       	andi	r24, 0xEF	; 239
    78b2:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(buf_select_to_page[bufno]);		//  0x83
    78b6:	89 81       	ldd	r24, Y+1	; 0x01
    78b8:	99 27       	eor	r25, r25
    78ba:	fc 01       	movw	r30, r24
    78bc:	e3 57       	subi	r30, 0x73	; 115
    78be:	fa 4f       	sbci	r31, 0xFA	; 250
    78c0:	80 81       	ld	r24, Z
    78c2:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte((char)(pagenum >> 6));
    78c6:	8a 81       	ldd	r24, Y+2	; 0x02
    78c8:	9b 81       	ldd	r25, Y+3	; 0x03
    78ca:	00 24       	eor	r0, r0
    78cc:	88 0f       	add	r24, r24
    78ce:	99 1f       	adc	r25, r25
    78d0:	00 1c       	adc	r0, r0
    78d2:	88 0f       	add	r24, r24
    78d4:	99 1f       	adc	r25, r25
    78d6:	00 1c       	adc	r0, r0
    78d8:	89 2f       	mov	r24, r25
    78da:	90 2d       	mov	r25, r0
    78dc:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pagenum << 2));
    78e0:	8a 81       	ldd	r24, Y+2	; 0x02
    78e2:	9b 81       	ldd	r25, Y+3	; 0x03
    78e4:	88 0f       	add	r24, r24
    78e6:	99 1f       	adc	r25, r25
    78e8:	88 0f       	add	r24, r24
    78ea:	99 1f       	adc	r25, r25
    78ec:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0x00);
    78f0:	80 e0       	ldi	r24, 0x00	; 0
    78f2:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	UNSELECT_AT45;
    78f6:	80 91 38 00 	lds	r24, 0x0038
    78fa:	80 61       	ori	r24, 0x10	; 16
    78fc:	80 93 38 00 	sts	0x0038, r24

	return 0;
    7900:	80 e0       	ldi	r24, 0x00	; 0
    7902:	90 e0       	ldi	r25, 0x00	; 0
    7904:	23 96       	adiw	r28, 0x03	; 3
    7906:	0f b6       	in	r0, 0x3f	; 63
    7908:	f8 94       	cli
    790a:	de bf       	out	0x3e, r29	; 62
    790c:	0f be       	out	0x3f, r0	; 63
    790e:	cd bf       	out	0x3d, r28	; 61
    7910:	df 91       	pop	r29
    7912:	cf 91       	pop	r28
    7914:	08 95       	ret

00007916 <AT45ReadPageToBuffer>:
}

char AT45ReadPageToBuffer(unsigned char bufno, unsigned short pagenum)
{
    7916:	cf 93       	push	r28
    7918:	df 93       	push	r29
    791a:	cd b7       	in	r28, 0x3d	; 61
    791c:	de b7       	in	r29, 0x3e	; 62
    791e:	23 97       	sbiw	r28, 0x03	; 3
    7920:	0f b6       	in	r0, 0x3f	; 63
    7922:	f8 94       	cli
    7924:	de bf       	out	0x3e, r29	; 62
    7926:	0f be       	out	0x3f, r0	; 63
    7928:	cd bf       	out	0x3d, r28	; 61
    792a:	89 83       	std	Y+1, r24	; 0x01
    792c:	7b 83       	std	Y+3, r23	; 0x03
    792e:	6a 83       	std	Y+2, r22	; 0x02
	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7930:	80 91 21 00 	lds	r24, 0x0021
    7934:	99 27       	eor	r25, r25
    7936:	84 70       	andi	r24, 0x04	; 4
    7938:	90 70       	andi	r25, 0x00	; 0
    793a:	00 97       	sbiw	r24, 0x00	; 0
    793c:	09 f4       	brne	.+2      	; 0x7940 <AT45ReadPageToBuffer+0x2a>
    793e:	f8 cf       	rjmp	.-16     	; 0x7930 <AT45ReadPageToBuffer+0x1a>

	//  эта функция выполняет чтение страницы в buffer

	UNSELECT_AT45;
    7940:	80 91 38 00 	lds	r24, 0x0038
    7944:	80 61       	ori	r24, 0x10	; 16
    7946:	80 93 38 00 	sts	0x0038, r24
	SELECT_AT45;
    794a:	80 91 38 00 	lds	r24, 0x0038
    794e:	8f 7e       	andi	r24, 0xEF	; 239
    7950:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(page_select_to_buf[bufno]);		//  0x53
    7954:	89 81       	ldd	r24, Y+1	; 0x01
    7956:	99 27       	eor	r25, r25
    7958:	fc 01       	movw	r30, r24
    795a:	e1 57       	subi	r30, 0x71	; 113
    795c:	fa 4f       	sbci	r31, 0xFA	; 250
    795e:	80 81       	ld	r24, Z
    7960:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte((char)(pagenum >> 6));
    7964:	8a 81       	ldd	r24, Y+2	; 0x02
    7966:	9b 81       	ldd	r25, Y+3	; 0x03
    7968:	00 24       	eor	r0, r0
    796a:	88 0f       	add	r24, r24
    796c:	99 1f       	adc	r25, r25
    796e:	00 1c       	adc	r0, r0
    7970:	88 0f       	add	r24, r24
    7972:	99 1f       	adc	r25, r25
    7974:	00 1c       	adc	r0, r0
    7976:	89 2f       	mov	r24, r25
    7978:	90 2d       	mov	r25, r0
    797a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pagenum << 2));
    797e:	8a 81       	ldd	r24, Y+2	; 0x02
    7980:	9b 81       	ldd	r25, Y+3	; 0x03
    7982:	88 0f       	add	r24, r24
    7984:	99 1f       	adc	r25, r25
    7986:	88 0f       	add	r24, r24
    7988:	99 1f       	adc	r25, r25
    798a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0x00);
    798e:	80 e0       	ldi	r24, 0x00	; 0
    7990:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	UNSELECT_AT45;
    7994:	80 91 38 00 	lds	r24, 0x0038
    7998:	80 61       	ori	r24, 0x10	; 16
    799a:	80 93 38 00 	sts	0x0038, r24

	return 0;
    799e:	80 e0       	ldi	r24, 0x00	; 0
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	23 96       	adiw	r28, 0x03	; 3
    79a4:	0f b6       	in	r0, 0x3f	; 63
    79a6:	f8 94       	cli
    79a8:	de bf       	out	0x3e, r29	; 62
    79aa:	0f be       	out	0x3f, r0	; 63
    79ac:	cd bf       	out	0x3d, r28	; 61
    79ae:	df 91       	pop	r29
    79b0:	cf 91       	pop	r28
    79b2:	08 95       	ret

000079b4 <AT45ReadByteFromBuffer>:
}

//  изменяет глобальную переменную rBufPos - позицию очередного
//  считываемого байта
unsigned char AT45ReadByteFromBuffer(unsigned char bufno)
{
    79b4:	cf 93       	push	r28
    79b6:	df 93       	push	r29
    79b8:	cd b7       	in	r28, 0x3d	; 61
    79ba:	de b7       	in	r29, 0x3e	; 62
    79bc:	22 97       	sbiw	r28, 0x02	; 2
    79be:	0f b6       	in	r0, 0x3f	; 63
    79c0:	f8 94       	cli
    79c2:	de bf       	out	0x3e, r29	; 62
    79c4:	0f be       	out	0x3f, r0	; 63
    79c6:	cd bf       	out	0x3d, r28	; 61
    79c8:	89 83       	std	Y+1, r24	; 0x01
	unsigned char res;

	//while(!(AT45_PORT_IN & _BV(BUSY_PIN)));

	UNSELECT_AT45;
    79ca:	80 91 38 00 	lds	r24, 0x0038
    79ce:	80 61       	ori	r24, 0x10	; 16
    79d0:	80 93 38 00 	sts	0x0038, r24
	SELECT_AT45;
    79d4:	80 91 38 00 	lds	r24, 0x0038
    79d8:	8f 7e       	andi	r24, 0xEF	; 239
    79da:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(buf_select_read[bufno]);		// 0x54
    79de:	89 81       	ldd	r24, Y+1	; 0x01
    79e0:	99 27       	eor	r25, r25
    79e2:	fc 01       	movw	r30, r24
    79e4:	e7 57       	subi	r30, 0x77	; 119
    79e6:	fa 4f       	sbci	r31, 0xFA	; 250
    79e8:	80 81       	ld	r24, Z
    79ea:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x00);
    79ee:	80 e0       	ldi	r24, 0x00	; 0
    79f0:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(rBufPos[bufno] >> 8);
    79f4:	89 81       	ldd	r24, Y+1	; 0x01
    79f6:	28 2f       	mov	r18, r24
    79f8:	33 27       	eor	r19, r19
    79fa:	c9 01       	movw	r24, r18
    79fc:	82 0f       	add	r24, r18
    79fe:	93 1f       	adc	r25, r19
    7a00:	fc 01       	movw	r30, r24
    7a02:	e3 59       	subi	r30, 0x93	; 147
    7a04:	f9 4f       	sbci	r31, 0xF9	; 249
    7a06:	80 81       	ld	r24, Z
    7a08:	91 81       	ldd	r25, Z+1	; 0x01
    7a0a:	89 2f       	mov	r24, r25
    7a0c:	99 27       	eor	r25, r25
    7a0e:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(rBufPos[bufno] & 0xFF);
    7a12:	89 81       	ldd	r24, Y+1	; 0x01
    7a14:	28 2f       	mov	r18, r24
    7a16:	33 27       	eor	r19, r19
    7a18:	c9 01       	movw	r24, r18
    7a1a:	82 0f       	add	r24, r18
    7a1c:	93 1f       	adc	r25, r19
    7a1e:	fc 01       	movw	r30, r24
    7a20:	e3 59       	subi	r30, 0x93	; 147
    7a22:	f9 4f       	sbci	r31, 0xF9	; 249
    7a24:	80 81       	ld	r24, Z
    7a26:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7a2a:	8f ef       	ldi	r24, 0xFF	; 255
    7a2c:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	res = spiReadByte();
    7a30:	0e 94 5b 2e 	call	0x5cb6 <spiReadByte>
    7a34:	8a 83       	std	Y+2, r24	; 0x02

	UNSELECT_AT45;
    7a36:	80 91 38 00 	lds	r24, 0x0038
    7a3a:	80 61       	ori	r24, 0x10	; 16
    7a3c:	80 93 38 00 	sts	0x0038, r24

	rBufPos[bufno]++;
    7a40:	89 81       	ldd	r24, Y+1	; 0x01
    7a42:	28 2f       	mov	r18, r24
    7a44:	33 27       	eor	r19, r19
    7a46:	c9 01       	movw	r24, r18
    7a48:	82 0f       	add	r24, r18
    7a4a:	93 1f       	adc	r25, r19
    7a4c:	dc 01       	movw	r26, r24
    7a4e:	a3 59       	subi	r26, 0x93	; 147
    7a50:	b9 4f       	sbci	r27, 0xF9	; 249
    7a52:	89 81       	ldd	r24, Y+1	; 0x01
    7a54:	28 2f       	mov	r18, r24
    7a56:	33 27       	eor	r19, r19
    7a58:	c9 01       	movw	r24, r18
    7a5a:	82 0f       	add	r24, r18
    7a5c:	93 1f       	adc	r25, r19
    7a5e:	fc 01       	movw	r30, r24
    7a60:	e3 59       	subi	r30, 0x93	; 147
    7a62:	f9 4f       	sbci	r31, 0xF9	; 249
    7a64:	80 81       	ld	r24, Z
    7a66:	91 81       	ldd	r25, Z+1	; 0x01
    7a68:	01 96       	adiw	r24, 0x01	; 1
    7a6a:	8d 93       	st	X+, r24
    7a6c:	9c 93       	st	X, r25

	return res;
    7a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    7a70:	99 27       	eor	r25, r25
    7a72:	22 96       	adiw	r28, 0x02	; 2
    7a74:	0f b6       	in	r0, 0x3f	; 63
    7a76:	f8 94       	cli
    7a78:	de bf       	out	0x3e, r29	; 62
    7a7a:	0f be       	out	0x3f, r0	; 63
    7a7c:	cd bf       	out	0x3d, r28	; 61
    7a7e:	df 91       	pop	r29
    7a80:	cf 91       	pop	r28
    7a82:	08 95       	ret

00007a84 <AT45ReadByteFromPage>:
}

//  чтение произвольного байта с любой страницы
unsigned char AT45ReadByteFromPage(unsigned short pageno, unsigned short byteno)
{
    7a84:	cf 93       	push	r28
    7a86:	df 93       	push	r29
    7a88:	cd b7       	in	r28, 0x3d	; 61
    7a8a:	de b7       	in	r29, 0x3e	; 62
    7a8c:	25 97       	sbiw	r28, 0x05	; 5
    7a8e:	0f b6       	in	r0, 0x3f	; 63
    7a90:	f8 94       	cli
    7a92:	de bf       	out	0x3e, r29	; 62
    7a94:	0f be       	out	0x3f, r0	; 63
    7a96:	cd bf       	out	0x3d, r28	; 61
    7a98:	9a 83       	std	Y+2, r25	; 0x02
    7a9a:	89 83       	std	Y+1, r24	; 0x01
    7a9c:	7c 83       	std	Y+4, r23	; 0x04
    7a9e:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char res;

	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7aa0:	80 91 21 00 	lds	r24, 0x0021
    7aa4:	99 27       	eor	r25, r25
    7aa6:	84 70       	andi	r24, 0x04	; 4
    7aa8:	90 70       	andi	r25, 0x00	; 0
    7aaa:	00 97       	sbiw	r24, 0x00	; 0
    7aac:	09 f4       	brne	.+2      	; 0x7ab0 <AT45ReadByteFromPage+0x2c>
    7aae:	f8 cf       	rjmp	.-16     	; 0x7aa0 <AT45ReadByteFromPage+0x1c>

	UNSELECT_AT45;
    7ab0:	80 91 38 00 	lds	r24, 0x0038
    7ab4:	80 61       	ori	r24, 0x10	; 16
    7ab6:	80 93 38 00 	sts	0x0038, r24
    SELECT_AT45;
    7aba:	80 91 38 00 	lds	r24, 0x0038
    7abe:	8f 7e       	andi	r24, 0xEF	; 239
    7ac0:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(MAIN_MEMORY_PAGE_READ);		//  0x52
    7ac4:	82 e5       	ldi	r24, 0x52	; 82
    7ac6:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pageno >> 6));
    7aca:	89 81       	ldd	r24, Y+1	; 0x01
    7acc:	9a 81       	ldd	r25, Y+2	; 0x02
    7ace:	00 24       	eor	r0, r0
    7ad0:	88 0f       	add	r24, r24
    7ad2:	99 1f       	adc	r25, r25
    7ad4:	00 1c       	adc	r0, r0
    7ad6:	88 0f       	add	r24, r24
    7ad8:	99 1f       	adc	r25, r25
    7ada:	00 1c       	adc	r0, r0
    7adc:	89 2f       	mov	r24, r25
    7ade:	90 2d       	mov	r25, r0
    7ae0:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pageno << 2) | (char)(byteno >> 8));
    7ae4:	89 81       	ldd	r24, Y+1	; 0x01
    7ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    7ae8:	9c 01       	movw	r18, r24
    7aea:	22 0f       	add	r18, r18
    7aec:	33 1f       	adc	r19, r19
    7aee:	22 0f       	add	r18, r18
    7af0:	33 1f       	adc	r19, r19
    7af2:	8b 81       	ldd	r24, Y+3	; 0x03
    7af4:	9c 81       	ldd	r25, Y+4	; 0x04
    7af6:	89 2f       	mov	r24, r25
    7af8:	99 27       	eor	r25, r25
    7afa:	82 2b       	or	r24, r18
    7afc:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(byteno & 0xFF));
    7b00:	8b 81       	ldd	r24, Y+3	; 0x03
    7b02:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(0xFF);
    7b06:	8f ef       	ldi	r24, 0xFF	; 255
    7b08:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7b0c:	8f ef       	ldi	r24, 0xFF	; 255
    7b0e:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7b12:	8f ef       	ldi	r24, 0xFF	; 255
    7b14:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7b18:	8f ef       	ldi	r24, 0xFF	; 255
    7b1a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	res = spiReadByte();
    7b1e:	0e 94 5b 2e 	call	0x5cb6 <spiReadByte>
    7b22:	8d 83       	std	Y+5, r24	; 0x05

	UNSELECT_AT45;
    7b24:	80 91 38 00 	lds	r24, 0x0038
    7b28:	80 61       	ori	r24, 0x10	; 16
    7b2a:	80 93 38 00 	sts	0x0038, r24

	return res;
    7b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    7b30:	99 27       	eor	r25, r25
    7b32:	25 96       	adiw	r28, 0x05	; 5
    7b34:	0f b6       	in	r0, 0x3f	; 63
    7b36:	f8 94       	cli
    7b38:	de bf       	out	0x3e, r29	; 62
    7b3a:	0f be       	out	0x3f, r0	; 63
    7b3c:	cd bf       	out	0x3d, r28	; 61
    7b3e:	df 91       	pop	r29
    7b40:	cf 91       	pop	r28
    7b42:	08 95       	ret

00007b44 <AT45PageErase>:
}

void AT45PageErase(unsigned short pagenum)
{
    7b44:	cf 93       	push	r28
    7b46:	df 93       	push	r29
    7b48:	cd b7       	in	r28, 0x3d	; 61
    7b4a:	de b7       	in	r29, 0x3e	; 62
    7b4c:	22 97       	sbiw	r28, 0x02	; 2
    7b4e:	0f b6       	in	r0, 0x3f	; 63
    7b50:	f8 94       	cli
    7b52:	de bf       	out	0x3e, r29	; 62
    7b54:	0f be       	out	0x3f, r0	; 63
    7b56:	cd bf       	out	0x3d, r28	; 61
    7b58:	9a 83       	std	Y+2, r25	; 0x02
    7b5a:	89 83       	std	Y+1, r24	; 0x01
	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7b5c:	80 91 21 00 	lds	r24, 0x0021
    7b60:	99 27       	eor	r25, r25
    7b62:	84 70       	andi	r24, 0x04	; 4
    7b64:	90 70       	andi	r25, 0x00	; 0
    7b66:	00 97       	sbiw	r24, 0x00	; 0
    7b68:	09 f4       	brne	.+2      	; 0x7b6c <AT45PageErase+0x28>
    7b6a:	f8 cf       	rjmp	.-16     	; 0x7b5c <AT45PageErase+0x18>

	UNSELECT_AT45;
    7b6c:	80 91 38 00 	lds	r24, 0x0038
    7b70:	80 61       	ori	r24, 0x10	; 16
    7b72:	80 93 38 00 	sts	0x0038, r24
    SELECT_AT45;
    7b76:	80 91 38 00 	lds	r24, 0x0038
    7b7a:	8f 7e       	andi	r24, 0xEF	; 239
    7b7c:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(PAGE_ERASE);			//  0x81
    7b80:	81 e8       	ldi	r24, 0x81	; 129
    7b82:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pagenum >> 6));
    7b86:	89 81       	ldd	r24, Y+1	; 0x01
    7b88:	9a 81       	ldd	r25, Y+2	; 0x02
    7b8a:	00 24       	eor	r0, r0
    7b8c:	88 0f       	add	r24, r24
    7b8e:	99 1f       	adc	r25, r25
    7b90:	00 1c       	adc	r0, r0
    7b92:	88 0f       	add	r24, r24
    7b94:	99 1f       	adc	r25, r25
    7b96:	00 1c       	adc	r0, r0
    7b98:	89 2f       	mov	r24, r25
    7b9a:	90 2d       	mov	r25, r0
    7b9c:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte((char)(pagenum << 2));
    7ba0:	89 81       	ldd	r24, Y+1	; 0x01
    7ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    7ba4:	88 0f       	add	r24, r24
    7ba6:	99 1f       	adc	r25, r25
    7ba8:	88 0f       	add	r24, r24
    7baa:	99 1f       	adc	r25, r25
    7bac:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x00);
    7bb0:	80 e0       	ldi	r24, 0x00	; 0
    7bb2:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

    UNSELECT_AT45;
    7bb6:	80 91 38 00 	lds	r24, 0x0038
    7bba:	80 61       	ori	r24, 0x10	; 16
    7bbc:	80 93 38 00 	sts	0x0038, r24
    7bc0:	22 96       	adiw	r28, 0x02	; 2
    7bc2:	0f b6       	in	r0, 0x3f	; 63
    7bc4:	f8 94       	cli
    7bc6:	de bf       	out	0x3e, r29	; 62
    7bc8:	0f be       	out	0x3f, r0	; 63
    7bca:	cd bf       	out	0x3d, r28	; 61
    7bcc:	df 91       	pop	r29
    7bce:	cf 91       	pop	r28
    7bd0:	08 95       	ret

00007bd2 <AT45FillBuffer>:
}

void AT45FillBuffer(unsigned char bufno, unsigned char b)
{
    7bd2:	cf 93       	push	r28
    7bd4:	df 93       	push	r29
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
    7bda:	24 97       	sbiw	r28, 0x04	; 4
    7bdc:	0f b6       	in	r0, 0x3f	; 63
    7bde:	f8 94       	cli
    7be0:	de bf       	out	0x3e, r29	; 62
    7be2:	0f be       	out	0x3f, r0	; 63
    7be4:	cd bf       	out	0x3d, r28	; 61
    7be6:	89 83       	std	Y+1, r24	; 0x01
    7be8:	6a 83       	std	Y+2, r22	; 0x02
	unsigned short k;
	wBufPos[bufno] = 0;
    7bea:	89 81       	ldd	r24, Y+1	; 0x01
    7bec:	28 2f       	mov	r18, r24
    7bee:	33 27       	eor	r19, r19
    7bf0:	c9 01       	movw	r24, r18
    7bf2:	82 0f       	add	r24, r18
    7bf4:	93 1f       	adc	r25, r19
    7bf6:	fc 01       	movw	r30, r24
    7bf8:	e7 59       	subi	r30, 0x97	; 151
    7bfa:	f9 4f       	sbci	r31, 0xF9	; 249
    7bfc:	11 82       	std	Z+1, r1	; 0x01
    7bfe:	10 82       	st	Z, r1

	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7c00:	80 91 21 00 	lds	r24, 0x0021
    7c04:	99 27       	eor	r25, r25
    7c06:	84 70       	andi	r24, 0x04	; 4
    7c08:	90 70       	andi	r25, 0x00	; 0
    7c0a:	00 97       	sbiw	r24, 0x00	; 0
    7c0c:	09 f4       	brne	.+2      	; 0x7c10 <AT45FillBuffer+0x3e>
    7c0e:	f8 cf       	rjmp	.-16     	; 0x7c00 <AT45FillBuffer+0x2e>

	UNSELECT_AT45;
    7c10:	80 91 38 00 	lds	r24, 0x0038
    7c14:	80 61       	ori	r24, 0x10	; 16
    7c16:	80 93 38 00 	sts	0x0038, r24
    SELECT_AT45;
    7c1a:	80 91 38 00 	lds	r24, 0x0038
    7c1e:	8f 7e       	andi	r24, 0xEF	; 239
    7c20:	80 93 38 00 	sts	0x0038, r24

    spiWriteByte(buf_select_write[bufno]);	//  0x84
    7c24:	89 81       	ldd	r24, Y+1	; 0x01
    7c26:	99 27       	eor	r25, r25
    7c28:	fc 01       	movw	r30, r24
    7c2a:	e5 57       	subi	r30, 0x75	; 117
    7c2c:	fa 4f       	sbci	r31, 0xFA	; 250
    7c2e:	80 81       	ld	r24, Z
    7c30:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(0x00);
    7c34:	80 e0       	ldi	r24, 0x00	; 0
    7c36:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0);
    7c3a:	80 e0       	ldi	r24, 0x00	; 0
    7c3c:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0);
    7c40:	80 e0       	ldi	r24, 0x00	; 0
    7c42:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	for (k = 0; k < 512; k++)
    7c46:	1c 82       	std	Y+4, r1	; 0x04
    7c48:	1b 82       	std	Y+3, r1	; 0x03
    7c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c4e:	22 e0       	ldi	r18, 0x02	; 2
    7c50:	80 30       	cpi	r24, 0x00	; 0
    7c52:	92 07       	cpc	r25, r18
    7c54:	48 f4       	brcc	.+18     	; 0x7c68 <AT45FillBuffer+0x96>
		spiWriteByte(b);
    7c56:	8a 81       	ldd	r24, Y+2	; 0x02
    7c58:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    7c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    7c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    7c60:	01 96       	adiw	r24, 0x01	; 1
    7c62:	9c 83       	std	Y+4, r25	; 0x04
    7c64:	8b 83       	std	Y+3, r24	; 0x03
    7c66:	f1 cf       	rjmp	.-30     	; 0x7c4a <AT45FillBuffer+0x78>

    UNSELECT_AT45;
    7c68:	80 91 38 00 	lds	r24, 0x0038
    7c6c:	80 61       	ori	r24, 0x10	; 16
    7c6e:	80 93 38 00 	sts	0x0038, r24
    7c72:	24 96       	adiw	r28, 0x04	; 4
    7c74:	0f b6       	in	r0, 0x3f	; 63
    7c76:	f8 94       	cli
    7c78:	de bf       	out	0x3e, r29	; 62
    7c7a:	0f be       	out	0x3f, r0	; 63
    7c7c:	cd bf       	out	0x3d, r28	; 61
    7c7e:	df 91       	pop	r29
    7c80:	cf 91       	pop	r28
    7c82:	08 95       	ret

00007c84 <AT45ZeroPage>:
}

void AT45ZeroPage(unsigned short pagenum)
{
    7c84:	cf 93       	push	r28
    7c86:	df 93       	push	r29
    7c88:	cd b7       	in	r28, 0x3d	; 61
    7c8a:	de b7       	in	r29, 0x3e	; 62
    7c8c:	22 97       	sbiw	r28, 0x02	; 2
    7c8e:	0f b6       	in	r0, 0x3f	; 63
    7c90:	f8 94       	cli
    7c92:	de bf       	out	0x3e, r29	; 62
    7c94:	0f be       	out	0x3f, r0	; 63
    7c96:	cd bf       	out	0x3d, r28	; 61
    7c98:	9a 83       	std	Y+2, r25	; 0x02
    7c9a:	89 83       	std	Y+1, r24	; 0x01
	AT45FillBuffer(0, 0);
    7c9c:	60 e0       	ldi	r22, 0x00	; 0
    7c9e:	80 e0       	ldi	r24, 0x00	; 0
    7ca0:	0e 94 e9 3d 	call	0x7bd2 <AT45FillBuffer>
	AT45WriteBufferToPage(0, pagenum);
    7ca4:	69 81       	ldd	r22, Y+1	; 0x01
    7ca6:	7a 81       	ldd	r23, Y+2	; 0x02
    7ca8:	80 e0       	ldi	r24, 0x00	; 0
    7caa:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>
    7cae:	22 96       	adiw	r28, 0x02	; 2
    7cb0:	0f b6       	in	r0, 0x3f	; 63
    7cb2:	f8 94       	cli
    7cb4:	de bf       	out	0x3e, r29	; 62
    7cb6:	0f be       	out	0x3f, r0	; 63
    7cb8:	cd bf       	out	0x3d, r28	; 61
    7cba:	df 91       	pop	r29
    7cbc:	cf 91       	pop	r28
    7cbe:	08 95       	ret

00007cc0 <AT45StartContinueRead>:
}

void AT45StartContinueRead(unsigned short pageno)
{
    7cc0:	cf 93       	push	r28
    7cc2:	df 93       	push	r29
    7cc4:	cd b7       	in	r28, 0x3d	; 61
    7cc6:	de b7       	in	r29, 0x3e	; 62
    7cc8:	22 97       	sbiw	r28, 0x02	; 2
    7cca:	0f b6       	in	r0, 0x3f	; 63
    7ccc:	f8 94       	cli
    7cce:	de bf       	out	0x3e, r29	; 62
    7cd0:	0f be       	out	0x3f, r0	; 63
    7cd2:	cd bf       	out	0x3d, r28	; 61
    7cd4:	9a 83       	std	Y+2, r25	; 0x02
    7cd6:	89 83       	std	Y+1, r24	; 0x01
	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7cd8:	80 91 21 00 	lds	r24, 0x0021
    7cdc:	99 27       	eor	r25, r25
    7cde:	84 70       	andi	r24, 0x04	; 4
    7ce0:	90 70       	andi	r25, 0x00	; 0
    7ce2:	00 97       	sbiw	r24, 0x00	; 0
    7ce4:	09 f4       	brne	.+2      	; 0x7ce8 <AT45StartContinueRead+0x28>
    7ce6:	f8 cf       	rjmp	.-16     	; 0x7cd8 <AT45StartContinueRead+0x18>

	UNSELECT_AT45;
    7ce8:	80 91 38 00 	lds	r24, 0x0038
    7cec:	80 61       	ori	r24, 0x10	; 16
    7cee:	80 93 38 00 	sts	0x0038, r24
    SELECT_AT45;
    7cf2:	80 91 38 00 	lds	r24, 0x0038
    7cf6:	8f 7e       	andi	r24, 0xEF	; 239
    7cf8:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(CONTINUE_READ);			//  0x68
    7cfc:	88 ee       	ldi	r24, 0xE8	; 232
    7cfe:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pageno >> 6));
    7d02:	89 81       	ldd	r24, Y+1	; 0x01
    7d04:	9a 81       	ldd	r25, Y+2	; 0x02
    7d06:	00 24       	eor	r0, r0
    7d08:	88 0f       	add	r24, r24
    7d0a:	99 1f       	adc	r25, r25
    7d0c:	00 1c       	adc	r0, r0
    7d0e:	88 0f       	add	r24, r24
    7d10:	99 1f       	adc	r25, r25
    7d12:	00 1c       	adc	r0, r0
    7d14:	89 2f       	mov	r24, r25
    7d16:	90 2d       	mov	r25, r0
    7d18:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte((char)(pageno << 2));
    7d1c:	89 81       	ldd	r24, Y+1	; 0x01
    7d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    7d20:	88 0f       	add	r24, r24
    7d22:	99 1f       	adc	r25, r25
    7d24:	88 0f       	add	r24, r24
    7d26:	99 1f       	adc	r25, r25
    7d28:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x00);						//  с нулевого байта
    7d2c:	80 e0       	ldi	r24, 0x00	; 0
    7d2e:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

    spiWriteByte(0x00);
    7d32:	80 e0       	ldi	r24, 0x00	; 0
    7d34:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x00);
    7d38:	80 e0       	ldi	r24, 0x00	; 0
    7d3a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x00);
    7d3e:	80 e0       	ldi	r24, 0x00	; 0
    7d40:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x00);
    7d44:	80 e0       	ldi	r24, 0x00	; 0
    7d46:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    7d4a:	22 96       	adiw	r28, 0x02	; 2
    7d4c:	0f b6       	in	r0, 0x3f	; 63
    7d4e:	f8 94       	cli
    7d50:	de bf       	out	0x3e, r29	; 62
    7d52:	0f be       	out	0x3f, r0	; 63
    7d54:	cd bf       	out	0x3d, r28	; 61
    7d56:	df 91       	pop	r29
    7d58:	cf 91       	pop	r28
    7d5a:	08 95       	ret

00007d5c <AT45GetPage>:

}

void AT45GetPage(unsigned short pageno, unsigned char* buf)
{
    7d5c:	cf 93       	push	r28
    7d5e:	df 93       	push	r29
    7d60:	cd b7       	in	r28, 0x3d	; 61
    7d62:	de b7       	in	r29, 0x3e	; 62
    7d64:	26 97       	sbiw	r28, 0x06	; 6
    7d66:	0f b6       	in	r0, 0x3f	; 63
    7d68:	f8 94       	cli
    7d6a:	de bf       	out	0x3e, r29	; 62
    7d6c:	0f be       	out	0x3f, r0	; 63
    7d6e:	cd bf       	out	0x3d, r28	; 61
    7d70:	9a 83       	std	Y+2, r25	; 0x02
    7d72:	89 83       	std	Y+1, r24	; 0x01
    7d74:	7c 83       	std	Y+4, r23	; 0x04
    7d76:	6b 83       	std	Y+3, r22	; 0x03
	unsigned short k = 0;
    7d78:	1e 82       	std	Y+6, r1	; 0x06
    7d7a:	1d 82       	std	Y+5, r1	; 0x05


	while (k < PAGE_USER_AREA)
    7d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    7d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    7d80:	22 e0       	ldi	r18, 0x02	; 2
    7d82:	80 30       	cpi	r24, 0x00	; 0
    7d84:	92 07       	cpc	r25, r18
    7d86:	a0 f4       	brcc	.+40     	; 0x7db0 <AT45GetPage+0x54>
	{
		*buf++ = spiReadByte();
    7d88:	0e 94 5b 2e 	call	0x5cb6 <spiReadByte>
    7d8c:	28 2f       	mov	r18, r24
    7d8e:	de 01       	movw	r26, r28
    7d90:	13 96       	adiw	r26, 0x03	; 3
    7d92:	8d 91       	ld	r24, X+
    7d94:	9c 91       	ld	r25, X
    7d96:	11 97       	sbiw	r26, 0x01	; 1
    7d98:	fc 01       	movw	r30, r24
    7d9a:	20 83       	st	Z, r18
    7d9c:	01 96       	adiw	r24, 0x01	; 1
    7d9e:	11 96       	adiw	r26, 0x01	; 1
    7da0:	9c 93       	st	X, r25
    7da2:	8e 93       	st	-X, r24
		k++;
    7da4:	8d 81       	ldd	r24, Y+5	; 0x05
    7da6:	9e 81       	ldd	r25, Y+6	; 0x06
    7da8:	01 96       	adiw	r24, 0x01	; 1
    7daa:	9e 83       	std	Y+6, r25	; 0x06
    7dac:	8d 83       	std	Y+5, r24	; 0x05
    7dae:	e6 cf       	rjmp	.-52     	; 0x7d7c <AT45GetPage+0x20>
	}

    UNSELECT_AT45;
    7db0:	80 91 38 00 	lds	r24, 0x0038
    7db4:	80 61       	ori	r24, 0x10	; 16
    7db6:	80 93 38 00 	sts	0x0038, r24
    7dba:	26 96       	adiw	r28, 0x06	; 6
    7dbc:	0f b6       	in	r0, 0x3f	; 63
    7dbe:	f8 94       	cli
    7dc0:	de bf       	out	0x3e, r29	; 62
    7dc2:	0f be       	out	0x3f, r0	; 63
    7dc4:	cd bf       	out	0x3d, r28	; 61
    7dc6:	df 91       	pop	r29
    7dc8:	cf 91       	pop	r28
    7dca:	08 95       	ret

00007dcc <AT45WriteThroughBuffer>:
}

void AT45WriteThroughBuffer(unsigned short pageno, unsigned char b)
{
    7dcc:	cf 93       	push	r28
    7dce:	df 93       	push	r29
    7dd0:	cd b7       	in	r28, 0x3d	; 61
    7dd2:	de b7       	in	r29, 0x3e	; 62
    7dd4:	23 97       	sbiw	r28, 0x03	; 3
    7dd6:	0f b6       	in	r0, 0x3f	; 63
    7dd8:	f8 94       	cli
    7dda:	de bf       	out	0x3e, r29	; 62
    7ddc:	0f be       	out	0x3f, r0	; 63
    7dde:	cd bf       	out	0x3d, r28	; 61
    7de0:	9a 83       	std	Y+2, r25	; 0x02
    7de2:	89 83       	std	Y+1, r24	; 0x01
    7de4:	6b 83       	std	Y+3, r22	; 0x03
	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7de6:	80 91 21 00 	lds	r24, 0x0021
    7dea:	99 27       	eor	r25, r25
    7dec:	84 70       	andi	r24, 0x04	; 4
    7dee:	90 70       	andi	r25, 0x00	; 0
    7df0:	00 97       	sbiw	r24, 0x00	; 0
    7df2:	09 f4       	brne	.+2      	; 0x7df6 <AT45WriteThroughBuffer+0x2a>
    7df4:	f8 cf       	rjmp	.-16     	; 0x7de6 <AT45WriteThroughBuffer+0x1a>

	UNSELECT_AT45;
    7df6:	80 91 38 00 	lds	r24, 0x0038
    7dfa:	80 61       	ori	r24, 0x10	; 16
    7dfc:	80 93 38 00 	sts	0x0038, r24
    SELECT_AT45;
    7e00:	80 91 38 00 	lds	r24, 0x0038
    7e04:	8f 7e       	andi	r24, 0xEF	; 239
    7e06:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(MM_PAGE_PROG_THROUGH_B1);			//  0x68
    7e0a:	82 e8       	ldi	r24, 0x82	; 130
    7e0c:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pageno >> 6));
    7e10:	89 81       	ldd	r24, Y+1	; 0x01
    7e12:	9a 81       	ldd	r25, Y+2	; 0x02
    7e14:	00 24       	eor	r0, r0
    7e16:	88 0f       	add	r24, r24
    7e18:	99 1f       	adc	r25, r25
    7e1a:	00 1c       	adc	r0, r0
    7e1c:	88 0f       	add	r24, r24
    7e1e:	99 1f       	adc	r25, r25
    7e20:	00 1c       	adc	r0, r0
    7e22:	89 2f       	mov	r24, r25
    7e24:	90 2d       	mov	r25, r0
    7e26:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte((char)(pageno << 2));
    7e2a:	89 81       	ldd	r24, Y+1	; 0x01
    7e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e2e:	88 0f       	add	r24, r24
    7e30:	99 1f       	adc	r25, r25
    7e32:	88 0f       	add	r24, r24
    7e34:	99 1f       	adc	r25, r25
    7e36:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0x04);						//  с нулевого байта
    7e3a:	84 e0       	ldi	r24, 0x04	; 4
    7e3c:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(b);
    7e40:	8b 81       	ldd	r24, Y+3	; 0x03
    7e42:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	UNSELECT_AT45;
    7e46:	80 91 38 00 	lds	r24, 0x0038
    7e4a:	80 61       	ori	r24, 0x10	; 16
    7e4c:	80 93 38 00 	sts	0x0038, r24
    7e50:	23 96       	adiw	r28, 0x03	; 3
    7e52:	0f b6       	in	r0, 0x3f	; 63
    7e54:	f8 94       	cli
    7e56:	de bf       	out	0x3e, r29	; 62
    7e58:	0f be       	out	0x3f, r0	; 63
    7e5a:	cd bf       	out	0x3d, r28	; 61
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	08 95       	ret

00007e62 <AT45WriteWordToPage>:
}

//  изменение произвольного слова в странице
char AT45WriteWordToPage(unsigned short pageno,
					unsigned char wordno, unsigned short w) //  что лучше - short или << 1
{
    7e62:	cf 93       	push	r28
    7e64:	df 93       	push	r29
    7e66:	cd b7       	in	r28, 0x3d	; 61
    7e68:	de b7       	in	r29, 0x3e	; 62
    7e6a:	25 97       	sbiw	r28, 0x05	; 5
    7e6c:	0f b6       	in	r0, 0x3f	; 63
    7e6e:	f8 94       	cli
    7e70:	de bf       	out	0x3e, r29	; 62
    7e72:	0f be       	out	0x3f, r0	; 63
    7e74:	cd bf       	out	0x3d, r28	; 61
    7e76:	9a 83       	std	Y+2, r25	; 0x02
    7e78:	89 83       	std	Y+1, r24	; 0x01
    7e7a:	6b 83       	std	Y+3, r22	; 0x03
    7e7c:	5d 83       	std	Y+5, r21	; 0x05
    7e7e:	4c 83       	std	Y+4, r20	; 0x04
	AT45ReadPageToBuffer(0, pageno);
    7e80:	69 81       	ldd	r22, Y+1	; 0x01
    7e82:	7a 81       	ldd	r23, Y+2	; 0x02
    7e84:	80 e0       	ldi	r24, 0x00	; 0
    7e86:	0e 94 8b 3c 	call	0x7916 <AT45ReadPageToBuffer>

	wBufPos[0] = wordno << 1;
    7e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    7e8c:	99 27       	eor	r25, r25
    7e8e:	88 0f       	add	r24, r24
    7e90:	99 1f       	adc	r25, r25
    7e92:	90 93 6a 06 	sts	0x066A, r25
    7e96:	80 93 69 06 	sts	0x0669, r24
	AT45WriteByteToBuffer(0, w & 0xFF);
    7e9a:	6c 81       	ldd	r22, Y+4	; 0x04
    7e9c:	80 e0       	ldi	r24, 0x00	; 0
    7e9e:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>
	AT45WriteByteToBuffer(0, w >> 8);
    7ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    7ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    7ea6:	89 2f       	mov	r24, r25
    7ea8:	99 27       	eor	r25, r25
    7eaa:	68 2f       	mov	r22, r24
    7eac:	80 e0       	ldi	r24, 0x00	; 0
    7eae:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>

	AT45WriteBufferToPage(0, pageno);
    7eb2:	69 81       	ldd	r22, Y+1	; 0x01
    7eb4:	7a 81       	ldd	r23, Y+2	; 0x02
    7eb6:	80 e0       	ldi	r24, 0x00	; 0
    7eb8:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>

	return 1;
    7ebc:	81 e0       	ldi	r24, 0x01	; 1
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	25 96       	adiw	r28, 0x05	; 5
    7ec2:	0f b6       	in	r0, 0x3f	; 63
    7ec4:	f8 94       	cli
    7ec6:	de bf       	out	0x3e, r29	; 62
    7ec8:	0f be       	out	0x3f, r0	; 63
    7eca:	cd bf       	out	0x3d, r28	; 61
    7ecc:	df 91       	pop	r29
    7ece:	cf 91       	pop	r28
    7ed0:	08 95       	ret

00007ed2 <AT45WriteByteToPage>:
}

//  изменение произвольного слова в странице
void AT45WriteByteToPage(unsigned short pageno,
					unsigned short byteno, unsigned char b)
{
    7ed2:	cf 93       	push	r28
    7ed4:	df 93       	push	r29
    7ed6:	cd b7       	in	r28, 0x3d	; 61
    7ed8:	de b7       	in	r29, 0x3e	; 62
    7eda:	25 97       	sbiw	r28, 0x05	; 5
    7edc:	0f b6       	in	r0, 0x3f	; 63
    7ede:	f8 94       	cli
    7ee0:	de bf       	out	0x3e, r29	; 62
    7ee2:	0f be       	out	0x3f, r0	; 63
    7ee4:	cd bf       	out	0x3d, r28	; 61
    7ee6:	9a 83       	std	Y+2, r25	; 0x02
    7ee8:	89 83       	std	Y+1, r24	; 0x01
    7eea:	7c 83       	std	Y+4, r23	; 0x04
    7eec:	6b 83       	std	Y+3, r22	; 0x03
    7eee:	4d 83       	std	Y+5, r20	; 0x05
	AT45ReadPageToBuffer(0, pageno);
    7ef0:	69 81       	ldd	r22, Y+1	; 0x01
    7ef2:	7a 81       	ldd	r23, Y+2	; 0x02
    7ef4:	80 e0       	ldi	r24, 0x00	; 0
    7ef6:	0e 94 8b 3c 	call	0x7916 <AT45ReadPageToBuffer>

	wBufPos[0] = byteno;
    7efa:	8b 81       	ldd	r24, Y+3	; 0x03
    7efc:	9c 81       	ldd	r25, Y+4	; 0x04
    7efe:	90 93 6a 06 	sts	0x066A, r25
    7f02:	80 93 69 06 	sts	0x0669, r24
	AT45WriteByteToBuffer(0, b);
    7f06:	6d 81       	ldd	r22, Y+5	; 0x05
    7f08:	80 e0       	ldi	r24, 0x00	; 0
    7f0a:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>

	AT45WriteBufferToPage(0, pageno);
    7f0e:	69 81       	ldd	r22, Y+1	; 0x01
    7f10:	7a 81       	ldd	r23, Y+2	; 0x02
    7f12:	80 e0       	ldi	r24, 0x00	; 0
    7f14:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>
    7f18:	25 96       	adiw	r28, 0x05	; 5
    7f1a:	0f b6       	in	r0, 0x3f	; 63
    7f1c:	f8 94       	cli
    7f1e:	de bf       	out	0x3e, r29	; 62
    7f20:	0f be       	out	0x3f, r0	; 63
    7f22:	cd bf       	out	0x3d, r28	; 61
    7f24:	df 91       	pop	r29
    7f26:	cf 91       	pop	r28
    7f28:	08 95       	ret

00007f2a <AT45ReadPage>:
}

void AT45ReadPage(unsigned short pageno, unsigned char* pBuf)
{
    7f2a:	cf 93       	push	r28
    7f2c:	df 93       	push	r29
    7f2e:	cd b7       	in	r28, 0x3d	; 61
    7f30:	de b7       	in	r29, 0x3e	; 62
    7f32:	26 97       	sbiw	r28, 0x06	; 6
    7f34:	0f b6       	in	r0, 0x3f	; 63
    7f36:	f8 94       	cli
    7f38:	de bf       	out	0x3e, r29	; 62
    7f3a:	0f be       	out	0x3f, r0	; 63
    7f3c:	cd bf       	out	0x3d, r28	; 61
    7f3e:	9a 83       	std	Y+2, r25	; 0x02
    7f40:	89 83       	std	Y+1, r24	; 0x01
    7f42:	7c 83       	std	Y+4, r23	; 0x04
    7f44:	6b 83       	std	Y+3, r22	; 0x03
	unsigned short k = 0;
    7f46:	1e 82       	std	Y+6, r1	; 0x06
    7f48:	1d 82       	std	Y+5, r1	; 0x05

	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    7f4a:	80 91 21 00 	lds	r24, 0x0021
    7f4e:	99 27       	eor	r25, r25
    7f50:	84 70       	andi	r24, 0x04	; 4
    7f52:	90 70       	andi	r25, 0x00	; 0
    7f54:	00 97       	sbiw	r24, 0x00	; 0
    7f56:	09 f4       	brne	.+2      	; 0x7f5a <AT45ReadPage+0x30>
    7f58:	f8 cf       	rjmp	.-16     	; 0x7f4a <AT45ReadPage+0x20>

	UNSELECT_AT45;
    7f5a:	80 91 38 00 	lds	r24, 0x0038
    7f5e:	80 61       	ori	r24, 0x10	; 16
    7f60:	80 93 38 00 	sts	0x0038, r24
    SELECT_AT45;
    7f64:	80 91 38 00 	lds	r24, 0x0038
    7f68:	8f 7e       	andi	r24, 0xEF	; 239
    7f6a:	80 93 38 00 	sts	0x0038, r24

	spiWriteByte(MAIN_MEMORY_PAGE_READ);		//  0x52
    7f6e:	82 e5       	ldi	r24, 0x52	; 82
    7f70:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pageno >> 6));
    7f74:	89 81       	ldd	r24, Y+1	; 0x01
    7f76:	9a 81       	ldd	r25, Y+2	; 0x02
    7f78:	00 24       	eor	r0, r0
    7f7a:	88 0f       	add	r24, r24
    7f7c:	99 1f       	adc	r25, r25
    7f7e:	00 1c       	adc	r0, r0
    7f80:	88 0f       	add	r24, r24
    7f82:	99 1f       	adc	r25, r25
    7f84:	00 1c       	adc	r0, r0
    7f86:	89 2f       	mov	r24, r25
    7f88:	90 2d       	mov	r25, r0
    7f8a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte((char)(pageno << 2) );
    7f8e:	89 81       	ldd	r24, Y+1	; 0x01
    7f90:	9a 81       	ldd	r25, Y+2	; 0x02
    7f92:	88 0f       	add	r24, r24
    7f94:	99 1f       	adc	r25, r25
    7f96:	88 0f       	add	r24, r24
    7f98:	99 1f       	adc	r25, r25
    7f9a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0);
    7f9e:	80 e0       	ldi	r24, 0x00	; 0
    7fa0:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(0xFF);
    7fa4:	8f ef       	ldi	r24, 0xFF	; 255
    7fa6:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7faa:	8f ef       	ldi	r24, 0xFF	; 255
    7fac:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7fb0:	8f ef       	ldi	r24, 0xFF	; 255
    7fb2:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
	spiWriteByte(0xFF);
    7fb6:	8f ef       	ldi	r24, 0xFF	; 255
    7fb8:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	while (k < PAGE_USER_AREA)
    7fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    7fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    7fc0:	22 e0       	ldi	r18, 0x02	; 2
    7fc2:	80 30       	cpi	r24, 0x00	; 0
    7fc4:	92 07       	cpc	r25, r18
    7fc6:	a0 f4       	brcc	.+40     	; 0x7ff0 <AT45ReadPage+0xc6>
	{
		*pBuf++ = spiReadByte();
    7fc8:	0e 94 5b 2e 	call	0x5cb6 <spiReadByte>
    7fcc:	28 2f       	mov	r18, r24
    7fce:	de 01       	movw	r26, r28
    7fd0:	13 96       	adiw	r26, 0x03	; 3
    7fd2:	8d 91       	ld	r24, X+
    7fd4:	9c 91       	ld	r25, X
    7fd6:	11 97       	sbiw	r26, 0x01	; 1
    7fd8:	fc 01       	movw	r30, r24
    7fda:	20 83       	st	Z, r18
    7fdc:	01 96       	adiw	r24, 0x01	; 1
    7fde:	11 96       	adiw	r26, 0x01	; 1
    7fe0:	9c 93       	st	X, r25
    7fe2:	8e 93       	st	-X, r24
		k++;
    7fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    7fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    7fe8:	01 96       	adiw	r24, 0x01	; 1
    7fea:	9e 83       	std	Y+6, r25	; 0x06
    7fec:	8d 83       	std	Y+5, r24	; 0x05
    7fee:	e6 cf       	rjmp	.-52     	; 0x7fbc <AT45ReadPage+0x92>
	}

	UNSELECT_AT45;
    7ff0:	80 91 38 00 	lds	r24, 0x0038
    7ff4:	80 61       	ori	r24, 0x10	; 16
    7ff6:	80 93 38 00 	sts	0x0038, r24
    7ffa:	26 96       	adiw	r28, 0x06	; 6
    7ffc:	0f b6       	in	r0, 0x3f	; 63
    7ffe:	f8 94       	cli
    8000:	de bf       	out	0x3e, r29	; 62
    8002:	0f be       	out	0x3f, r0	; 63
    8004:	cd bf       	out	0x3d, r28	; 61
    8006:	df 91       	pop	r29
    8008:	cf 91       	pop	r28
    800a:	08 95       	ret

0000800c <AT45WriteBuffer>:
}

void AT45WriteBuffer(unsigned char* pBuf)
{
    800c:	cf 93       	push	r28
    800e:	df 93       	push	r29
    8010:	cd b7       	in	r28, 0x3d	; 61
    8012:	de b7       	in	r29, 0x3e	; 62
    8014:	24 97       	sbiw	r28, 0x04	; 4
    8016:	0f b6       	in	r0, 0x3f	; 63
    8018:	f8 94       	cli
    801a:	de bf       	out	0x3e, r29	; 62
    801c:	0f be       	out	0x3f, r0	; 63
    801e:	cd bf       	out	0x3d, r28	; 61
    8020:	9a 83       	std	Y+2, r25	; 0x02
    8022:	89 83       	std	Y+1, r24	; 0x01
	unsigned short k = 0;
    8024:	1c 82       	std	Y+4, r1	; 0x04
    8026:	1b 82       	std	Y+3, r1	; 0x03

	while(!(AT45_PORT_IN & _BV(BUSY_PIN)));
    8028:	80 91 21 00 	lds	r24, 0x0021
    802c:	99 27       	eor	r25, r25
    802e:	84 70       	andi	r24, 0x04	; 4
    8030:	90 70       	andi	r25, 0x00	; 0
    8032:	00 97       	sbiw	r24, 0x00	; 0
    8034:	09 f4       	brne	.+2      	; 0x8038 <AT45WriteBuffer+0x2c>
    8036:	f8 cf       	rjmp	.-16     	; 0x8028 <AT45WriteBuffer+0x1c>

	UNSELECT_AT45;
    8038:	80 91 38 00 	lds	r24, 0x0038
    803c:	80 61       	ori	r24, 0x10	; 16
    803e:	80 93 38 00 	sts	0x0038, r24
	SELECT_AT45;
    8042:	80 91 38 00 	lds	r24, 0x0038
    8046:	8f 7e       	andi	r24, 0xEF	; 239
    8048:	80 93 38 00 	sts	0x0038, r24

    spiWriteByte(BUFFER_1_WRITE);	//  0x84
    804c:	84 e8       	ldi	r24, 0x84	; 132
    804e:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	spiWriteByte(0x00);
    8052:	80 e0       	ldi	r24, 0x00	; 0
    8054:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0);
    8058:	80 e0       	ldi	r24, 0x00	; 0
    805a:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
    spiWriteByte(0);
    805e:	80 e0       	ldi	r24, 0x00	; 0
    8060:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>

	while (k < PAGE_USER_AREA)
    8064:	8b 81       	ldd	r24, Y+3	; 0x03
    8066:	9c 81       	ldd	r25, Y+4	; 0x04
    8068:	22 e0       	ldi	r18, 0x02	; 2
    806a:	80 30       	cpi	r24, 0x00	; 0
    806c:	92 07       	cpc	r25, r18
    806e:	70 f4       	brcc	.+28     	; 0x808c <AT45WriteBuffer+0x80>
	{
		spiWriteByte(*pBuf++);
    8070:	e9 81       	ldd	r30, Y+1	; 0x01
    8072:	fa 81       	ldd	r31, Y+2	; 0x02
    8074:	80 81       	ld	r24, Z
    8076:	31 96       	adiw	r30, 0x01	; 1
    8078:	fa 83       	std	Y+2, r31	; 0x02
    807a:	e9 83       	std	Y+1, r30	; 0x01
    807c:	0e 94 3f 2e 	call	0x5c7e <spiWriteByte>
		k++;
    8080:	8b 81       	ldd	r24, Y+3	; 0x03
    8082:	9c 81       	ldd	r25, Y+4	; 0x04
    8084:	01 96       	adiw	r24, 0x01	; 1
    8086:	9c 83       	std	Y+4, r25	; 0x04
    8088:	8b 83       	std	Y+3, r24	; 0x03
    808a:	ec cf       	rjmp	.-40     	; 0x8064 <AT45WriteBuffer+0x58>
	}

    UNSELECT_AT45;
    808c:	80 91 38 00 	lds	r24, 0x0038
    8090:	80 61       	ori	r24, 0x10	; 16
    8092:	80 93 38 00 	sts	0x0038, r24
    8096:	24 96       	adiw	r28, 0x04	; 4
    8098:	0f b6       	in	r0, 0x3f	; 63
    809a:	f8 94       	cli
    809c:	de bf       	out	0x3e, r29	; 62
    809e:	0f be       	out	0x3f, r0	; 63
    80a0:	cd bf       	out	0x3d, r28	; 61
    80a2:	df 91       	pop	r29
    80a4:	cf 91       	pop	r28
    80a6:	08 95       	ret

000080a8 <fatxInit>:
//  флешки зарезервированы 16(с нулевой по пятнадцатую) из них - FAT,
//  шестнадцатая - RootDir, остальные 23 - резерв

char fatxInit()
{
    80a8:	cf 93       	push	r28
    80aa:	df 93       	push	r29
    80ac:	cd b7       	in	r28, 0x3d	; 61
    80ae:	de b7       	in	r29, 0x3e	; 62
	AT45GetPage(FAT_SIZE, (unsigned char*)&rootdir);
    80b0:	6d e0       	ldi	r22, 0x0D	; 13
    80b2:	7a e0       	ldi	r23, 0x0A	; 10
    80b4:	80 e1       	ldi	r24, 0x10	; 16
    80b6:	90 e0       	ldi	r25, 0x00	; 0
    80b8:	0e 94 ae 3e 	call	0x7d5c <AT45GetPage>
	cur_file.fileno = 0xFFFF;							//  нет открытого файла
    80bc:	8f ef       	ldi	r24, 0xFF	; 255
    80be:	9f ef       	ldi	r25, 0xFF	; 255
    80c0:	90 93 fe 07 	sts	0x07FE, r25
    80c4:	80 93 fd 07 	sts	0x07FD, r24

/*	short k;
	for (k = 0; k < 40; k++)
		rootdir[k] = k;
*/
	return 1;
    80c8:	81 e0       	ldi	r24, 0x01	; 1
    80ca:	90 e0       	ldi	r25, 0x00	; 0
    80cc:	df 91       	pop	r29
    80ce:	cf 91       	pop	r28
    80d0:	08 95       	ret

000080d2 <fatxGetFAT>:
}

//  index - номер страницы или номер слова, которое соответствует своей странице
unsigned short fatxGetFAT(unsigned short index)
{
    80d2:	0f 93       	push	r16
    80d4:	1f 93       	push	r17
    80d6:	cf 93       	push	r28
    80d8:	df 93       	push	r29
    80da:	cd b7       	in	r28, 0x3d	; 61
    80dc:	de b7       	in	r29, 0x3e	; 62
    80de:	28 97       	sbiw	r28, 0x08	; 8
    80e0:	0f b6       	in	r0, 0x3f	; 63
    80e2:	f8 94       	cli
    80e4:	de bf       	out	0x3e, r29	; 62
    80e6:	0f be       	out	0x3f, r0	; 63
    80e8:	cd bf       	out	0x3d, r28	; 61
    80ea:	9a 83       	std	Y+2, r25	; 0x02
    80ec:	89 83       	std	Y+1, r24	; 0x01
	unsigned short pageno, byteno, res;

	pageno = index / FILE_ENTRY_IN_PAGE;
    80ee:	89 81       	ldd	r24, Y+1	; 0x01
    80f0:	9a 81       	ldd	r25, Y+2	; 0x02
    80f2:	89 2f       	mov	r24, r25
    80f4:	99 27       	eor	r25, r25
    80f6:	9c 83       	std	Y+4, r25	; 0x04
    80f8:	8b 83       	std	Y+3, r24	; 0x03
	byteno = (index % FILE_ENTRY_IN_PAGE) << 1;
    80fa:	89 81       	ldd	r24, Y+1	; 0x01
    80fc:	9a 81       	ldd	r25, Y+2	; 0x02
    80fe:	90 70       	andi	r25, 0x00	; 0
    8100:	88 0f       	add	r24, r24
    8102:	99 1f       	adc	r25, r25
    8104:	9e 83       	std	Y+6, r25	; 0x06
    8106:	8d 83       	std	Y+5, r24	; 0x05

	res = AT45ReadByteFromPage(pageno, byteno) + 
    8108:	6d 81       	ldd	r22, Y+5	; 0x05
    810a:	7e 81       	ldd	r23, Y+6	; 0x06
    810c:	8b 81       	ldd	r24, Y+3	; 0x03
    810e:	9c 81       	ldd	r25, Y+4	; 0x04
    8110:	0e 94 42 3d 	call	0x7a84 <AT45ReadByteFromPage>
    8114:	08 2f       	mov	r16, r24
    8116:	11 27       	eor	r17, r17
    8118:	8d 81       	ldd	r24, Y+5	; 0x05
    811a:	9e 81       	ldd	r25, Y+6	; 0x06
    811c:	01 96       	adiw	r24, 0x01	; 1
    811e:	bc 01       	movw	r22, r24
    8120:	8b 81       	ldd	r24, Y+3	; 0x03
    8122:	9c 81       	ldd	r25, Y+4	; 0x04
    8124:	0e 94 42 3d 	call	0x7a84 <AT45ReadByteFromPage>
    8128:	99 27       	eor	r25, r25
    812a:	98 2f       	mov	r25, r24
    812c:	88 27       	eor	r24, r24
    812e:	80 0f       	add	r24, r16
    8130:	91 1f       	adc	r25, r17
    8132:	98 87       	std	Y+8, r25	; 0x08
    8134:	8f 83       	std	Y+7, r24	; 0x07
			(AT45ReadByteFromPage(pageno, byteno + 1) << 8);

	return res;
    8136:	8f 81       	ldd	r24, Y+7	; 0x07
    8138:	98 85       	ldd	r25, Y+8	; 0x08
    813a:	28 96       	adiw	r28, 0x08	; 8
    813c:	0f b6       	in	r0, 0x3f	; 63
    813e:	f8 94       	cli
    8140:	de bf       	out	0x3e, r29	; 62
    8142:	0f be       	out	0x3f, r0	; 63
    8144:	cd bf       	out	0x3d, r28	; 61
    8146:	df 91       	pop	r29
    8148:	cf 91       	pop	r28
    814a:	1f 91       	pop	r17
    814c:	0f 91       	pop	r16
    814e:	08 95       	ret

00008150 <fatxSetFAT>:
}

void fatxSetFAT(unsigned short index, unsigned short value)
{
    8150:	cf 93       	push	r28
    8152:	df 93       	push	r29
    8154:	cd b7       	in	r28, 0x3d	; 61
    8156:	de b7       	in	r29, 0x3e	; 62
    8158:	28 97       	sbiw	r28, 0x08	; 8
    815a:	0f b6       	in	r0, 0x3f	; 63
    815c:	f8 94       	cli
    815e:	de bf       	out	0x3e, r29	; 62
    8160:	0f be       	out	0x3f, r0	; 63
    8162:	cd bf       	out	0x3d, r28	; 61
    8164:	9a 83       	std	Y+2, r25	; 0x02
    8166:	89 83       	std	Y+1, r24	; 0x01
    8168:	7c 83       	std	Y+4, r23	; 0x04
    816a:	6b 83       	std	Y+3, r22	; 0x03
	unsigned short pageno = index / FILE_ENTRY_IN_PAGE;
    816c:	89 81       	ldd	r24, Y+1	; 0x01
    816e:	9a 81       	ldd	r25, Y+2	; 0x02
    8170:	89 2f       	mov	r24, r25
    8172:	99 27       	eor	r25, r25
    8174:	9e 83       	std	Y+6, r25	; 0x06
    8176:	8d 83       	std	Y+5, r24	; 0x05
	unsigned short wordno = index % FILE_ENTRY_IN_PAGE;
    8178:	89 81       	ldd	r24, Y+1	; 0x01
    817a:	9a 81       	ldd	r25, Y+2	; 0x02
    817c:	90 70       	andi	r25, 0x00	; 0
    817e:	98 87       	std	Y+8, r25	; 0x08
    8180:	8f 83       	std	Y+7, r24	; 0x07

	AT45WriteWordToPage(pageno, wordno, value);
    8182:	4b 81       	ldd	r20, Y+3	; 0x03
    8184:	5c 81       	ldd	r21, Y+4	; 0x04
    8186:	6f 81       	ldd	r22, Y+7	; 0x07
    8188:	8d 81       	ldd	r24, Y+5	; 0x05
    818a:	9e 81       	ldd	r25, Y+6	; 0x06
    818c:	0e 94 31 3f 	call	0x7e62 <AT45WriteWordToPage>
    8190:	28 96       	adiw	r28, 0x08	; 8
    8192:	0f b6       	in	r0, 0x3f	; 63
    8194:	f8 94       	cli
    8196:	de bf       	out	0x3e, r29	; 62
    8198:	0f be       	out	0x3f, r0	; 63
    819a:	cd bf       	out	0x3d, r28	; 61
    819c:	df 91       	pop	r29
    819e:	cf 91       	pop	r28
    81a0:	08 95       	ret

000081a2 <fatxGetEmptyPage>:
}

unsigned short fatxGetEmptyPage()
{
    81a2:	cf 93       	push	r28
    81a4:	df 93       	push	r29
    81a6:	cd b7       	in	r28, 0x3d	; 61
    81a8:	de b7       	in	r29, 0x3e	; 62
    81aa:	26 97       	sbiw	r28, 0x06	; 6
    81ac:	0f b6       	in	r0, 0x3f	; 63
    81ae:	f8 94       	cli
    81b0:	de bf       	out	0x3e, r29	; 62
    81b2:	0f be       	out	0x3f, r0	; 63
    81b4:	cd bf       	out	0x3d, r28	; 61
	unsigned short i, k;

	for (k = 0; k < FAT_SIZE; k++)
    81b6:	1c 82       	std	Y+4, r1	; 0x04
    81b8:	1b 82       	std	Y+3, r1	; 0x03
    81ba:	8b 81       	ldd	r24, Y+3	; 0x03
    81bc:	9c 81       	ldd	r25, Y+4	; 0x04
    81be:	80 31       	cpi	r24, 0x10	; 16
    81c0:	91 05       	cpc	r25, r1
    81c2:	08 f0       	brcs	.+2      	; 0x81c6 <fatxGetEmptyPage+0x24>
    81c4:	50 c0       	rjmp	.+160    	; 0x8266 <fatxGetEmptyPage+0xc4>
	{
		AT45GetPage(k, (unsigned char*)&cur_file.page);
    81c6:	6d e0       	ldi	r22, 0x0D	; 13
    81c8:	78 e0       	ldi	r23, 0x08	; 8
    81ca:	8b 81       	ldd	r24, Y+3	; 0x03
    81cc:	9c 81       	ldd	r25, Y+4	; 0x04
    81ce:	0e 94 ae 3e 	call	0x7d5c <AT45GetPage>
		for (i = 0; i < FILE_ENTRY_IN_PAGE; i++)
    81d2:	1a 82       	std	Y+2, r1	; 0x02
    81d4:	19 82       	std	Y+1, r1	; 0x01
    81d6:	89 81       	ldd	r24, Y+1	; 0x01
    81d8:	9a 81       	ldd	r25, Y+2	; 0x02
    81da:	8f 3f       	cpi	r24, 0xFF	; 255
    81dc:	91 05       	cpc	r25, r1
    81de:	09 f0       	breq	.+2      	; 0x81e2 <fatxGetEmptyPage+0x40>
    81e0:	e0 f5       	brcc	.+120    	; 0x825a <fatxGetEmptyPage+0xb8>
		{
			if (  !(pword)(&cur_file.page)[i] )
    81e2:	29 81       	ldd	r18, Y+1	; 0x01
    81e4:	3a 81       	ldd	r19, Y+2	; 0x02
    81e6:	80 e0       	ldi	r24, 0x00	; 0
    81e8:	92 e0       	ldi	r25, 0x02	; 2
    81ea:	28 9f       	mul	r18, r24
    81ec:	a0 01       	movw	r20, r0
    81ee:	29 9f       	mul	r18, r25
    81f0:	50 0d       	add	r21, r0
    81f2:	38 9f       	mul	r19, r24
    81f4:	50 0d       	add	r21, r0
    81f6:	11 24       	eor	r1, r1
    81f8:	ca 01       	movw	r24, r20
    81fa:	83 5f       	subi	r24, 0xF3	; 243
    81fc:	97 4f       	sbci	r25, 0xF7	; 247
    81fe:	00 97       	sbiw	r24, 0x00	; 0
    8200:	31 f5       	brne	.+76     	; 0x824e <fatxGetEmptyPage+0xac>
			{	//  нашли свободную страницу

				((pword)(&cur_file.page))[i] = LAST_PAGE_MARKER;//  последнияя страница файла
    8202:	29 81       	ldd	r18, Y+1	; 0x01
    8204:	3a 81       	ldd	r19, Y+2	; 0x02
    8206:	c9 01       	movw	r24, r18
    8208:	82 0f       	add	r24, r18
    820a:	93 1f       	adc	r25, r19
    820c:	fc 01       	movw	r30, r24
    820e:	e3 5f       	subi	r30, 0xF3	; 243
    8210:	f7 4f       	sbci	r31, 0xF7	; 247
    8212:	8f ef       	ldi	r24, 0xFF	; 255
    8214:	9f ef       	ldi	r25, 0xFF	; 255
    8216:	91 83       	std	Z+1, r25	; 0x01
    8218:	80 83       	st	Z, r24
				// TODO Cash last page need 

				AT45WriteWordToPage(k, i, LAST_PAGE_MARKER);
    821a:	4f ef       	ldi	r20, 0xFF	; 255
    821c:	5f ef       	ldi	r21, 0xFF	; 255
    821e:	69 81       	ldd	r22, Y+1	; 0x01
    8220:	8b 81       	ldd	r24, Y+3	; 0x03
    8222:	9c 81       	ldd	r25, Y+4	; 0x04
    8224:	0e 94 31 3f 	call	0x7e62 <AT45WriteWordToPage>
			
				return k * FILE_ENTRY_IN_PAGE + i;
    8228:	2b 81       	ldd	r18, Y+3	; 0x03
    822a:	3c 81       	ldd	r19, Y+4	; 0x04
    822c:	80 e0       	ldi	r24, 0x00	; 0
    822e:	91 e0       	ldi	r25, 0x01	; 1
    8230:	28 9f       	mul	r18, r24
    8232:	a0 01       	movw	r20, r0
    8234:	29 9f       	mul	r18, r25
    8236:	50 0d       	add	r21, r0
    8238:	38 9f       	mul	r19, r24
    823a:	50 0d       	add	r21, r0
    823c:	11 24       	eor	r1, r1
    823e:	ca 01       	movw	r24, r20
    8240:	29 81       	ldd	r18, Y+1	; 0x01
    8242:	3a 81       	ldd	r19, Y+2	; 0x02
    8244:	82 0f       	add	r24, r18
    8246:	93 1f       	adc	r25, r19
    8248:	9e 83       	std	Y+6, r25	; 0x06
    824a:	8d 83       	std	Y+5, r24	; 0x05
    824c:	0e c0       	rjmp	.+28     	; 0x826a <fatxGetEmptyPage+0xc8>
    824e:	89 81       	ldd	r24, Y+1	; 0x01
    8250:	9a 81       	ldd	r25, Y+2	; 0x02
    8252:	01 96       	adiw	r24, 0x01	; 1
    8254:	9a 83       	std	Y+2, r25	; 0x02
    8256:	89 83       	std	Y+1, r24	; 0x01
    8258:	be cf       	rjmp	.-132    	; 0x81d6 <fatxGetEmptyPage+0x34>
    825a:	8b 81       	ldd	r24, Y+3	; 0x03
    825c:	9c 81       	ldd	r25, Y+4	; 0x04
    825e:	01 96       	adiw	r24, 0x01	; 1
    8260:	9c 83       	std	Y+4, r25	; 0x04
    8262:	8b 83       	std	Y+3, r24	; 0x03
    8264:	aa cf       	rjmp	.-172    	; 0x81ba <fatxGetEmptyPage+0x18>
			}
		}
	}

	return 0;
    8266:	1e 82       	std	Y+6, r1	; 0x06
    8268:	1d 82       	std	Y+5, r1	; 0x05
}
    826a:	8d 81       	ldd	r24, Y+5	; 0x05
    826c:	9e 81       	ldd	r25, Y+6	; 0x06
    826e:	26 96       	adiw	r28, 0x06	; 6
    8270:	0f b6       	in	r0, 0x3f	; 63
    8272:	f8 94       	cli
    8274:	de bf       	out	0x3e, r29	; 62
    8276:	0f be       	out	0x3f, r0	; 63
    8278:	cd bf       	out	0x3d, r28	; 61
    827a:	df 91       	pop	r29
    827c:	cf 91       	pop	r28
    827e:	08 95       	ret

00008280 <fatxCreateFile>:

unsigned char fatxCreateFile()
{
    8280:	cf 93       	push	r28
    8282:	df 93       	push	r29
    8284:	cd b7       	in	r28, 0x3d	; 61
    8286:	de b7       	in	r29, 0x3e	; 62
    8288:	28 97       	sbiw	r28, 0x08	; 8
    828a:	0f b6       	in	r0, 0x3f	; 63
    828c:	f8 94       	cli
    828e:	de bf       	out	0x3e, r29	; 62
    8290:	0f be       	out	0x3f, r0	; 63
    8292:	cd bf       	out	0x3d, r28	; 61
	unsigned short k, pageno;

	//  цикл по FileEntry в RootDir'e
	for (k = 0; k < FILE_ENTRY_IN_PAGE; k = k + 2)
    8294:	1a 82       	std	Y+2, r1	; 0x02
    8296:	19 82       	std	Y+1, r1	; 0x01
    8298:	89 81       	ldd	r24, Y+1	; 0x01
    829a:	9a 81       	ldd	r25, Y+2	; 0x02
    829c:	8f 3f       	cpi	r24, 0xFF	; 255
    829e:	91 05       	cpc	r25, r1
    82a0:	11 f0       	breq	.+4      	; 0x82a6 <fatxCreateFile+0x26>
    82a2:	08 f0       	brcs	.+2      	; 0x82a6 <fatxCreateFile+0x26>
    82a4:	44 c0       	rjmp	.+136    	; 0x832e <fatxCreateFile+0xae>
	{
		if (!rootdir[k])
    82a6:	29 81       	ldd	r18, Y+1	; 0x01
    82a8:	3a 81       	ldd	r19, Y+2	; 0x02
    82aa:	c9 01       	movw	r24, r18
    82ac:	82 0f       	add	r24, r18
    82ae:	93 1f       	adc	r25, r19
    82b0:	fc 01       	movw	r30, r24
    82b2:	e3 5f       	subi	r30, 0xF3	; 243
    82b4:	f5 4f       	sbci	r31, 0xF5	; 245
    82b6:	80 81       	ld	r24, Z
    82b8:	91 81       	ldd	r25, Z+1	; 0x01
    82ba:	00 97       	sbiw	r24, 0x00	; 0
    82bc:	91 f5       	brne	.+100    	; 0x8322 <fatxCreateFile+0xa2>
		{	//  пустое место для нового файла

			pageno = fatxGetEmptyPage();
    82be:	0e 94 d1 40 	call	0x81a2 <fatxGetEmptyPage>
    82c2:	9c 83       	std	Y+4, r25	; 0x04
    82c4:	8b 83       	std	Y+3, r24	; 0x03
			(*(PFILE_ENTRY)(&rootdir[k])).pageno = pageno;
    82c6:	29 81       	ldd	r18, Y+1	; 0x01
    82c8:	3a 81       	ldd	r19, Y+2	; 0x02
    82ca:	c9 01       	movw	r24, r18
    82cc:	82 0f       	add	r24, r18
    82ce:	93 1f       	adc	r25, r19
    82d0:	fc 01       	movw	r30, r24
    82d2:	e3 5f       	subi	r30, 0xF3	; 243
    82d4:	f5 4f       	sbci	r31, 0xF5	; 245
    82d6:	8b 81       	ldd	r24, Y+3	; 0x03
    82d8:	9c 81       	ldd	r25, Y+4	; 0x04
    82da:	91 83       	std	Z+1, r25	; 0x01
    82dc:	80 83       	st	Z, r24
			(*(PFILE_ENTRY)(&rootdir[k])).size = 0;
    82de:	29 81       	ldd	r18, Y+1	; 0x01
    82e0:	3a 81       	ldd	r19, Y+2	; 0x02
    82e2:	c9 01       	movw	r24, r18
    82e4:	82 0f       	add	r24, r18
    82e6:	93 1f       	adc	r25, r19
    82e8:	fc 01       	movw	r30, r24
    82ea:	e3 5f       	subi	r30, 0xF3	; 243
    82ec:	f5 4f       	sbci	r31, 0xF5	; 245
    82ee:	13 82       	std	Z+3, r1	; 0x03
    82f0:	12 82       	std	Z+2, r1	; 0x02

			AT45WriteWordToPage(FAT_SIZE, k, pageno);
    82f2:	4b 81       	ldd	r20, Y+3	; 0x03
    82f4:	5c 81       	ldd	r21, Y+4	; 0x04
    82f6:	69 81       	ldd	r22, Y+1	; 0x01
    82f8:	80 e1       	ldi	r24, 0x10	; 16
    82fa:	90 e0       	ldi	r25, 0x00	; 0
    82fc:	0e 94 31 3f 	call	0x7e62 <AT45WriteWordToPage>

			return pageno ? k : 0;
    8300:	8b 81       	ldd	r24, Y+3	; 0x03
    8302:	9c 81       	ldd	r25, Y+4	; 0x04
    8304:	00 97       	sbiw	r24, 0x00	; 0
    8306:	31 f0       	breq	.+12     	; 0x8314 <fatxCreateFile+0x94>
    8308:	89 81       	ldd	r24, Y+1	; 0x01
    830a:	28 2f       	mov	r18, r24
    830c:	33 27       	eor	r19, r19
    830e:	38 87       	std	Y+8, r19	; 0x08
    8310:	2f 83       	std	Y+7, r18	; 0x07
    8312:	02 c0       	rjmp	.+4      	; 0x8318 <fatxCreateFile+0x98>
    8314:	18 86       	std	Y+8, r1	; 0x08
    8316:	1f 82       	std	Y+7, r1	; 0x07
    8318:	8f 81       	ldd	r24, Y+7	; 0x07
    831a:	98 85       	ldd	r25, Y+8	; 0x08
    831c:	9e 83       	std	Y+6, r25	; 0x06
    831e:	8d 83       	std	Y+5, r24	; 0x05
    8320:	0a c0       	rjmp	.+20     	; 0x8336 <fatxCreateFile+0xb6>
    8322:	89 81       	ldd	r24, Y+1	; 0x01
    8324:	9a 81       	ldd	r25, Y+2	; 0x02
    8326:	02 96       	adiw	r24, 0x02	; 2
    8328:	9a 83       	std	Y+2, r25	; 0x02
    832a:	89 83       	std	Y+1, r24	; 0x01
    832c:	b5 cf       	rjmp	.-150    	; 0x8298 <fatxCreateFile+0x18>
		}
	}

	return 0xFF;
    832e:	2f ef       	ldi	r18, 0xFF	; 255
    8330:	30 e0       	ldi	r19, 0x00	; 0
    8332:	3e 83       	std	Y+6, r19	; 0x06
    8334:	2d 83       	std	Y+5, r18	; 0x05
}
    8336:	8d 81       	ldd	r24, Y+5	; 0x05
    8338:	9e 81       	ldd	r25, Y+6	; 0x06
    833a:	28 96       	adiw	r28, 0x08	; 8
    833c:	0f b6       	in	r0, 0x3f	; 63
    833e:	f8 94       	cli
    8340:	de bf       	out	0x3e, r29	; 62
    8342:	0f be       	out	0x3f, r0	; 63
    8344:	cd bf       	out	0x3d, r28	; 61
    8346:	df 91       	pop	r29
    8348:	cf 91       	pop	r28
    834a:	08 95       	ret

0000834c <fatxDeleteFile>:

void fatxDeleteFile(unsigned char fileno)
{
    834c:	cf 93       	push	r28
    834e:	df 93       	push	r29
    8350:	cd b7       	in	r28, 0x3d	; 61
    8352:	de b7       	in	r29, 0x3e	; 62
    8354:	25 97       	sbiw	r28, 0x05	; 5
    8356:	0f b6       	in	r0, 0x3f	; 63
    8358:	f8 94       	cli
    835a:	de bf       	out	0x3e, r29	; 62
    835c:	0f be       	out	0x3f, r0	; 63
    835e:	cd bf       	out	0x3d, r28	; 61
    8360:	89 83       	std	Y+1, r24	; 0x01
	unsigned short marker = fileno << 1;
    8362:	89 81       	ldd	r24, Y+1	; 0x01
    8364:	99 27       	eor	r25, r25
    8366:	88 0f       	add	r24, r24
    8368:	99 1f       	adc	r25, r25
    836a:	9b 83       	std	Y+3, r25	; 0x03
    836c:	8a 83       	std	Y+2, r24	; 0x02

	//  получаем первую страницу, выделенную удаляемому файлу
	unsigned short pageno = (*(PFILE_ENTRY)(&rootdir[marker])).pageno;
    836e:	2a 81       	ldd	r18, Y+2	; 0x02
    8370:	3b 81       	ldd	r19, Y+3	; 0x03
    8372:	c9 01       	movw	r24, r18
    8374:	82 0f       	add	r24, r18
    8376:	93 1f       	adc	r25, r19
    8378:	fc 01       	movw	r30, r24
    837a:	e3 5f       	subi	r30, 0xF3	; 243
    837c:	f5 4f       	sbci	r31, 0xF5	; 245
    837e:	80 81       	ld	r24, Z
    8380:	91 81       	ldd	r25, Z+1	; 0x01
    8382:	9d 83       	std	Y+5, r25	; 0x05
    8384:	8c 83       	std	Y+4, r24	; 0x04

	if (!pageno)
    8386:	8c 81       	ldd	r24, Y+4	; 0x04
    8388:	9d 81       	ldd	r25, Y+5	; 0x05
    838a:	00 97       	sbiw	r24, 0x00	; 0
    838c:	09 f4       	brne	.+2      	; 0x8390 <fatxDeleteFile+0x44>
		return;					//  файла не существует
    838e:	3f c0       	rjmp	.+126    	; 0x840e <fatxDeleteFile+0xc2>

	//  обнуление FILE_ENTRY в RootDir
	rootdir[marker] = 0;
    8390:	2a 81       	ldd	r18, Y+2	; 0x02
    8392:	3b 81       	ldd	r19, Y+3	; 0x03
    8394:	c9 01       	movw	r24, r18
    8396:	82 0f       	add	r24, r18
    8398:	93 1f       	adc	r25, r19
    839a:	fc 01       	movw	r30, r24
    839c:	e3 5f       	subi	r30, 0xF3	; 243
    839e:	f5 4f       	sbci	r31, 0xF5	; 245
    83a0:	11 82       	std	Z+1, r1	; 0x01
    83a2:	10 82       	st	Z, r1
	rootdir[marker + 1] = 0;
    83a4:	2a 81       	ldd	r18, Y+2	; 0x02
    83a6:	3b 81       	ldd	r19, Y+3	; 0x03
    83a8:	c9 01       	movw	r24, r18
    83aa:	82 0f       	add	r24, r18
    83ac:	93 1f       	adc	r25, r19
    83ae:	fc 01       	movw	r30, r24
    83b0:	e1 5f       	subi	r30, 0xF1	; 241
    83b2:	f5 4f       	sbci	r31, 0xF5	; 245
    83b4:	11 82       	std	Z+1, r1	; 0x01
    83b6:	10 82       	st	Z, r1
	AT45WriteWordToPage(FAT_SIZE, marker, 0);
    83b8:	40 e0       	ldi	r20, 0x00	; 0
    83ba:	50 e0       	ldi	r21, 0x00	; 0
    83bc:	6a 81       	ldd	r22, Y+2	; 0x02
    83be:	80 e1       	ldi	r24, 0x10	; 16
    83c0:	90 e0       	ldi	r25, 0x00	; 0
    83c2:	0e 94 31 3f 	call	0x7e62 <AT45WriteWordToPage>
	AT45WriteWordToPage(FAT_SIZE, marker + 1, 0);
    83c6:	8a 81       	ldd	r24, Y+2	; 0x02
    83c8:	8f 5f       	subi	r24, 0xFF	; 255
    83ca:	40 e0       	ldi	r20, 0x00	; 0
    83cc:	50 e0       	ldi	r21, 0x00	; 0
    83ce:	68 2f       	mov	r22, r24
    83d0:	80 e1       	ldi	r24, 0x10	; 16
    83d2:	90 e0       	ldi	r25, 0x00	; 0
    83d4:	0e 94 31 3f 	call	0x7e62 <AT45WriteWordToPage>

	//  обнуление цепочки страниц в FATe

	marker = pageno;
    83d8:	8c 81       	ldd	r24, Y+4	; 0x04
    83da:	9d 81       	ldd	r25, Y+5	; 0x05
    83dc:	9b 83       	std	Y+3, r25	; 0x03
    83de:	8a 83       	std	Y+2, r24	; 0x02
	//  пройдемся по цепочке и отберем все страницы у файла
	while (marker != LAST_PAGE_MARKER)
    83e0:	8a 81       	ldd	r24, Y+2	; 0x02
    83e2:	9b 81       	ldd	r25, Y+3	; 0x03
    83e4:	2f ef       	ldi	r18, 0xFF	; 255
    83e6:	8f 3f       	cpi	r24, 0xFF	; 255
    83e8:	92 07       	cpc	r25, r18
    83ea:	89 f0       	breq	.+34     	; 0x840e <fatxDeleteFile+0xc2>
	{
		pageno = marker;
    83ec:	8a 81       	ldd	r24, Y+2	; 0x02
    83ee:	9b 81       	ldd	r25, Y+3	; 0x03
    83f0:	9d 83       	std	Y+5, r25	; 0x05
    83f2:	8c 83       	std	Y+4, r24	; 0x04
		marker = fatxGetFAT(pageno);
    83f4:	8c 81       	ldd	r24, Y+4	; 0x04
    83f6:	9d 81       	ldd	r25, Y+5	; 0x05
    83f8:	0e 94 69 40 	call	0x80d2 <fatxGetFAT>
    83fc:	9b 83       	std	Y+3, r25	; 0x03
    83fe:	8a 83       	std	Y+2, r24	; 0x02

		fatxSetFAT(pageno, EMPTY_PAGE_MARKER);
    8400:	60 e0       	ldi	r22, 0x00	; 0
    8402:	70 e0       	ldi	r23, 0x00	; 0
    8404:	8c 81       	ldd	r24, Y+4	; 0x04
    8406:	9d 81       	ldd	r25, Y+5	; 0x05
    8408:	0e 94 a8 40 	call	0x8150 <fatxSetFAT>
    840c:	e9 cf       	rjmp	.-46     	; 0x83e0 <fatxDeleteFile+0x94>
    840e:	25 96       	adiw	r28, 0x05	; 5
    8410:	0f b6       	in	r0, 0x3f	; 63
    8412:	f8 94       	cli
    8414:	de bf       	out	0x3e, r29	; 62
    8416:	0f be       	out	0x3f, r0	; 63
    8418:	cd bf       	out	0x3d, r28	; 61
    841a:	df 91       	pop	r29
    841c:	cf 91       	pop	r28
    841e:	08 95       	ret

00008420 <fatxAddPageToFile>:
	};
}

//  выделить файлу count страниц
unsigned short fatxAddPageToFile(unsigned char fileno, unsigned short count)
{
    8420:	cf 93       	push	r28
    8422:	df 93       	push	r29
    8424:	cd b7       	in	r28, 0x3d	; 61
    8426:	de b7       	in	r29, 0x3e	; 62
    8428:	2b 97       	sbiw	r28, 0x0b	; 11
    842a:	0f b6       	in	r0, 0x3f	; 63
    842c:	f8 94       	cli
    842e:	de bf       	out	0x3e, r29	; 62
    8430:	0f be       	out	0x3f, r0	; 63
    8432:	cd bf       	out	0x3d, r28	; 61
    8434:	89 83       	std	Y+1, r24	; 0x01
    8436:	7b 83       	std	Y+3, r23	; 0x03
    8438:	6a 83       	std	Y+2, r22	; 0x02
	//  получаем первую страницу файла
	unsigned short pageno = (*(PFILE_ENTRY)(&rootdir[fileno << 1])).pageno;
    843a:	89 81       	ldd	r24, Y+1	; 0x01
    843c:	99 27       	eor	r25, r25
    843e:	88 0f       	add	r24, r24
    8440:	99 1f       	adc	r25, r25
    8442:	88 0f       	add	r24, r24
    8444:	99 1f       	adc	r25, r25
    8446:	fc 01       	movw	r30, r24
    8448:	e3 5f       	subi	r30, 0xF3	; 243
    844a:	f5 4f       	sbci	r31, 0xF5	; 245
    844c:	80 81       	ld	r24, Z
    844e:	91 81       	ldd	r25, Z+1	; 0x01
    8450:	9d 83       	std	Y+5, r25	; 0x05
    8452:	8c 83       	std	Y+4, r24	; 0x04

	if (!pageno)
    8454:	8c 81       	ldd	r24, Y+4	; 0x04
    8456:	9d 81       	ldd	r25, Y+5	; 0x05
    8458:	00 97       	sbiw	r24, 0x00	; 0
    845a:	29 f4       	brne	.+10     	; 0x8466 <fatxAddPageToFile+0x46>
		return 0xFFFF;			//  файл не найден
    845c:	8f ef       	ldi	r24, 0xFF	; 255
    845e:	9f ef       	ldi	r25, 0xFF	; 255
    8460:	9b 87       	std	Y+11, r25	; 0x0b
    8462:	8a 87       	std	Y+10, r24	; 0x0a
    8464:	40 c0       	rjmp	.+128    	; 0x84e6 <fatxAddPageToFile+0xc6>

	//  находим последнюю страницу файла, на которой маркер конца цепочки	

	unsigned short newpage, marker;

	marker = pageno;
    8466:	8c 81       	ldd	r24, Y+4	; 0x04
    8468:	9d 81       	ldd	r25, Y+5	; 0x05
    846a:	99 87       	std	Y+9, r25	; 0x09
    846c:	88 87       	std	Y+8, r24	; 0x08
	while (marker != LAST_PAGE_MARKER)
    846e:	88 85       	ldd	r24, Y+8	; 0x08
    8470:	99 85       	ldd	r25, Y+9	; 0x09
    8472:	2f ef       	ldi	r18, 0xFF	; 255
    8474:	8f 3f       	cpi	r24, 0xFF	; 255
    8476:	92 07       	cpc	r25, r18
    8478:	59 f0       	breq	.+22     	; 0x8490 <fatxAddPageToFile+0x70>
	{
		pageno = marker;
    847a:	88 85       	ldd	r24, Y+8	; 0x08
    847c:	99 85       	ldd	r25, Y+9	; 0x09
    847e:	9d 83       	std	Y+5, r25	; 0x05
    8480:	8c 83       	std	Y+4, r24	; 0x04
		marker = fatxGetFAT(pageno);
    8482:	8c 81       	ldd	r24, Y+4	; 0x04
    8484:	9d 81       	ldd	r25, Y+5	; 0x05
    8486:	0e 94 69 40 	call	0x80d2 <fatxGetFAT>
    848a:	99 87       	std	Y+9, r25	; 0x09
    848c:	88 87       	std	Y+8, r24	; 0x08
    848e:	ef cf       	rjmp	.-34     	; 0x846e <fatxAddPageToFile+0x4e>
	}

	//  по выходу из цикла pageno - индекс в FATe последней страницы файла,
	//  содержащей маркер LAST_PAGE_MARKER

	while (count)
    8490:	8a 81       	ldd	r24, Y+2	; 0x02
    8492:	9b 81       	ldd	r25, Y+3	; 0x03
    8494:	00 97       	sbiw	r24, 0x00	; 0
    8496:	e9 f0       	breq	.+58     	; 0x84d2 <fatxAddPageToFile+0xb2>
	{
		newpage = fatxGetEmptyPage();
    8498:	0e 94 d1 40 	call	0x81a2 <fatxGetEmptyPage>
    849c:	9f 83       	std	Y+7, r25	; 0x07
    849e:	8e 83       	std	Y+6, r24	; 0x06

		if (!newpage)
    84a0:	8e 81       	ldd	r24, Y+6	; 0x06
    84a2:	9f 81       	ldd	r25, Y+7	; 0x07
    84a4:	00 97       	sbiw	r24, 0x00	; 0
    84a6:	29 f4       	brne	.+10     	; 0x84b2 <fatxAddPageToFile+0x92>
			return 0xFFFF;		//  все страницы разобраны...
    84a8:	8f ef       	ldi	r24, 0xFF	; 255
    84aa:	9f ef       	ldi	r25, 0xFF	; 255
    84ac:	9b 87       	std	Y+11, r25	; 0x0b
    84ae:	8a 87       	std	Y+10, r24	; 0x0a
    84b0:	1a c0       	rjmp	.+52     	; 0x84e6 <fatxAddPageToFile+0xc6>

		//  делаем предыдущюю страницу непоследней
		fatxSetFAT(pageno, newpage);
    84b2:	6e 81       	ldd	r22, Y+6	; 0x06
    84b4:	7f 81       	ldd	r23, Y+7	; 0x07
    84b6:	8c 81       	ldd	r24, Y+4	; 0x04
    84b8:	9d 81       	ldd	r25, Y+5	; 0x05
    84ba:	0e 94 a8 40 	call	0x8150 <fatxSetFAT>
		pageno = newpage;
    84be:	8e 81       	ldd	r24, Y+6	; 0x06
    84c0:	9f 81       	ldd	r25, Y+7	; 0x07
    84c2:	9d 83       	std	Y+5, r25	; 0x05
    84c4:	8c 83       	std	Y+4, r24	; 0x04
		count--;
    84c6:	8a 81       	ldd	r24, Y+2	; 0x02
    84c8:	9b 81       	ldd	r25, Y+3	; 0x03
    84ca:	01 97       	sbiw	r24, 0x01	; 1
    84cc:	9b 83       	std	Y+3, r25	; 0x03
    84ce:	8a 83       	std	Y+2, r24	; 0x02
    84d0:	df cf       	rjmp	.-66     	; 0x8490 <fatxAddPageToFile+0x70>
	}

	//  делаем свежевыделенную страницу последней
	fatxSetFAT(pageno, LAST_PAGE_MARKER);
    84d2:	6f ef       	ldi	r22, 0xFF	; 255
    84d4:	7f ef       	ldi	r23, 0xFF	; 255
    84d6:	8c 81       	ldd	r24, Y+4	; 0x04
    84d8:	9d 81       	ldd	r25, Y+5	; 0x05
    84da:	0e 94 a8 40 	call	0x8150 <fatxSetFAT>

	return count;
    84de:	8a 81       	ldd	r24, Y+2	; 0x02
    84e0:	9b 81       	ldd	r25, Y+3	; 0x03
    84e2:	9b 87       	std	Y+11, r25	; 0x0b
    84e4:	8a 87       	std	Y+10, r24	; 0x0a
}
    84e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    84e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    84ea:	2b 96       	adiw	r28, 0x0b	; 11
    84ec:	0f b6       	in	r0, 0x3f	; 63
    84ee:	f8 94       	cli
    84f0:	de bf       	out	0x3e, r29	; 62
    84f2:	0f be       	out	0x3f, r0	; 63
    84f4:	cd bf       	out	0x3d, r28	; 61
    84f6:	df 91       	pop	r29
    84f8:	cf 91       	pop	r28
    84fa:	08 95       	ret

000084fc <fatxGetFileCount>:

char fatxGetFileCount()
{
    84fc:	cf 93       	push	r28
    84fe:	df 93       	push	r29
    8500:	cd b7       	in	r28, 0x3d	; 61
    8502:	de b7       	in	r29, 0x3e	; 62
    8504:	23 97       	sbiw	r28, 0x03	; 3
    8506:	0f b6       	in	r0, 0x3f	; 63
    8508:	f8 94       	cli
    850a:	de bf       	out	0x3e, r29	; 62
    850c:	0f be       	out	0x3f, r0	; 63
    850e:	cd bf       	out	0x3d, r28	; 61
	unsigned short k;
	unsigned char count = 0;
    8510:	1b 82       	std	Y+3, r1	; 0x03

	for (k = 0; k < FILE_ENTRY_IN_PAGE; k = k + 2)
    8512:	1a 82       	std	Y+2, r1	; 0x02
    8514:	19 82       	std	Y+1, r1	; 0x01
    8516:	89 81       	ldd	r24, Y+1	; 0x01
    8518:	9a 81       	ldd	r25, Y+2	; 0x02
    851a:	8f 3f       	cpi	r24, 0xFF	; 255
    851c:	91 05       	cpc	r25, r1
    851e:	09 f0       	breq	.+2      	; 0x8522 <fatxGetFileCount+0x26>
    8520:	a8 f4       	brcc	.+42     	; 0x854c <fatxGetFileCount+0x50>
	{
		if (rootdir[k])
    8522:	29 81       	ldd	r18, Y+1	; 0x01
    8524:	3a 81       	ldd	r19, Y+2	; 0x02
    8526:	c9 01       	movw	r24, r18
    8528:	82 0f       	add	r24, r18
    852a:	93 1f       	adc	r25, r19
    852c:	fc 01       	movw	r30, r24
    852e:	e3 5f       	subi	r30, 0xF3	; 243
    8530:	f5 4f       	sbci	r31, 0xF5	; 245
    8532:	80 81       	ld	r24, Z
    8534:	91 81       	ldd	r25, Z+1	; 0x01
    8536:	00 97       	sbiw	r24, 0x00	; 0
    8538:	19 f0       	breq	.+6      	; 0x8540 <fatxGetFileCount+0x44>
			count++;
    853a:	8b 81       	ldd	r24, Y+3	; 0x03
    853c:	8f 5f       	subi	r24, 0xFF	; 255
    853e:	8b 83       	std	Y+3, r24	; 0x03
    8540:	89 81       	ldd	r24, Y+1	; 0x01
    8542:	9a 81       	ldd	r25, Y+2	; 0x02
    8544:	02 96       	adiw	r24, 0x02	; 2
    8546:	9a 83       	std	Y+2, r25	; 0x02
    8548:	89 83       	std	Y+1, r24	; 0x01
    854a:	e5 cf       	rjmp	.-54     	; 0x8516 <fatxGetFileCount+0x1a>
	}

	return count;
    854c:	8b 81       	ldd	r24, Y+3	; 0x03
    854e:	99 27       	eor	r25, r25
    8550:	87 fd       	sbrc	r24, 7
    8552:	90 95       	com	r25
    8554:	23 96       	adiw	r28, 0x03	; 3
    8556:	0f b6       	in	r0, 0x3f	; 63
    8558:	f8 94       	cli
    855a:	de bf       	out	0x3e, r29	; 62
    855c:	0f be       	out	0x3f, r0	; 63
    855e:	cd bf       	out	0x3d, r28	; 61
    8560:	df 91       	pop	r29
    8562:	cf 91       	pop	r28
    8564:	08 95       	ret

00008566 <fatxFileExists>:
}

unsigned short fatxFileExists(unsigned char fileno)
{
    8566:	cf 93       	push	r28
    8568:	df 93       	push	r29
    856a:	cd b7       	in	r28, 0x3d	; 61
    856c:	de b7       	in	r29, 0x3e	; 62
    856e:	21 97       	sbiw	r28, 0x01	; 1
    8570:	0f b6       	in	r0, 0x3f	; 63
    8572:	f8 94       	cli
    8574:	de bf       	out	0x3e, r29	; 62
    8576:	0f be       	out	0x3f, r0	; 63
    8578:	cd bf       	out	0x3d, r28	; 61
    857a:	89 83       	std	Y+1, r24	; 0x01
	return (*(PFILE_ENTRY)(&rootdir[fileno << 1])).pageno;
    857c:	89 81       	ldd	r24, Y+1	; 0x01
    857e:	99 27       	eor	r25, r25
    8580:	88 0f       	add	r24, r24
    8582:	99 1f       	adc	r25, r25
    8584:	88 0f       	add	r24, r24
    8586:	99 1f       	adc	r25, r25
    8588:	fc 01       	movw	r30, r24
    858a:	e3 5f       	subi	r30, 0xF3	; 243
    858c:	f5 4f       	sbci	r31, 0xF5	; 245
    858e:	80 81       	ld	r24, Z
    8590:	91 81       	ldd	r25, Z+1	; 0x01
    8592:	21 96       	adiw	r28, 0x01	; 1
    8594:	0f b6       	in	r0, 0x3f	; 63
    8596:	f8 94       	cli
    8598:	de bf       	out	0x3e, r29	; 62
    859a:	0f be       	out	0x3f, r0	; 63
    859c:	cd bf       	out	0x3d, r28	; 61
    859e:	df 91       	pop	r29
    85a0:	cf 91       	pop	r28
    85a2:	08 95       	ret

000085a4 <fatxFormat>:
}

void fatxFormat(void)
{
    85a4:	cf 93       	push	r28
    85a6:	df 93       	push	r29
    85a8:	cd b7       	in	r28, 0x3d	; 61
    85aa:	de b7       	in	r29, 0x3e	; 62
    85ac:	21 97       	sbiw	r28, 0x01	; 1
    85ae:	0f b6       	in	r0, 0x3f	; 63
    85b0:	f8 94       	cli
    85b2:	de bf       	out	0x3e, r29	; 62
    85b4:	0f be       	out	0x3f, r0	; 63
    85b6:	cd bf       	out	0x3d, r28	; 61
	unsigned char k;

	for (k = 0; k < 255; k++)
    85b8:	19 82       	std	Y+1, r1	; 0x01
    85ba:	89 81       	ldd	r24, Y+1	; 0x01
    85bc:	8f 3f       	cpi	r24, 0xFF	; 255
    85be:	79 f0       	breq	.+30     	; 0x85de <fatxFormat+0x3a>
		rootdir[k] = 0;
    85c0:	89 81       	ldd	r24, Y+1	; 0x01
    85c2:	28 2f       	mov	r18, r24
    85c4:	33 27       	eor	r19, r19
    85c6:	c9 01       	movw	r24, r18
    85c8:	82 0f       	add	r24, r18
    85ca:	93 1f       	adc	r25, r19
    85cc:	fc 01       	movw	r30, r24
    85ce:	e3 5f       	subi	r30, 0xF3	; 243
    85d0:	f5 4f       	sbci	r31, 0xF5	; 245
    85d2:	11 82       	std	Z+1, r1	; 0x01
    85d4:	10 82       	st	Z, r1
    85d6:	89 81       	ldd	r24, Y+1	; 0x01
    85d8:	8f 5f       	subi	r24, 0xFF	; 255
    85da:	89 83       	std	Y+1, r24	; 0x01
    85dc:	ee cf       	rjmp	.-36     	; 0x85ba <fatxFormat+0x16>
	AT45ZeroPage(16);
    85de:	80 e1       	ldi	r24, 0x10	; 16
    85e0:	90 e0       	ldi	r25, 0x00	; 0
    85e2:	0e 94 42 3e 	call	0x7c84 <AT45ZeroPage>
	AT45FillBuffer(0, 0);	
    85e6:	60 e0       	ldi	r22, 0x00	; 0
    85e8:	80 e0       	ldi	r24, 0x00	; 0
    85ea:	0e 94 e9 3d 	call	0x7bd2 <AT45FillBuffer>
	AT45SetWriteBufferPos(0, 0);
    85ee:	60 e0       	ldi	r22, 0x00	; 0
    85f0:	70 e0       	ldi	r23, 0x00	; 0
    85f2:	80 e0       	ldi	r24, 0x00	; 0
    85f4:	0e 94 1d 3b 	call	0x763a <AT45SetWriteBufferPos>
	for (k = 0; k < 80; k++)
    85f8:	19 82       	std	Y+1, r1	; 0x01
    85fa:	89 81       	ldd	r24, Y+1	; 0x01
    85fc:	80 35       	cpi	r24, 0x50	; 80
    85fe:	40 f4       	brcc	.+16     	; 0x8610 <fatxFormat+0x6c>
		AT45WriteByteToBuffer(0, 0xFF);
    8600:	6f ef       	ldi	r22, 0xFF	; 255
    8602:	80 e0       	ldi	r24, 0x00	; 0
    8604:	0e 94 cc 3b 	call	0x7798 <AT45WriteByteToBuffer>
    8608:	89 81       	ldd	r24, Y+1	; 0x01
    860a:	8f 5f       	subi	r24, 0xFF	; 255
    860c:	89 83       	std	Y+1, r24	; 0x01
    860e:	f5 cf       	rjmp	.-22     	; 0x85fa <fatxFormat+0x56>
	AT45WriteBufferToPage(0, 0);
    8610:	60 e0       	ldi	r22, 0x00	; 0
    8612:	70 e0       	ldi	r23, 0x00	; 0
    8614:	80 e0       	ldi	r24, 0x00	; 0
    8616:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>
    861a:	21 96       	adiw	r28, 0x01	; 1
    861c:	0f b6       	in	r0, 0x3f	; 63
    861e:	f8 94       	cli
    8620:	de bf       	out	0x3e, r29	; 62
    8622:	0f be       	out	0x3f, r0	; 63
    8624:	cd bf       	out	0x3d, r28	; 61
    8626:	df 91       	pop	r29
    8628:	cf 91       	pop	r28
    862a:	08 95       	ret

0000862c <fatxGetNextPage>:
}

unsigned short fatxGetNextPage(unsigned short prevpageno)
{
    862c:	cf 93       	push	r28
    862e:	df 93       	push	r29
    8630:	cd b7       	in	r28, 0x3d	; 61
    8632:	de b7       	in	r29, 0x3e	; 62
    8634:	24 97       	sbiw	r28, 0x04	; 4
    8636:	0f b6       	in	r0, 0x3f	; 63
    8638:	f8 94       	cli
    863a:	de bf       	out	0x3e, r29	; 62
    863c:	0f be       	out	0x3f, r0	; 63
    863e:	cd bf       	out	0x3d, r28	; 61
    8640:	9a 83       	std	Y+2, r25	; 0x02
    8642:	89 83       	std	Y+1, r24	; 0x01
	unsigned short res = fatxGetFAT(prevpageno);	
    8644:	89 81       	ldd	r24, Y+1	; 0x01
    8646:	9a 81       	ldd	r25, Y+2	; 0x02
    8648:	0e 94 69 40 	call	0x80d2 <fatxGetFAT>
    864c:	9c 83       	std	Y+4, r25	; 0x04
    864e:	8b 83       	std	Y+3, r24	; 0x03

	//  конечно, такого быть не должно - у файла не может быть страницы номер ноль - 
	//  либо число от 0x28 до 0x0FFF либо 0xFFFF (это последняя страница)
	if (!res)
    8650:	8b 81       	ldd	r24, Y+3	; 0x03
    8652:	9c 81       	ldd	r25, Y+4	; 0x04
    8654:	00 97       	sbiw	r24, 0x00	; 0
    8656:	21 f4       	brne	.+8      	; 0x8660 <fatxGetNextPage+0x34>
		res = 0xFFFF;
    8658:	8f ef       	ldi	r24, 0xFF	; 255
    865a:	9f ef       	ldi	r25, 0xFF	; 255
    865c:	9c 83       	std	Y+4, r25	; 0x04
    865e:	8b 83       	std	Y+3, r24	; 0x03

	return res;
    8660:	8b 81       	ldd	r24, Y+3	; 0x03
    8662:	9c 81       	ldd	r25, Y+4	; 0x04
    8664:	24 96       	adiw	r28, 0x04	; 4
    8666:	0f b6       	in	r0, 0x3f	; 63
    8668:	f8 94       	cli
    866a:	de bf       	out	0x3e, r29	; 62
    866c:	0f be       	out	0x3f, r0	; 63
    866e:	cd bf       	out	0x3d, r28	; 61
    8670:	df 91       	pop	r29
    8672:	cf 91       	pop	r28
    8674:	08 95       	ret

00008676 <fatxOpenFile>:
}

char fatxOpenFile(unsigned char fileno, unsigned char mode)
{
    8676:	cf 93       	push	r28
    8678:	df 93       	push	r29
    867a:	cd b7       	in	r28, 0x3d	; 61
    867c:	de b7       	in	r29, 0x3e	; 62
    867e:	24 97       	sbiw	r28, 0x04	; 4
    8680:	0f b6       	in	r0, 0x3f	; 63
    8682:	f8 94       	cli
    8684:	de bf       	out	0x3e, r29	; 62
    8686:	0f be       	out	0x3f, r0	; 63
    8688:	cd bf       	out	0x3d, r28	; 61
    868a:	89 83       	std	Y+1, r24	; 0x01
    868c:	6a 83       	std	Y+2, r22	; 0x02
	if ((!fatxFileExists(fileno)) ||
    868e:	89 81       	ldd	r24, Y+1	; 0x01
    8690:	0e 94 b3 42 	call	0x8566 <fatxFileExists>
    8694:	00 97       	sbiw	r24, 0x00	; 0
    8696:	49 f0       	breq	.+18     	; 0x86aa <fatxOpenFile+0x34>
    8698:	80 91 fd 07 	lds	r24, 0x07FD
    869c:	90 91 fe 07 	lds	r25, 0x07FE
    86a0:	2f ef       	ldi	r18, 0xFF	; 255
    86a2:	8f 3f       	cpi	r24, 0xFF	; 255
    86a4:	92 07       	cpc	r25, r18
    86a6:	09 f4       	brne	.+2      	; 0x86aa <fatxOpenFile+0x34>
    86a8:	03 c0       	rjmp	.+6      	; 0x86b0 <fatxOpenFile+0x3a>
								//  такого файла нет или

	 (0xFFFF != cur_file.fileno))
		return 0;			//  имеется другой открытый файл и его надо закрыть
    86aa:	1c 82       	std	Y+4, r1	; 0x04
    86ac:	1b 82       	std	Y+3, r1	; 0x03
    86ae:	4c c0       	rjmp	.+152    	; 0x8748 <fatxOpenFile+0xd2>

	cur_file.mode = mode;
    86b0:	8a 81       	ldd	r24, Y+2	; 0x02
    86b2:	99 27       	eor	r25, r25
    86b4:	90 93 fc 07 	sts	0x07FC, r25
    86b8:	80 93 fb 07 	sts	0x07FB, r24
	cur_file.fileno = fileno;
    86bc:	89 81       	ldd	r24, Y+1	; 0x01
    86be:	99 27       	eor	r25, r25
    86c0:	90 93 fe 07 	sts	0x07FE, r25
    86c4:	80 93 fd 07 	sts	0x07FD, r24
	cur_file.startpageno = (*(PFILE_ENTRY)(&rootdir[fileno << 1])).pageno;
    86c8:	89 81       	ldd	r24, Y+1	; 0x01
    86ca:	99 27       	eor	r25, r25
    86cc:	88 0f       	add	r24, r24
    86ce:	99 1f       	adc	r25, r25
    86d0:	88 0f       	add	r24, r24
    86d2:	99 1f       	adc	r25, r25
    86d4:	fc 01       	movw	r30, r24
    86d6:	e3 5f       	subi	r30, 0xF3	; 243
    86d8:	f5 4f       	sbci	r31, 0xF5	; 245
    86da:	80 81       	ld	r24, Z
    86dc:	91 81       	ldd	r25, Z+1	; 0x01
    86de:	90 93 00 08 	sts	0x0800, r25
    86e2:	80 93 ff 07 	sts	0x07FF, r24
	cur_file.curpageno = cur_file.startpageno;
    86e6:	80 91 ff 07 	lds	r24, 0x07FF
    86ea:	90 91 00 08 	lds	r25, 0x0800
    86ee:	90 93 06 08 	sts	0x0806, r25
    86f2:	80 93 05 08 	sts	0x0805, r24
	cur_file.size = (*(PFILE_ENTRY)(&rootdir[fileno << 1])).size;
    86f6:	89 81       	ldd	r24, Y+1	; 0x01
    86f8:	99 27       	eor	r25, r25
    86fa:	88 0f       	add	r24, r24
    86fc:	99 1f       	adc	r25, r25
    86fe:	88 0f       	add	r24, r24
    8700:	99 1f       	adc	r25, r25
    8702:	fc 01       	movw	r30, r24
    8704:	e3 5f       	subi	r30, 0xF3	; 243
    8706:	f5 4f       	sbci	r31, 0xF5	; 245
    8708:	82 81       	ldd	r24, Z+2	; 0x02
    870a:	93 81       	ldd	r25, Z+3	; 0x03
    870c:	90 93 02 08 	sts	0x0802, r25
    8710:	80 93 01 08 	sts	0x0801, r24

	//  настройка механизма побайтового доступа

	//  в кэше файла ничего нет
	cur_file.cachepageno = 0xFFFF;
    8714:	8f ef       	ldi	r24, 0xFF	; 255
    8716:	9f ef       	ldi	r25, 0xFF	; 255
    8718:	90 93 08 08 	sts	0x0808, r25
    871c:	80 93 07 08 	sts	0x0807, r24
	cur_file.pointer = 0;
    8720:	10 92 04 08 	sts	0x0804, r1
    8724:	10 92 03 08 	sts	0x0803, r1
	cur_file.pointerpageno = cur_file.startpageno;
    8728:	80 91 ff 07 	lds	r24, 0x07FF
    872c:	90 91 00 08 	lds	r25, 0x0800
    8730:	90 93 0a 08 	sts	0x080A, r25
    8734:	80 93 09 08 	sts	0x0809, r24
	cur_file.pointeroffset = 0;
    8738:	10 92 0c 08 	sts	0x080C, r1
    873c:	10 92 0b 08 	sts	0x080B, r1

	return 1;
    8740:	81 e0       	ldi	r24, 0x01	; 1
    8742:	90 e0       	ldi	r25, 0x00	; 0
    8744:	9c 83       	std	Y+4, r25	; 0x04
    8746:	8b 83       	std	Y+3, r24	; 0x03
}
    8748:	8b 81       	ldd	r24, Y+3	; 0x03
    874a:	9c 81       	ldd	r25, Y+4	; 0x04
    874c:	24 96       	adiw	r28, 0x04	; 4
    874e:	0f b6       	in	r0, 0x3f	; 63
    8750:	f8 94       	cli
    8752:	de bf       	out	0x3e, r29	; 62
    8754:	0f be       	out	0x3f, r0	; 63
    8756:	cd bf       	out	0x3d, r28	; 61
    8758:	df 91       	pop	r29
    875a:	cf 91       	pop	r28
    875c:	08 95       	ret

0000875e <fatxCloseFile>:

//  закрывает текущий открытый файл
void fatxCloseFile(void)
{
    875e:	cf 93       	push	r28
    8760:	df 93       	push	r29
    8762:	cd b7       	in	r28, 0x3d	; 61
    8764:	de b7       	in	r29, 0x3e	; 62
	cur_file.fileno = 0xFFFF;
    8766:	8f ef       	ldi	r24, 0xFF	; 255
    8768:	9f ef       	ldi	r25, 0xFF	; 255
    876a:	90 93 fe 07 	sts	0x07FE, r25
    876e:	80 93 fd 07 	sts	0x07FD, r24
    8772:	df 91       	pop	r29
    8774:	cf 91       	pop	r28
    8776:	08 95       	ret

00008778 <fatxReadPageFromFile>:
}

//  читаем текущую страницу текущего файла
char fatxReadPageFromFile(unsigned char* pPage)
{
    8778:	cf 93       	push	r28
    877a:	df 93       	push	r29
    877c:	cd b7       	in	r28, 0x3d	; 61
    877e:	de b7       	in	r29, 0x3e	; 62
    8780:	24 97       	sbiw	r28, 0x04	; 4
    8782:	0f b6       	in	r0, 0x3f	; 63
    8784:	f8 94       	cli
    8786:	de bf       	out	0x3e, r29	; 62
    8788:	0f be       	out	0x3f, r0	; 63
    878a:	cd bf       	out	0x3d, r28	; 61
    878c:	9a 83       	std	Y+2, r25	; 0x02
    878e:	89 83       	std	Y+1, r24	; 0x01
	if ((0xFFFF == cur_file.fileno) ||
    8790:	80 91 fd 07 	lds	r24, 0x07FD
    8794:	90 91 fe 07 	lds	r25, 0x07FE
    8798:	2f ef       	ldi	r18, 0xFF	; 255
    879a:	8f 3f       	cpi	r24, 0xFF	; 255
    879c:	92 07       	cpc	r25, r18
    879e:	49 f0       	breq	.+18     	; 0x87b2 <fatxReadPageFromFile+0x3a>
    87a0:	80 91 05 08 	lds	r24, 0x0805
    87a4:	90 91 06 08 	lds	r25, 0x0806
    87a8:	2f ef       	ldi	r18, 0xFF	; 255
    87aa:	8f 3f       	cpi	r24, 0xFF	; 255
    87ac:	92 07       	cpc	r25, r18
    87ae:	09 f0       	breq	.+2      	; 0x87b2 <fatxReadPageFromFile+0x3a>
    87b0:	03 c0       	rjmp	.+6      	; 0x87b8 <fatxReadPageFromFile+0x40>
													//  нет открытого файла

	(LAST_PAGE_MARKER == cur_file.curpageno))
		return 0;									//  добрались до конца
    87b2:	1c 82       	std	Y+4, r1	; 0x04
    87b4:	1b 82       	std	Y+3, r1	; 0x03
    87b6:	16 c0       	rjmp	.+44     	; 0x87e4 <fatxReadPageFromFile+0x6c>

	AT45ReadPage(cur_file.curpageno, pPage);
    87b8:	69 81       	ldd	r22, Y+1	; 0x01
    87ba:	7a 81       	ldd	r23, Y+2	; 0x02
    87bc:	80 91 05 08 	lds	r24, 0x0805
    87c0:	90 91 06 08 	lds	r25, 0x0806
    87c4:	0e 94 95 3f 	call	0x7f2a <AT45ReadPage>

	//  текущая страница файла при следующем чтении - или 0xFFFF, если файлу конец
	cur_file.curpageno = fatxGetNextPage(cur_file.curpageno);
    87c8:	80 91 05 08 	lds	r24, 0x0805
    87cc:	90 91 06 08 	lds	r25, 0x0806
    87d0:	0e 94 16 43 	call	0x862c <fatxGetNextPage>
    87d4:	90 93 06 08 	sts	0x0806, r25
    87d8:	80 93 05 08 	sts	0x0805, r24

	return 1;
    87dc:	81 e0       	ldi	r24, 0x01	; 1
    87de:	90 e0       	ldi	r25, 0x00	; 0
    87e0:	9c 83       	std	Y+4, r25	; 0x04
    87e2:	8b 83       	std	Y+3, r24	; 0x03
}
    87e4:	8b 81       	ldd	r24, Y+3	; 0x03
    87e6:	9c 81       	ldd	r25, Y+4	; 0x04
    87e8:	24 96       	adiw	r28, 0x04	; 4
    87ea:	0f b6       	in	r0, 0x3f	; 63
    87ec:	f8 94       	cli
    87ee:	de bf       	out	0x3e, r29	; 62
    87f0:	0f be       	out	0x3f, r0	; 63
    87f2:	cd bf       	out	0x3d, r28	; 61
    87f4:	df 91       	pop	r29
    87f6:	cf 91       	pop	r28
    87f8:	08 95       	ret

000087fa <fatxWritePageToFile>:

char fatxWritePageToFile(unsigned char* pPage)
{
    87fa:	cf 93       	push	r28
    87fc:	df 93       	push	r29
    87fe:	cd b7       	in	r28, 0x3d	; 61
    8800:	de b7       	in	r29, 0x3e	; 62
    8802:	24 97       	sbiw	r28, 0x04	; 4
    8804:	0f b6       	in	r0, 0x3f	; 63
    8806:	f8 94       	cli
    8808:	de bf       	out	0x3e, r29	; 62
    880a:	0f be       	out	0x3f, r0	; 63
    880c:	cd bf       	out	0x3d, r28	; 61
    880e:	9a 83       	std	Y+2, r25	; 0x02
    8810:	89 83       	std	Y+1, r24	; 0x01
	if ((0xFFFF == cur_file.fileno) ||
    8812:	80 91 fd 07 	lds	r24, 0x07FD
    8816:	90 91 fe 07 	lds	r25, 0x07FE
    881a:	2f ef       	ldi	r18, 0xFF	; 255
    881c:	8f 3f       	cpi	r24, 0xFF	; 255
    881e:	92 07       	cpc	r25, r18
    8820:	49 f0       	breq	.+18     	; 0x8834 <fatxWritePageToFile+0x3a>
    8822:	80 91 05 08 	lds	r24, 0x0805
    8826:	90 91 06 08 	lds	r25, 0x0806
    882a:	2f ef       	ldi	r18, 0xFF	; 255
    882c:	8f 3f       	cpi	r24, 0xFF	; 255
    882e:	92 07       	cpc	r25, r18
    8830:	09 f0       	breq	.+2      	; 0x8834 <fatxWritePageToFile+0x3a>
    8832:	03 c0       	rjmp	.+6      	; 0x883a <fatxWritePageToFile+0x40>
											//  нет открытого файла

	(LAST_PAGE_MARKER == cur_file.curpageno))
		return 0;									//  добрались до конца
    8834:	1c 82       	std	Y+4, r1	; 0x04
    8836:	1b 82       	std	Y+3, r1	; 0x03
    8838:	19 c0       	rjmp	.+50     	; 0x886c <fatxWritePageToFile+0x72>

	//  записываем переданный буфер в буфер АТ45
	AT45WriteBuffer(pPage);
    883a:	89 81       	ldd	r24, Y+1	; 0x01
    883c:	9a 81       	ldd	r25, Y+2	; 0x02
    883e:	0e 94 06 40 	call	0x800c <AT45WriteBuffer>
	//  пишем из буфера АТ45 во флеш
	AT45WriteBufferToPage(0, cur_file.curpageno);
    8842:	60 91 05 08 	lds	r22, 0x0805
    8846:	70 91 06 08 	lds	r23, 0x0806
    884a:	80 e0       	ldi	r24, 0x00	; 0
    884c:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>

	//  выделяем файлу новую страницу - при след. вызове писать будем в нее
	cur_file.curpageno = fatxAddPageToFile(cur_file.fileno, 1);
    8850:	61 e0       	ldi	r22, 0x01	; 1
    8852:	70 e0       	ldi	r23, 0x00	; 0
    8854:	80 91 fd 07 	lds	r24, 0x07FD
    8858:	0e 94 10 42 	call	0x8420 <fatxAddPageToFile>
    885c:	90 93 06 08 	sts	0x0806, r25
    8860:	80 93 05 08 	sts	0x0805, r24

	return 1;
    8864:	81 e0       	ldi	r24, 0x01	; 1
    8866:	90 e0       	ldi	r25, 0x00	; 0
    8868:	9c 83       	std	Y+4, r25	; 0x04
    886a:	8b 83       	std	Y+3, r24	; 0x03
}
    886c:	8b 81       	ldd	r24, Y+3	; 0x03
    886e:	9c 81       	ldd	r25, Y+4	; 0x04
    8870:	24 96       	adiw	r28, 0x04	; 4
    8872:	0f b6       	in	r0, 0x3f	; 63
    8874:	f8 94       	cli
    8876:	de bf       	out	0x3e, r29	; 62
    8878:	0f be       	out	0x3f, r0	; 63
    887a:	cd bf       	out	0x3d, r28	; 61
    887c:	df 91       	pop	r29
    887e:	cf 91       	pop	r28
    8880:	08 95       	ret

00008882 <fatxReadByteFromFile>:

char fatxReadByteFromFile(unsigned char* resbyte)
{
    8882:	cf 93       	push	r28
    8884:	df 93       	push	r29
    8886:	cd b7       	in	r28, 0x3d	; 61
    8888:	de b7       	in	r29, 0x3e	; 62
    888a:	24 97       	sbiw	r28, 0x04	; 4
    888c:	0f b6       	in	r0, 0x3f	; 63
    888e:	f8 94       	cli
    8890:	de bf       	out	0x3e, r29	; 62
    8892:	0f be       	out	0x3f, r0	; 63
    8894:	cd bf       	out	0x3d, r28	; 61
    8896:	9a 83       	std	Y+2, r25	; 0x02
    8898:	89 83       	std	Y+1, r24	; 0x01
	if ((0xFFFF == cur_file.fileno) ||
    889a:	80 91 fd 07 	lds	r24, 0x07FD
    889e:	90 91 fe 07 	lds	r25, 0x07FE
    88a2:	2f ef       	ldi	r18, 0xFF	; 255
    88a4:	8f 3f       	cpi	r24, 0xFF	; 255
    88a6:	92 07       	cpc	r25, r18
    88a8:	91 f0       	breq	.+36     	; 0x88ce <fatxReadByteFromFile+0x4c>
    88aa:	20 91 03 08 	lds	r18, 0x0803
    88ae:	30 91 04 08 	lds	r19, 0x0804
    88b2:	80 91 01 08 	lds	r24, 0x0801
    88b6:	90 91 02 08 	lds	r25, 0x0802
    88ba:	28 17       	cp	r18, r24
    88bc:	39 07       	cpc	r19, r25
    88be:	39 f0       	breq	.+14     	; 0x88ce <fatxReadByteFromFile+0x4c>
    88c0:	80 91 fb 07 	lds	r24, 0x07FB
    88c4:	90 91 fc 07 	lds	r25, 0x07FC
    88c8:	00 97       	sbiw	r24, 0x00	; 0
    88ca:	09 f4       	brne	.+2      	; 0x88ce <fatxReadByteFromFile+0x4c>
    88cc:	03 c0       	rjmp	.+6      	; 0x88d4 <fatxReadByteFromFile+0x52>
										//  нет открытого файла

	(cur_file.pointer == cur_file.size) ||
										//  чтение за концом файла

	(OPEN_MODE_READ != cur_file.mode))			//  файл не открыт для чтения
		return 0;
    88ce:	1c 82       	std	Y+4, r1	; 0x04
    88d0:	1b 82       	std	Y+3, r1	; 0x03
    88d2:	5f c0       	rjmp	.+190    	; 0x8992 <fatxReadByteFromFile+0x110>

	if (0xFFFF == cur_file.cachepageno)
    88d4:	80 91 07 08 	lds	r24, 0x0807
    88d8:	90 91 08 08 	lds	r25, 0x0808
    88dc:	2f ef       	ldi	r18, 0xFF	; 255
    88de:	8f 3f       	cpi	r24, 0xFF	; 255
    88e0:	92 07       	cpc	r25, r18
    88e2:	d1 f4       	brne	.+52     	; 0x8918 <fatxReadByteFromFile+0x96>
	{	//  так как в кэше ничего нет, то это первое чтение этого файла
		AT45ReadPage(cur_file.pointerpageno, (unsigned char*)&cur_file.page);
    88e4:	6d e0       	ldi	r22, 0x0D	; 13
    88e6:	78 e0       	ldi	r23, 0x08	; 8
    88e8:	80 91 09 08 	lds	r24, 0x0809
    88ec:	90 91 0a 08 	lds	r25, 0x080A
    88f0:	0e 94 95 3f 	call	0x7f2a <AT45ReadPage>
		cur_file.cachepageno = cur_file.pointerpageno;
    88f4:	80 91 09 08 	lds	r24, 0x0809
    88f8:	90 91 0a 08 	lds	r25, 0x080A
    88fc:	90 93 08 08 	sts	0x0808, r25
    8900:	80 93 07 08 	sts	0x0807, r24
	
		//  текущая страница файла при следующем чтении - или 0xFFFF, если файлу конец
		cur_file.curpageno = fatxGetNextPage(cur_file.curpageno);
    8904:	80 91 05 08 	lds	r24, 0x0805
    8908:	90 91 06 08 	lds	r25, 0x0806
    890c:	0e 94 16 43 	call	0x862c <fatxGetNextPage>
    8910:	90 93 06 08 	sts	0x0806, r25
    8914:	80 93 05 08 	sts	0x0805, r24
	};

	//  читаем наконец байтик
	*resbyte = cur_file.page[cur_file.pointeroffset];
    8918:	a9 81       	ldd	r26, Y+1	; 0x01
    891a:	ba 81       	ldd	r27, Y+2	; 0x02
    891c:	80 91 0b 08 	lds	r24, 0x080B
    8920:	90 91 0c 08 	lds	r25, 0x080C
    8924:	fc 01       	movw	r30, r24
    8926:	e3 5f       	subi	r30, 0xF3	; 243
    8928:	f7 4f       	sbci	r31, 0xF7	; 247
    892a:	80 81       	ld	r24, Z
    892c:	8c 93       	st	X, r24
	
	//  увеличиваем указатель для следующего чтения
	cur_file.pointer++;								//  указатель в файле
    892e:	80 91 03 08 	lds	r24, 0x0803
    8932:	90 91 04 08 	lds	r25, 0x0804
    8936:	01 96       	adiw	r24, 0x01	; 1
    8938:	90 93 04 08 	sts	0x0804, r25
    893c:	80 93 03 08 	sts	0x0803, r24
	cur_file.pointeroffset++;
    8940:	80 91 0b 08 	lds	r24, 0x080B
    8944:	90 91 0c 08 	lds	r25, 0x080C
    8948:	01 96       	adiw	r24, 0x01	; 1
    894a:	90 93 0c 08 	sts	0x080C, r25
    894e:	80 93 0b 08 	sts	0x080B, r24
	
	if (cur_file.pointeroffset == PAGE_USER_AREA)
    8952:	80 91 0b 08 	lds	r24, 0x080B
    8956:	90 91 0c 08 	lds	r25, 0x080C
    895a:	22 e0       	ldi	r18, 0x02	; 2
    895c:	80 30       	cpi	r24, 0x00	; 0
    895e:	92 07       	cpc	r25, r18
    8960:	a1 f4       	brne	.+40     	; 0x898a <fatxReadByteFromFile+0x108>
	{	//  если вышли за границы страницы

		cur_file.pointeroffset = 0;
    8962:	10 92 0c 08 	sts	0x080C, r1
    8966:	10 92 0b 08 	sts	0x080B, r1
		//  следующая страница для чтения - эта
		cur_file.pointerpageno = fatxGetNextPage(cur_file.pointerpageno);
    896a:	80 91 09 08 	lds	r24, 0x0809
    896e:	90 91 0a 08 	lds	r25, 0x080A
    8972:	0e 94 16 43 	call	0x862c <fatxGetNextPage>
    8976:	90 93 0a 08 	sts	0x080A, r25
    897a:	80 93 09 08 	sts	0x0809, r24
		//  говорим, что кеш устарел и при следующем чтении
		//  в кеш будет загружена новая страница
		cur_file.cachepageno = 0xFFFF;
    897e:	8f ef       	ldi	r24, 0xFF	; 255
    8980:	9f ef       	ldi	r25, 0xFF	; 255
    8982:	90 93 08 08 	sts	0x0808, r25
    8986:	80 93 07 08 	sts	0x0807, r24
	}

	return 1;
    898a:	81 e0       	ldi	r24, 0x01	; 1
    898c:	90 e0       	ldi	r25, 0x00	; 0
    898e:	9c 83       	std	Y+4, r25	; 0x04
    8990:	8b 83       	std	Y+3, r24	; 0x03
}
    8992:	8b 81       	ldd	r24, Y+3	; 0x03
    8994:	9c 81       	ldd	r25, Y+4	; 0x04
    8996:	24 96       	adiw	r28, 0x04	; 4
    8998:	0f b6       	in	r0, 0x3f	; 63
    899a:	f8 94       	cli
    899c:	de bf       	out	0x3e, r29	; 62
    899e:	0f be       	out	0x3f, r0	; 63
    89a0:	cd bf       	out	0x3d, r28	; 61
    89a2:	df 91       	pop	r29
    89a4:	cf 91       	pop	r28
    89a6:	08 95       	ret

000089a8 <fatxFileSeek>:

char fatxFileSeek(unsigned short pos)
{
    89a8:	cf 93       	push	r28
    89aa:	df 93       	push	r29
    89ac:	cd b7       	in	r28, 0x3d	; 61
    89ae:	de b7       	in	r29, 0x3e	; 62
    89b0:	26 97       	sbiw	r28, 0x06	; 6
    89b2:	0f b6       	in	r0, 0x3f	; 63
    89b4:	f8 94       	cli
    89b6:	de bf       	out	0x3e, r29	; 62
    89b8:	0f be       	out	0x3f, r0	; 63
    89ba:	cd bf       	out	0x3d, r28	; 61
    89bc:	9a 83       	std	Y+2, r25	; 0x02
    89be:	89 83       	std	Y+1, r24	; 0x01
	unsigned short newpageno;

	if ((0xFFFF == cur_file.fileno) ||
    89c0:	80 91 fd 07 	lds	r24, 0x07FD
    89c4:	90 91 fe 07 	lds	r25, 0x07FE
    89c8:	2f ef       	ldi	r18, 0xFF	; 255
    89ca:	8f 3f       	cpi	r24, 0xFF	; 255
    89cc:	92 07       	cpc	r25, r18
    89ce:	51 f0       	breq	.+20     	; 0x89e4 <fatxFileSeek+0x3c>
    89d0:	20 91 01 08 	lds	r18, 0x0801
    89d4:	30 91 02 08 	lds	r19, 0x0802
    89d8:	89 81       	ldd	r24, Y+1	; 0x01
    89da:	9a 81       	ldd	r25, Y+2	; 0x02
    89dc:	28 17       	cp	r18, r24
    89de:	39 07       	cpc	r19, r25
    89e0:	08 f0       	brcs	.+2      	; 0x89e4 <fatxFileSeek+0x3c>
    89e2:	03 c0       	rjmp	.+6      	; 0x89ea <fatxFileSeek+0x42>
		        									//  нет открытого файла

	(pos > cur_file.size))						//  выход за границы файла
		return 0;					//  Seek не может увеличить размер файла
    89e4:	1e 82       	std	Y+6, r1	; 0x06
    89e6:	1d 82       	std	Y+5, r1	; 0x05
    89e8:	36 c0       	rjmp	.+108    	; 0x8a56 <fatxFileSeek+0xae>

	cur_file.pointer = pos;
    89ea:	89 81       	ldd	r24, Y+1	; 0x01
    89ec:	9a 81       	ldd	r25, Y+2	; 0x02
    89ee:	90 93 04 08 	sts	0x0804, r25
    89f2:	80 93 03 08 	sts	0x0803, r24
	newpageno = pos / PAGE_USER_AREA;
    89f6:	89 81       	ldd	r24, Y+1	; 0x01
    89f8:	9a 81       	ldd	r25, Y+2	; 0x02
    89fa:	89 2f       	mov	r24, r25
    89fc:	99 27       	eor	r25, r25
    89fe:	86 95       	lsr	r24
    8a00:	9c 83       	std	Y+4, r25	; 0x04
    8a02:	8b 83       	std	Y+3, r24	; 0x03

	if ((OPEN_MODE_WRITE == cur_file.mode) && (newpageno != cur_file.pointerpageno))
    8a04:	80 91 fb 07 	lds	r24, 0x07FB
    8a08:	90 91 fc 07 	lds	r25, 0x07FC
    8a0c:	81 30       	cpi	r24, 0x01	; 1
    8a0e:	91 05       	cpc	r25, r1
    8a10:	59 f4       	brne	.+22     	; 0x8a28 <fatxFileSeek+0x80>
    8a12:	20 91 09 08 	lds	r18, 0x0809
    8a16:	30 91 0a 08 	lds	r19, 0x080A
    8a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    8a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    8a1e:	28 17       	cp	r18, r24
    8a20:	39 07       	cpc	r19, r25
    8a22:	11 f0       	breq	.+4      	; 0x8a28 <fatxFileSeek+0x80>
	{	//  произошла смена страницы в режиме записи - сохранить возможные изменения
		fatxFlushFile();
    8a24:	0e 94 ce 45 	call	0x8b9c <fatxFlushFile>
	}

	cur_file.pointerpageno = newpageno;
    8a28:	8b 81       	ldd	r24, Y+3	; 0x03
    8a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    8a2c:	90 93 0a 08 	sts	0x080A, r25
    8a30:	80 93 09 08 	sts	0x0809, r24
	cur_file.pointeroffset = pos % PAGE_USER_AREA;
    8a34:	89 81       	ldd	r24, Y+1	; 0x01
    8a36:	9a 81       	ldd	r25, Y+2	; 0x02
    8a38:	91 70       	andi	r25, 0x01	; 1
    8a3a:	90 93 0c 08 	sts	0x080C, r25
    8a3e:	80 93 0b 08 	sts	0x080B, r24

	//  кеш устарел(конечно, не всегда, но нет времени для всех способов)
	cur_file.cachepageno = 0xFFFF;
    8a42:	8f ef       	ldi	r24, 0xFF	; 255
    8a44:	9f ef       	ldi	r25, 0xFF	; 255
    8a46:	90 93 08 08 	sts	0x0808, r25
    8a4a:	80 93 07 08 	sts	0x0807, r24

	return 1;
    8a4e:	81 e0       	ldi	r24, 0x01	; 1
    8a50:	90 e0       	ldi	r25, 0x00	; 0
    8a52:	9e 83       	std	Y+6, r25	; 0x06
    8a54:	8d 83       	std	Y+5, r24	; 0x05
}
    8a56:	8d 81       	ldd	r24, Y+5	; 0x05
    8a58:	9e 81       	ldd	r25, Y+6	; 0x06
    8a5a:	26 96       	adiw	r28, 0x06	; 6
    8a5c:	0f b6       	in	r0, 0x3f	; 63
    8a5e:	f8 94       	cli
    8a60:	de bf       	out	0x3e, r29	; 62
    8a62:	0f be       	out	0x3f, r0	; 63
    8a64:	cd bf       	out	0x3d, r28	; 61
    8a66:	df 91       	pop	r29
    8a68:	cf 91       	pop	r28
    8a6a:	08 95       	ret

00008a6c <fatxWriteByteToFile>:

//  при входе cur_file.pointeroffset ВСЕГДА указывает на новое место для байта,
//  а cur_file.pointerpageno - на правильную страницу, в которую можно писать
//  если cur_file.pointerpageno = 0хFFFF - конец флешки
char fatxWriteByteToFile(unsigned char byte)
{
    8a6c:	cf 93       	push	r28
    8a6e:	df 93       	push	r29
    8a70:	cd b7       	in	r28, 0x3d	; 61
    8a72:	de b7       	in	r29, 0x3e	; 62
    8a74:	23 97       	sbiw	r28, 0x03	; 3
    8a76:	0f b6       	in	r0, 0x3f	; 63
    8a78:	f8 94       	cli
    8a7a:	de bf       	out	0x3e, r29	; 62
    8a7c:	0f be       	out	0x3f, r0	; 63
    8a7e:	cd bf       	out	0x3d, r28	; 61
    8a80:	89 83       	std	Y+1, r24	; 0x01
	if ((0xFFFF == cur_file.fileno) ||
    8a82:	80 91 fd 07 	lds	r24, 0x07FD
    8a86:	90 91 fe 07 	lds	r25, 0x07FE
    8a8a:	2f ef       	ldi	r18, 0xFF	; 255
    8a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    8a8e:	92 07       	cpc	r25, r18
    8a90:	81 f0       	breq	.+32     	; 0x8ab2 <fatxWriteByteToFile+0x46>
    8a92:	80 91 09 08 	lds	r24, 0x0809
    8a96:	90 91 0a 08 	lds	r25, 0x080A
    8a9a:	2f ef       	ldi	r18, 0xFF	; 255
    8a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    8a9e:	92 07       	cpc	r25, r18
    8aa0:	41 f0       	breq	.+16     	; 0x8ab2 <fatxWriteByteToFile+0x46>
    8aa2:	80 91 fb 07 	lds	r24, 0x07FB
    8aa6:	90 91 fc 07 	lds	r25, 0x07FC
    8aaa:	81 30       	cpi	r24, 0x01	; 1
    8aac:	91 05       	cpc	r25, r1
    8aae:	09 f4       	brne	.+2      	; 0x8ab2 <fatxWriteByteToFile+0x46>
    8ab0:	03 c0       	rjmp	.+6      	; 0x8ab8 <fatxWriteByteToFile+0x4c>
												//  нет открытого файла

		(0xFFFF == cur_file.pointerpageno) ||
					//  файлу не удалось выделить страницу и писать нельзя

		(OPEN_MODE_WRITE != cur_file.mode))

		return 0;								//  файл не был открыт для записи
    8ab2:	1b 82       	std	Y+3, r1	; 0x03
    8ab4:	1a 82       	std	Y+2, r1	; 0x02
    8ab6:	67 c0       	rjmp	.+206    	; 0x8b86 <fatxWriteByteToFile+0x11a>

	if (0xFFFF == cur_file.cachepageno)
    8ab8:	80 91 07 08 	lds	r24, 0x0807
    8abc:	90 91 08 08 	lds	r25, 0x0808
    8ac0:	2f ef       	ldi	r18, 0xFF	; 255
    8ac2:	8f 3f       	cpi	r24, 0xFF	; 255
    8ac4:	92 07       	cpc	r25, r18
    8ac6:	81 f4       	brne	.+32     	; 0x8ae8 <fatxWriteByteToFile+0x7c>
	{	//  первая запись в эту страницу - загрузим в кеш копию
		AT45ReadPage(cur_file.pointerpageno, (unsigned char*)&cur_file.page);
    8ac8:	6d e0       	ldi	r22, 0x0D	; 13
    8aca:	78 e0       	ldi	r23, 0x08	; 8
    8acc:	80 91 09 08 	lds	r24, 0x0809
    8ad0:	90 91 0a 08 	lds	r25, 0x080A
    8ad4:	0e 94 95 3f 	call	0x7f2a <AT45ReadPage>
		cur_file.cachepageno = cur_file.pointerpageno;
    8ad8:	80 91 09 08 	lds	r24, 0x0809
    8adc:	90 91 0a 08 	lds	r25, 0x080A
    8ae0:	90 93 08 08 	sts	0x0808, r25
    8ae4:	80 93 07 08 	sts	0x0807, r24
	}

	//  если мы здесь - в файл писать можно, и место есть
	cur_file.page[cur_file.pointeroffset] = byte;
    8ae8:	80 91 0b 08 	lds	r24, 0x080B
    8aec:	90 91 0c 08 	lds	r25, 0x080C
    8af0:	fc 01       	movw	r30, r24
    8af2:	e3 5f       	subi	r30, 0xF3	; 243
    8af4:	f7 4f       	sbci	r31, 0xF7	; 247
    8af6:	89 81       	ldd	r24, Y+1	; 0x01
    8af8:	80 83       	st	Z, r24
	cur_file.pointeroffset++;
    8afa:	80 91 0b 08 	lds	r24, 0x080B
    8afe:	90 91 0c 08 	lds	r25, 0x080C
    8b02:	01 96       	adiw	r24, 0x01	; 1
    8b04:	90 93 0c 08 	sts	0x080C, r25
    8b08:	80 93 0b 08 	sts	0x080B, r24
	cur_file.pointer++;
    8b0c:	80 91 03 08 	lds	r24, 0x0803
    8b10:	90 91 04 08 	lds	r25, 0x0804
    8b14:	01 96       	adiw	r24, 0x01	; 1
    8b16:	90 93 04 08 	sts	0x0804, r25
    8b1a:	80 93 03 08 	sts	0x0803, r24

	if (cur_file.pointeroffset > cur_file.size)
    8b1e:	20 91 0b 08 	lds	r18, 0x080B
    8b22:	30 91 0c 08 	lds	r19, 0x080C
    8b26:	80 91 01 08 	lds	r24, 0x0801
    8b2a:	90 91 02 08 	lds	r25, 0x0802
    8b2e:	82 17       	cp	r24, r18
    8b30:	93 07       	cpc	r25, r19
    8b32:	48 f4       	brcc	.+18     	; 0x8b46 <fatxWriteByteToFile+0xda>
		cur_file.size++;							//  добавление в конец файла
    8b34:	80 91 01 08 	lds	r24, 0x0801
    8b38:	90 91 02 08 	lds	r25, 0x0802
    8b3c:	01 96       	adiw	r24, 0x01	; 1
    8b3e:	90 93 02 08 	sts	0x0802, r25
    8b42:	80 93 01 08 	sts	0x0801, r24

	if (PAGE_USER_AREA == cur_file.pointeroffset)
    8b46:	80 91 0b 08 	lds	r24, 0x080B
    8b4a:	90 91 0c 08 	lds	r25, 0x080C
    8b4e:	22 e0       	ldi	r18, 0x02	; 2
    8b50:	80 30       	cpi	r24, 0x00	; 0
    8b52:	92 07       	cpc	r25, r18
    8b54:	a1 f4       	brne	.+40     	; 0x8b7e <fatxWriteByteToFile+0x112>
	{	//  дошли до конца текущей страницы
		
		//  сохраняем последние изменения
		fatxFlushFile();
    8b56:	0e 94 ce 45 	call	0x8b9c <fatxFlushFile>

		cur_file.pointerpageno = fatxGetEmptyPage();
    8b5a:	0e 94 d1 40 	call	0x81a2 <fatxGetEmptyPage>
    8b5e:	90 93 0a 08 	sts	0x080A, r25
    8b62:	80 93 09 08 	sts	0x0809, r24
		if (!cur_file.pointerpageno)
    8b66:	80 91 09 08 	lds	r24, 0x0809
    8b6a:	90 91 0a 08 	lds	r25, 0x080A
    8b6e:	00 97       	sbiw	r24, 0x00	; 0
    8b70:	31 f4       	brne	.+12     	; 0x8b7e <fatxWriteByteToFile+0x112>
		{	//  не удалось выделить файлу свободную страницу - кончились наверное...
			cur_file.pointerpageno = 0xFFFF;
    8b72:	8f ef       	ldi	r24, 0xFF	; 255
    8b74:	9f ef       	ldi	r25, 0xFF	; 255
    8b76:	90 93 0a 08 	sts	0x080A, r25
    8b7a:	80 93 09 08 	sts	0x0809, r24
		}	
	}

	return 1;
    8b7e:	81 e0       	ldi	r24, 0x01	; 1
    8b80:	90 e0       	ldi	r25, 0x00	; 0
    8b82:	9b 83       	std	Y+3, r25	; 0x03
    8b84:	8a 83       	std	Y+2, r24	; 0x02
}
    8b86:	8a 81       	ldd	r24, Y+2	; 0x02
    8b88:	9b 81       	ldd	r25, Y+3	; 0x03
    8b8a:	23 96       	adiw	r28, 0x03	; 3
    8b8c:	0f b6       	in	r0, 0x3f	; 63
    8b8e:	f8 94       	cli
    8b90:	de bf       	out	0x3e, r29	; 62
    8b92:	0f be       	out	0x3f, r0	; 63
    8b94:	cd bf       	out	0x3d, r28	; 61
    8b96:	df 91       	pop	r29
    8b98:	cf 91       	pop	r28
    8b9a:	08 95       	ret

00008b9c <fatxFlushFile>:

//  сохраняет последние изменения в файле - последнюю измененную страницу и 
//  новую длину
char fatxFlushFile(void)
{
    8b9c:	cf 93       	push	r28
    8b9e:	df 93       	push	r29
    8ba0:	cd b7       	in	r28, 0x3d	; 61
    8ba2:	de b7       	in	r29, 0x3e	; 62
    8ba4:	22 97       	sbiw	r28, 0x02	; 2
    8ba6:	0f b6       	in	r0, 0x3f	; 63
    8ba8:	f8 94       	cli
    8baa:	de bf       	out	0x3e, r29	; 62
    8bac:	0f be       	out	0x3f, r0	; 63
    8bae:	cd bf       	out	0x3d, r28	; 61
	if ((0xFFFF == cur_file.fileno) ||
    8bb0:	80 91 fd 07 	lds	r24, 0x07FD
    8bb4:	90 91 fe 07 	lds	r25, 0x07FE
    8bb8:	2f ef       	ldi	r18, 0xFF	; 255
    8bba:	8f 3f       	cpi	r24, 0xFF	; 255
    8bbc:	92 07       	cpc	r25, r18
    8bbe:	41 f0       	breq	.+16     	; 0x8bd0 <fatxFlushFile+0x34>
    8bc0:	80 91 fb 07 	lds	r24, 0x07FB
    8bc4:	90 91 fc 07 	lds	r25, 0x07FC
    8bc8:	81 30       	cpi	r24, 0x01	; 1
    8bca:	91 05       	cpc	r25, r1
    8bcc:	09 f4       	brne	.+2      	; 0x8bd0 <fatxFlushFile+0x34>
    8bce:	03 c0       	rjmp	.+6      	; 0x8bd6 <fatxFlushFile+0x3a>
													//  нет открытого файла

	(OPEN_MODE_WRITE != cur_file.mode))
		return 0;									//  файл не открыт для записи
    8bd0:	1a 82       	std	Y+2, r1	; 0x02
    8bd2:	19 82       	std	Y+1, r1	; 0x01
    8bd4:	35 c0       	rjmp	.+106    	; 0x8c40 <fatxFlushFile+0xa4>

	//  обновляем копию каталога в памяти
	(*(PFILE_ENTRY)(&rootdir[cur_file.fileno << 1])).size = cur_file.size;
    8bd6:	80 91 fd 07 	lds	r24, 0x07FD
    8bda:	90 91 fe 07 	lds	r25, 0x07FE
    8bde:	88 0f       	add	r24, r24
    8be0:	99 1f       	adc	r25, r25
    8be2:	88 0f       	add	r24, r24
    8be4:	99 1f       	adc	r25, r25
    8be6:	fc 01       	movw	r30, r24
    8be8:	e3 5f       	subi	r30, 0xF3	; 243
    8bea:	f5 4f       	sbci	r31, 0xF5	; 245
    8bec:	80 91 01 08 	lds	r24, 0x0801
    8bf0:	90 91 02 08 	lds	r25, 0x0802
    8bf4:	93 83       	std	Z+3, r25	; 0x03
    8bf6:	82 83       	std	Z+2, r24	; 0x02

	//  обновляем FileEntry в RootDir'e - изменилось поле size
	AT45WriteWordToPage(FAT_SIZE, (cur_file.fileno << 1) + 1, cur_file.size);
    8bf8:	80 91 fd 07 	lds	r24, 0x07FD
    8bfc:	88 0f       	add	r24, r24
    8bfe:	8f 5f       	subi	r24, 0xFF	; 255
    8c00:	40 91 01 08 	lds	r20, 0x0801
    8c04:	50 91 02 08 	lds	r21, 0x0802
    8c08:	68 2f       	mov	r22, r24
    8c0a:	80 e1       	ldi	r24, 0x10	; 16
    8c0c:	90 e0       	ldi	r25, 0x00	; 0
    8c0e:	0e 94 31 3f 	call	0x7e62 <AT45WriteWordToPage>

	if (0xFFFF != cur_file.cachepageno)
    8c12:	80 91 07 08 	lds	r24, 0x0807
    8c16:	90 91 08 08 	lds	r25, 0x0808
    8c1a:	2f ef       	ldi	r18, 0xFF	; 255
    8c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    8c1e:	92 07       	cpc	r25, r18
    8c20:	59 f0       	breq	.+22     	; 0x8c38 <fatxFlushFile+0x9c>
	{	//  если была кешированная страница

		//  записываем буфер кеша в буфер АТ45
		AT45WriteBuffer((unsigned char*)&cur_file.page);
    8c22:	8d e0       	ldi	r24, 0x0D	; 13
    8c24:	98 e0       	ldi	r25, 0x08	; 8
    8c26:	0e 94 06 40 	call	0x800c <AT45WriteBuffer>
		//  пишем из буфера АТ45 во флеш
		AT45WriteBufferToPage(0, cur_file.cachepageno);
    8c2a:	60 91 07 08 	lds	r22, 0x0807
    8c2e:	70 91 08 08 	lds	r23, 0x0808
    8c32:	80 e0       	ldi	r24, 0x00	; 0
    8c34:	0e 94 3c 3c 	call	0x7878 <AT45WriteBufferToPage>
	}

	return 1;
    8c38:	81 e0       	ldi	r24, 0x01	; 1
    8c3a:	90 e0       	ldi	r25, 0x00	; 0
    8c3c:	9a 83       	std	Y+2, r25	; 0x02
    8c3e:	89 83       	std	Y+1, r24	; 0x01
}
    8c40:	89 81       	ldd	r24, Y+1	; 0x01
    8c42:	9a 81       	ldd	r25, Y+2	; 0x02
    8c44:	22 96       	adiw	r28, 0x02	; 2
    8c46:	0f b6       	in	r0, 0x3f	; 63
    8c48:	f8 94       	cli
    8c4a:	de bf       	out	0x3e, r29	; 62
    8c4c:	0f be       	out	0x3f, r0	; 63
    8c4e:	cd bf       	out	0x3d, r28	; 61
    8c50:	df 91       	pop	r29
    8c52:	cf 91       	pop	r28
    8c54:	08 95       	ret

00008c56 <ISR_T1_Overflow>:
// Timer overflow interrupt service routine
//**************************************************************************

void ISR_T1_Overflow(void)
{
    8c56:	cf 93       	push	r28
    8c58:	df 93       	push	r29
    8c5a:	cd b7       	in	r28, 0x3d	; 61
    8c5c:	de b7       	in	r29, 0x3e	; 62
  // move Pointer about step width aheaed
  i_CurSinValA += x_SWa;
    8c5e:	80 91 71 06 	lds	r24, 0x0671
    8c62:	28 2f       	mov	r18, r24
    8c64:	33 27       	eor	r19, r19
    8c66:	80 91 73 06 	lds	r24, 0x0673
    8c6a:	90 91 74 06 	lds	r25, 0x0674
    8c6e:	82 0f       	add	r24, r18
    8c70:	93 1f       	adc	r25, r19
    8c72:	90 93 74 06 	sts	0x0674, r25
    8c76:	80 93 73 06 	sts	0x0673, r24
  i_CurSinValB += x_SWb;
    8c7a:	80 91 72 06 	lds	r24, 0x0672
    8c7e:	28 2f       	mov	r18, r24
    8c80:	33 27       	eor	r19, r19
    8c82:	80 91 75 06 	lds	r24, 0x0675
    8c86:	90 91 76 06 	lds	r25, 0x0676
    8c8a:	82 0f       	add	r24, r18
    8c8c:	93 1f       	adc	r25, r19
    8c8e:	90 93 76 06 	sts	0x0676, r25
    8c92:	80 93 75 06 	sts	0x0675, r24
  // normalize Temp-Pointer
  i_TmpSinValA  =  (char)(((i_CurSinValA+4) >> 3)&(0x007F));
    8c96:	80 91 73 06 	lds	r24, 0x0673
    8c9a:	90 91 74 06 	lds	r25, 0x0674
    8c9e:	04 96       	adiw	r24, 0x04	; 4
    8ca0:	96 95       	lsr	r25
    8ca2:	87 95       	ror	r24
    8ca4:	96 95       	lsr	r25
    8ca6:	87 95       	ror	r24
    8ca8:	96 95       	lsr	r25
    8caa:	87 95       	ror	r24
    8cac:	99 27       	eor	r25, r25
    8cae:	87 fd       	sbrc	r24, 7
    8cb0:	90 95       	com	r25
    8cb2:	8f 77       	andi	r24, 0x7F	; 127
    8cb4:	90 70       	andi	r25, 0x00	; 0
    8cb6:	90 93 0e 0c 	sts	0x0C0E, r25
    8cba:	80 93 0d 0c 	sts	0x0C0D, r24
  i_TmpSinValB  =  (char)(((i_CurSinValB+4) >> 3)&(0x007F));
    8cbe:	80 91 75 06 	lds	r24, 0x0675
    8cc2:	90 91 76 06 	lds	r25, 0x0676
    8cc6:	04 96       	adiw	r24, 0x04	; 4
    8cc8:	96 95       	lsr	r25
    8cca:	87 95       	ror	r24
    8ccc:	96 95       	lsr	r25
    8cce:	87 95       	ror	r24
    8cd0:	96 95       	lsr	r25
    8cd2:	87 95       	ror	r24
    8cd4:	99 27       	eor	r25, r25
    8cd6:	87 fd       	sbrc	r24, 7
    8cd8:	90 95       	com	r25
    8cda:	8f 77       	andi	r24, 0x7F	; 127
    8cdc:	90 70       	andi	r25, 0x00	; 0
    8cde:	90 93 10 0c 	sts	0x0C10, r25
    8ce2:	80 93 0f 0c 	sts	0x0C0F, r24
  // calculate PWM value: high frequency value + 3/4 low frequency value

  OCR1B = (auc_SinParam[i_TmpSinValA] + (auc_SinParam[i_TmpSinValB]-(auc_SinParam[i_TmpSinValB]>>2)));
    8ce6:	80 91 0d 0c 	lds	r24, 0x0C0D
    8cea:	90 91 0e 0c 	lds	r25, 0x0C0E
    8cee:	fc 01       	movw	r30, r24
    8cf0:	ef 56       	subi	r30, 0x6F	; 111
    8cf2:	fa 4f       	sbci	r31, 0xFA	; 250
    8cf4:	80 81       	ld	r24, Z
    8cf6:	48 2f       	mov	r20, r24
    8cf8:	55 27       	eor	r21, r21
    8cfa:	80 91 0f 0c 	lds	r24, 0x0C0F
    8cfe:	90 91 10 0c 	lds	r25, 0x0C10
    8d02:	fc 01       	movw	r30, r24
    8d04:	ef 56       	subi	r30, 0x6F	; 111
    8d06:	fa 4f       	sbci	r31, 0xFA	; 250
    8d08:	80 81       	ld	r24, Z
    8d0a:	28 2f       	mov	r18, r24
    8d0c:	33 27       	eor	r19, r19
    8d0e:	80 91 0f 0c 	lds	r24, 0x0C0F
    8d12:	90 91 10 0c 	lds	r25, 0x0C10
    8d16:	fc 01       	movw	r30, r24
    8d18:	ef 56       	subi	r30, 0x6F	; 111
    8d1a:	fa 4f       	sbci	r31, 0xFA	; 250
    8d1c:	80 81       	ld	r24, Z
    8d1e:	86 95       	lsr	r24
    8d20:	86 95       	lsr	r24
    8d22:	99 27       	eor	r25, r25
    8d24:	28 1b       	sub	r18, r24
    8d26:	39 0b       	sbc	r19, r25
    8d28:	c9 01       	movw	r24, r18
    8d2a:	84 0f       	add	r24, r20
    8d2c:	95 1f       	adc	r25, r21
    8d2e:	90 93 49 00 	sts	0x0049, r25
    8d32:	80 93 48 00 	sts	0x0048, r24
    8d36:	df 91       	pop	r29
    8d38:	cf 91       	pop	r28
    8d3a:	08 95       	ret

00008d3c <initDTMF>:
}

//**************************************************************************
// Initialization
//**************************************************************************
void initDTMF (void)
{
    8d3c:	cf 93       	push	r28
    8d3e:	df 93       	push	r29
    8d40:	cd b7       	in	r28, 0x3d	; 61
    8d42:	de b7       	in	r29, 0x3e	; 62
  TIMSK  = TIMSK | 0x80;                     // Int T1 Overflow enabled
    8d44:	80 91 57 00 	lds	r24, 0x0057
    8d48:	80 68       	ori	r24, 0x80	; 128
    8d4a:	80 93 57 00 	sts	0x0057, r24
  TCCR1A = (1<<COM1B1)+(1<<WGM10);   // non inverting / 8Bit PWM
    8d4e:	81 e2       	ldi	r24, 0x21	; 33
    8d50:	80 93 4f 00 	sts	0x004F, r24
  TCCR1B = (1<<CS11);                // CLK/1
    8d54:	82 e0       	ldi	r24, 0x02	; 2
    8d56:	80 93 4e 00 	sts	0x004E, r24
    8d5a:	df 91       	pop	r29
    8d5c:	cf 91       	pop	r28
    8d5e:	08 95       	ret

00008d60 <SendDTMF>:
 // DDRD   = (1 << PD5);               // PD5 (OC1A) as output
//  sei();                     	     // Interrupts enabled
/*
	x_SWb = auc_frequencyL[3];
	x_SWa = auc_frequencyH[3];
*/
}

//**************************************************************************
// Time delay to ensure a correct setting of the pins of Port B
//**************************************************************************
/*
void Delay (void)
{
  int i;
  for (i = 0; i < delaycyc; i++)
  	asm("nop");
}
*/
//**************************************************************************
// MAIN
// Read from portB (eg: using evaluation board switch) which
// tone to generate, extract mixing high frequency
// (column) and low frequency (row), and then
// fix x_SWa and x_SWb
// row    -> PINB high nibble
// column -> PINB low nibble
//**************************************************************************
/*
void main (void)
{
  unsigned char uc_Input;
  unsigned char uc_Counter = 0;
  init();
  for(;;){
    // high nibble - rows
    DDRB  = 0x0F;                     // high nibble input / low nibble output
    PORTB = 0xF0;                     // high nibble pull up / low nibble low value
    uc_Counter = 0;
    Delay();                          // wait for Port B lines to be set up correctly
    uc_Input = PINB;                  // read Port B
    do
    {
      if(!(uc_Input & 0x80))          // check if MSB is low
      {
                                      // if yes get step width and end loop
        x_SWb = auc_frequencyL[uc_Counter];
        uc_Counter = 4;
      }
      else
      {
        x_SWb = 0;                    // no frequency modulation needed
      }
      uc_Counter++;
      uc_Input = uc_Input << 1;       // shift Bits one left
    } while ((uc_Counter < 4));

    // low nibble - columns
    DDRB  = 0xF0;                     // high nibble output / low nibble input
    PORTB = 0x0F;                     // high nibble low value / low nibble pull up
    uc_Counter = 0;
    Delay();                          // wait for Port B lines to be set up correctly
    uc_Input = PINB;
    uc_Input = uc_Input << 4;
    do
    {
      if(!(uc_Input & 0x80))          // check if MSB is low
      {
                                      // if yes get delay and end loop
        x_SWa = auc_frequencyH[uc_Counter];
        uc_Counter = 4;
      }
      else
      {
        x_SWa = 0;
      }
      uc_Counter++;
      uc_Input = uc_Input << 1;
    } while (uc_Counter < 4);
  }
}
*/

void SendDTMF(unsigned char kod)
{
    8d60:	cf 93       	push	r28
    8d62:	df 93       	push	r29
    8d64:	cd b7       	in	r28, 0x3d	; 61
    8d66:	de b7       	in	r29, 0x3e	; 62
    8d68:	21 97       	sbiw	r28, 0x01	; 1
    8d6a:	0f b6       	in	r0, 0x3f	; 63
    8d6c:	f8 94       	cli
    8d6e:	de bf       	out	0x3e, r29	; 62
    8d70:	0f be       	out	0x3f, r0	; 63
    8d72:	cd bf       	out	0x3d, r28	; 61
    8d74:	89 83       	std	Y+1, r24	; 0x01
//	g_genDTMF = 1;
//	g_cntDTMF = 0;
	initDTMF();
    8d76:	0e 94 9e 46 	call	0x8d3c <initDTMF>

	if (VK_1 == kod)
    8d7a:	89 81       	ldd	r24, Y+1	; 0x01
    8d7c:	81 31       	cpi	r24, 0x11	; 17
    8d7e:	49 f4       	brne	.+18     	; 0x8d92 <SendDTMF+0x32>
	{
		x_SWb = auc_frequencyL[0];
    8d80:	80 91 15 06 	lds	r24, 0x0615
    8d84:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[0];
    8d88:	80 91 11 06 	lds	r24, 0x0611
    8d8c:	80 93 71 06 	sts	0x0671, r24
    8d90:	6b c0       	rjmp	.+214    	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_2 == kod)
    8d92:	89 81       	ldd	r24, Y+1	; 0x01
    8d94:	82 31       	cpi	r24, 0x12	; 18
    8d96:	49 f4       	brne	.+18     	; 0x8daa <SendDTMF+0x4a>
	{
		x_SWb = auc_frequencyL[0];
    8d98:	80 91 15 06 	lds	r24, 0x0615
    8d9c:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[1];
    8da0:	80 91 12 06 	lds	r24, 0x0612
    8da4:	80 93 71 06 	sts	0x0671, r24
    8da8:	5f c0       	rjmp	.+190    	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_3 == kod)
    8daa:	89 81       	ldd	r24, Y+1	; 0x01
    8dac:	83 31       	cpi	r24, 0x13	; 19
    8dae:	49 f4       	brne	.+18     	; 0x8dc2 <SendDTMF+0x62>
	{
		x_SWb = auc_frequencyL[0];
    8db0:	80 91 15 06 	lds	r24, 0x0615
    8db4:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[2];
    8db8:	80 91 13 06 	lds	r24, 0x0613
    8dbc:	80 93 71 06 	sts	0x0671, r24
    8dc0:	53 c0       	rjmp	.+166    	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_4 == kod)
    8dc2:	89 81       	ldd	r24, Y+1	; 0x01
    8dc4:	85 30       	cpi	r24, 0x05	; 5
    8dc6:	49 f4       	brne	.+18     	; 0x8dda <SendDTMF+0x7a>
	{
		x_SWb = auc_frequencyL[1];
    8dc8:	80 91 16 06 	lds	r24, 0x0616
    8dcc:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[0];
    8dd0:	80 91 11 06 	lds	r24, 0x0611
    8dd4:	80 93 71 06 	sts	0x0671, r24
    8dd8:	47 c0       	rjmp	.+142    	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_5 == kod)
    8dda:	89 81       	ldd	r24, Y+1	; 0x01
    8ddc:	86 30       	cpi	r24, 0x06	; 6
    8dde:	49 f4       	brne	.+18     	; 0x8df2 <SendDTMF+0x92>
	{
		x_SWb = auc_frequencyL[1];
    8de0:	80 91 16 06 	lds	r24, 0x0616
    8de4:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[1];
    8de8:	80 91 12 06 	lds	r24, 0x0612
    8dec:	80 93 71 06 	sts	0x0671, r24
    8df0:	3b c0       	rjmp	.+118    	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_6 == kod)
    8df2:	89 81       	ldd	r24, Y+1	; 0x01
    8df4:	87 30       	cpi	r24, 0x07	; 7
    8df6:	49 f4       	brne	.+18     	; 0x8e0a <SendDTMF+0xaa>
	{
		x_SWb = auc_frequencyL[1];
    8df8:	80 91 16 06 	lds	r24, 0x0616
    8dfc:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[2];
    8e00:	80 91 13 06 	lds	r24, 0x0613
    8e04:	80 93 71 06 	sts	0x0671, r24
    8e08:	2f c0       	rjmp	.+94     	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_7 == kod)
    8e0a:	89 81       	ldd	r24, Y+1	; 0x01
    8e0c:	89 30       	cpi	r24, 0x09	; 9
    8e0e:	49 f4       	brne	.+18     	; 0x8e22 <SendDTMF+0xc2>
	{
		x_SWb = auc_frequencyL[2];
    8e10:	80 91 17 06 	lds	r24, 0x0617
    8e14:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[0];
    8e18:	80 91 11 06 	lds	r24, 0x0611
    8e1c:	80 93 71 06 	sts	0x0671, r24
    8e20:	23 c0       	rjmp	.+70     	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_8 == kod)
    8e22:	89 81       	ldd	r24, Y+1	; 0x01
    8e24:	8a 30       	cpi	r24, 0x0A	; 10
    8e26:	49 f4       	brne	.+18     	; 0x8e3a <SendDTMF+0xda>
	{
		x_SWb = auc_frequencyL[2];
    8e28:	80 91 17 06 	lds	r24, 0x0617
    8e2c:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[1];
    8e30:	80 91 12 06 	lds	r24, 0x0612
    8e34:	80 93 71 06 	sts	0x0671, r24
    8e38:	17 c0       	rjmp	.+46     	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_9 == kod)
    8e3a:	89 81       	ldd	r24, Y+1	; 0x01
    8e3c:	8b 30       	cpi	r24, 0x0B	; 11
    8e3e:	49 f4       	brne	.+18     	; 0x8e52 <SendDTMF+0xf2>
	{
		x_SWb = auc_frequencyL[2];
    8e40:	80 91 17 06 	lds	r24, 0x0617
    8e44:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[2];
    8e48:	80 91 13 06 	lds	r24, 0x0613
    8e4c:	80 93 71 06 	sts	0x0671, r24
    8e50:	0b c0       	rjmp	.+22     	; 0x8e68 <SendDTMF+0x108>
	} else
	if (VK_0 == kod)
    8e52:	89 81       	ldd	r24, Y+1	; 0x01
    8e54:	8e 30       	cpi	r24, 0x0E	; 14
    8e56:	41 f4       	brne	.+16     	; 0x8e68 <SendDTMF+0x108>
	{
		x_SWb = auc_frequencyL[3];
    8e58:	80 91 18 06 	lds	r24, 0x0618
    8e5c:	80 93 72 06 	sts	0x0672, r24
		x_SWa = auc_frequencyH[1];
    8e60:	80 91 12 06 	lds	r24, 0x0612
    8e64:	80 93 71 06 	sts	0x0671, r24
    8e68:	21 96       	adiw	r28, 0x01	; 1
    8e6a:	0f b6       	in	r0, 0x3f	; 63
    8e6c:	f8 94       	cli
    8e6e:	de bf       	out	0x3e, r29	; 62
    8e70:	0f be       	out	0x3f, r0	; 63
    8e72:	cd bf       	out	0x3d, r28	; 61
    8e74:	df 91       	pop	r29
    8e76:	cf 91       	pop	r28
    8e78:	08 95       	ret

00008e7a <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
    8e7a:	cf 93       	push	r28
    8e7c:	df 93       	push	r29
    8e7e:	cd b7       	in	r28, 0x3d	; 61
    8e80:	de b7       	in	r29, 0x3e	; 62
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    8e82:	80 91 26 00 	lds	r24, 0x0026
    8e86:	80 68       	ori	r24, 0x80	; 128
    8e88:	80 93 26 00 	sts	0x0026, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    8e8c:	80 91 26 00 	lds	r24, 0x0026
    8e90:	8f 7d       	andi	r24, 0xDF	; 223
    8e92:	80 93 26 00 	sts	0x0026, r24
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
    8e96:	86 e0       	ldi	r24, 0x06	; 6
    8e98:	0e 94 73 47 	call	0x8ee6 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE);	// set default reference
    8e9c:	81 e0       	ldi	r24, 0x01	; 1
    8e9e:	0e 94 8f 47 	call	0x8f1e <a2dSetReference>
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    8ea2:	80 91 27 00 	lds	r24, 0x0027
    8ea6:	8f 7d       	andi	r24, 0xDF	; 223
    8ea8:	80 93 27 00 	sts	0x0027, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    8eac:	80 91 26 00 	lds	r24, 0x0026
    8eb0:	88 60       	ori	r24, 0x08	; 8
    8eb2:	80 93 26 00 	sts	0x0026, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    8eb6:	10 92 11 0c 	sts	0x0C11, r1
	sei();							// turn on interrupts (if not already on)
    8eba:	78 94       	sei
    8ebc:	df 91       	pop	r29
    8ebe:	cf 91       	pop	r28
    8ec0:	08 95       	ret

00008ec2 <a2dOff>:
}

// turn off a2d converter
void a2dOff(void)
{
    8ec2:	cf 93       	push	r28
    8ec4:	df 93       	push	r29
    8ec6:	cd b7       	in	r28, 0x3d	; 61
    8ec8:	de b7       	in	r29, 0x3e	; 62
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    8eca:	80 91 26 00 	lds	r24, 0x0026
    8ece:	87 7f       	andi	r24, 0xF7	; 247
    8ed0:	80 93 26 00 	sts	0x0026, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    8ed4:	9f e7       	ldi	r25, 0x7F	; 127
    8ed6:	80 91 26 00 	lds	r24, 0x0026
    8eda:	89 23       	and	r24, r25
    8edc:	80 93 26 00 	sts	0x0026, r24
    8ee0:	df 91       	pop	r29
    8ee2:	cf 91       	pop	r28
    8ee4:	08 95       	ret

00008ee6 <a2dSetPrescaler>:
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
    8ee6:	cf 93       	push	r28
    8ee8:	df 93       	push	r29
    8eea:	cd b7       	in	r28, 0x3d	; 61
    8eec:	de b7       	in	r29, 0x3e	; 62
    8eee:	21 97       	sbiw	r28, 0x01	; 1
    8ef0:	0f b6       	in	r0, 0x3f	; 63
    8ef2:	f8 94       	cli
    8ef4:	de bf       	out	0x3e, r29	; 62
    8ef6:	0f be       	out	0x3f, r0	; 63
    8ef8:	cd bf       	out	0x3d, r28	; 61
    8efa:	89 83       	std	Y+1, r24	; 0x01
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    8efc:	80 91 26 00 	lds	r24, 0x0026
    8f00:	98 2f       	mov	r25, r24
    8f02:	98 7f       	andi	r25, 0xF8	; 248
    8f04:	89 81       	ldd	r24, Y+1	; 0x01
    8f06:	89 2b       	or	r24, r25
    8f08:	80 93 26 00 	sts	0x0026, r24
    8f0c:	21 96       	adiw	r28, 0x01	; 1
    8f0e:	0f b6       	in	r0, 0x3f	; 63
    8f10:	f8 94       	cli
    8f12:	de bf       	out	0x3e, r29	; 62
    8f14:	0f be       	out	0x3f, r0	; 63
    8f16:	cd bf       	out	0x3d, r28	; 61
    8f18:	df 91       	pop	r29
    8f1a:	cf 91       	pop	r28
    8f1c:	08 95       	ret

00008f1e <a2dSetReference>:
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
    8f1e:	cf 93       	push	r28
    8f20:	df 93       	push	r29
    8f22:	cd b7       	in	r28, 0x3d	; 61
    8f24:	de b7       	in	r29, 0x3e	; 62
    8f26:	21 97       	sbiw	r28, 0x01	; 1
    8f28:	0f b6       	in	r0, 0x3f	; 63
    8f2a:	f8 94       	cli
    8f2c:	de bf       	out	0x3e, r29	; 62
    8f2e:	0f be       	out	0x3f, r0	; 63
    8f30:	cd bf       	out	0x3d, r28	; 61
    8f32:	89 83       	std	Y+1, r24	; 0x01
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    8f34:	9f e3       	ldi	r25, 0x3F	; 63
    8f36:	80 91 27 00 	lds	r24, 0x0027
    8f3a:	29 2f       	mov	r18, r25
    8f3c:	28 23       	and	r18, r24
    8f3e:	89 81       	ldd	r24, Y+1	; 0x01
    8f40:	99 27       	eor	r25, r25
    8f42:	00 24       	eor	r0, r0
    8f44:	96 95       	lsr	r25
    8f46:	87 95       	ror	r24
    8f48:	07 94       	ror	r0
    8f4a:	96 95       	lsr	r25
    8f4c:	87 95       	ror	r24
    8f4e:	07 94       	ror	r0
    8f50:	98 2f       	mov	r25, r24
    8f52:	80 2d       	mov	r24, r0
    8f54:	82 2b       	or	r24, r18
    8f56:	80 93 27 00 	sts	0x0027, r24
    8f5a:	21 96       	adiw	r28, 0x01	; 1
    8f5c:	0f b6       	in	r0, 0x3f	; 63
    8f5e:	f8 94       	cli
    8f60:	de bf       	out	0x3e, r29	; 62
    8f62:	0f be       	out	0x3f, r0	; 63
    8f64:	cd bf       	out	0x3d, r28	; 61
    8f66:	df 91       	pop	r29
    8f68:	cf 91       	pop	r28
    8f6a:	08 95       	ret

00008f6c <a2dSetChannel>:
}

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
    8f6c:	cf 93       	push	r28
    8f6e:	df 93       	push	r29
    8f70:	cd b7       	in	r28, 0x3d	; 61
    8f72:	de b7       	in	r29, 0x3e	; 62
    8f74:	21 97       	sbiw	r28, 0x01	; 1
    8f76:	0f b6       	in	r0, 0x3f	; 63
    8f78:	f8 94       	cli
    8f7a:	de bf       	out	0x3e, r29	; 62
    8f7c:	0f be       	out	0x3f, r0	; 63
    8f7e:	cd bf       	out	0x3d, r28	; 61
    8f80:	89 83       	std	Y+1, r24	; 0x01
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    8f82:	80 91 27 00 	lds	r24, 0x0027
    8f86:	98 2f       	mov	r25, r24
    8f88:	90 7e       	andi	r25, 0xE0	; 224
    8f8a:	89 81       	ldd	r24, Y+1	; 0x01
    8f8c:	8f 71       	andi	r24, 0x1F	; 31
    8f8e:	89 2b       	or	r24, r25
    8f90:	80 93 27 00 	sts	0x0027, r24
    8f94:	21 96       	adiw	r28, 0x01	; 1
    8f96:	0f b6       	in	r0, 0x3f	; 63
    8f98:	f8 94       	cli
    8f9a:	de bf       	out	0x3e, r29	; 62
    8f9c:	0f be       	out	0x3f, r0	; 63
    8f9e:	cd bf       	out	0x3d, r28	; 61
    8fa0:	df 91       	pop	r29
    8fa2:	cf 91       	pop	r28
    8fa4:	08 95       	ret

00008fa6 <a2dStartConvert>:
}

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
    8fa6:	cf 93       	push	r28
    8fa8:	df 93       	push	r29
    8faa:	cd b7       	in	r28, 0x3d	; 61
    8fac:	de b7       	in	r29, 0x3e	; 62
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag
    8fae:	80 91 26 00 	lds	r24, 0x0026
    8fb2:	80 61       	ori	r24, 0x10	; 16
    8fb4:	80 93 26 00 	sts	0x0026, r24
	sbi(ADCSR, ADSC);	// start conversion
    8fb8:	80 91 26 00 	lds	r24, 0x0026
    8fbc:	80 64       	ori	r24, 0x40	; 64
    8fbe:	80 93 26 00 	sts	0x0026, r24
    8fc2:	df 91       	pop	r29
    8fc4:	cf 91       	pop	r28
    8fc6:	08 95       	ret

00008fc8 <a2dIsComplete>:
}

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
    8fc8:	cf 93       	push	r28
    8fca:	df 93       	push	r29
    8fcc:	cd b7       	in	r28, 0x3d	; 61
    8fce:	de b7       	in	r29, 0x3e	; 62
	return bit_is_set(ADCSR, ADSC);
    8fd0:	80 91 26 00 	lds	r24, 0x0026
    8fd4:	99 27       	eor	r25, r25
    8fd6:	80 74       	andi	r24, 0x40	; 64
    8fd8:	90 70       	andi	r25, 0x00	; 0
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	08 95       	ret

00008fe0 <a2dConvert10bit>:
}

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
    8fe0:	cf 93       	push	r28
    8fe2:	df 93       	push	r29
    8fe4:	cd b7       	in	r28, 0x3d	; 61
    8fe6:	de b7       	in	r29, 0x3e	; 62
    8fe8:	21 97       	sbiw	r28, 0x01	; 1
    8fea:	0f b6       	in	r0, 0x3f	; 63
    8fec:	f8 94       	cli
    8fee:	de bf       	out	0x3e, r29	; 62
    8ff0:	0f be       	out	0x3f, r0	; 63
    8ff2:	cd bf       	out	0x3d, r28	; 61
    8ff4:	89 83       	std	Y+1, r24	; 0x01
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    8ff6:	10 92 11 0c 	sts	0x0C11, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    8ffa:	80 91 27 00 	lds	r24, 0x0027
    8ffe:	98 2f       	mov	r25, r24
    9000:	90 7e       	andi	r25, 0xE0	; 224
    9002:	89 81       	ldd	r24, Y+1	; 0x01
    9004:	8f 71       	andi	r24, 0x1F	; 31
    9006:	89 2b       	or	r24, r25
    9008:	80 93 27 00 	sts	0x0027, r24
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag
    900c:	80 91 26 00 	lds	r24, 0x0026
    9010:	80 61       	ori	r24, 0x10	; 16
    9012:	80 93 26 00 	sts	0x0026, r24
	sbi(ADCSR, ADSC);						// start conversion
    9016:	80 91 26 00 	lds	r24, 0x0026
    901a:	80 64       	ori	r24, 0x40	; 64
    901c:	80 93 26 00 	sts	0x0026, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    9020:	80 91 26 00 	lds	r24, 0x0026
    9024:	99 27       	eor	r25, r25
    9026:	80 74       	andi	r24, 0x40	; 64
    9028:	90 70       	andi	r25, 0x00	; 0
    902a:	00 97       	sbiw	r24, 0x00	; 0
    902c:	09 f0       	breq	.+2      	; 0x9030 <a2dConvert10bit+0x50>
    902e:	f8 cf       	rjmp	.-16     	; 0x9020 <a2dConvert10bit+0x40>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
    9030:	80 91 24 00 	lds	r24, 0x0024
    9034:	28 2f       	mov	r18, r24
    9036:	33 27       	eor	r19, r19
    9038:	80 91 25 00 	lds	r24, 0x0025
    903c:	99 27       	eor	r25, r25
    903e:	98 2f       	mov	r25, r24
    9040:	88 27       	eor	r24, r24
    9042:	28 2b       	or	r18, r24
    9044:	39 2b       	or	r19, r25
    9046:	c9 01       	movw	r24, r18
    9048:	21 96       	adiw	r28, 0x01	; 1
    904a:	0f b6       	in	r0, 0x3f	; 63
    904c:	f8 94       	cli
    904e:	de bf       	out	0x3e, r29	; 62
    9050:	0f be       	out	0x3f, r0	; 63
    9052:	cd bf       	out	0x3d, r28	; 61
    9054:	df 91       	pop	r29
    9056:	cf 91       	pop	r28
    9058:	08 95       	ret

0000905a <a2dConvert8bit>:
}

// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
    905a:	cf 93       	push	r28
    905c:	df 93       	push	r29
    905e:	cd b7       	in	r28, 0x3d	; 61
    9060:	de b7       	in	r29, 0x3e	; 62
    9062:	21 97       	sbiw	r28, 0x01	; 1
    9064:	0f b6       	in	r0, 0x3f	; 63
    9066:	f8 94       	cli
    9068:	de bf       	out	0x3e, r29	; 62
    906a:	0f be       	out	0x3f, r0	; 63
    906c:	cd bf       	out	0x3d, r28	; 61
    906e:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    9070:	89 81       	ldd	r24, Y+1	; 0x01
    9072:	0e 94 f0 47 	call	0x8fe0 <a2dConvert10bit>
    9076:	96 95       	lsr	r25
    9078:	87 95       	ror	r24
    907a:	96 95       	lsr	r25
    907c:	87 95       	ror	r24
    907e:	99 27       	eor	r25, r25
    9080:	21 96       	adiw	r28, 0x01	; 1
    9082:	0f b6       	in	r0, 0x3f	; 63
    9084:	f8 94       	cli
    9086:	de bf       	out	0x3e, r29	; 62
    9088:	0f be       	out	0x3f, r0	; 63
    908a:	cd bf       	out	0x3d, r28	; 61
    908c:	df 91       	pop	r29
    908e:	cf 91       	pop	r28
    9090:	08 95       	ret

00009092 <__vector_21>:
}

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    9092:	1f 92       	push	r1
    9094:	0f 92       	push	r0
    9096:	0f b6       	in	r0, 0x3f	; 63
    9098:	0f 92       	push	r0
    909a:	11 24       	eor	r1, r1
    909c:	8f 93       	push	r24
    909e:	cf 93       	push	r28
    90a0:	df 93       	push	r29
    90a2:	cd b7       	in	r28, 0x3d	; 61
    90a4:	de b7       	in	r29, 0x3e	; 62
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    90a6:	8f ef       	ldi	r24, 0xFF	; 255
    90a8:	80 93 11 0c 	sts	0x0C11, r24
    90ac:	df 91       	pop	r29
    90ae:	cf 91       	pop	r28
    90b0:	8f 91       	pop	r24
    90b2:	0f 90       	pop	r0
    90b4:	0f be       	out	0x3f, r0	; 63
    90b6:	0f 90       	pop	r0
    90b8:	1f 90       	pop	r1
    90ba:	18 95       	reti

000090bc <__fixunssfsi>:
    90bc:	ef 92       	push	r14
    90be:	ff 92       	push	r15
    90c0:	0f 93       	push	r16
    90c2:	1f 93       	push	r17
    90c4:	7b 01       	movw	r14, r22
    90c6:	8c 01       	movw	r16, r24
    90c8:	20 e0       	ldi	r18, 0x00	; 0
    90ca:	30 e0       	ldi	r19, 0x00	; 0
    90cc:	40 e0       	ldi	r20, 0x00	; 0
    90ce:	5f e4       	ldi	r21, 0x4F	; 79
    90d0:	0e 94 dd 4b 	call	0x97ba <__gesf2>
    90d4:	88 23       	and	r24, r24
    90d6:	9c f0       	brlt	.+38     	; 0x90fe <__fixunssfsi+0x42>
    90d8:	20 e0       	ldi	r18, 0x00	; 0
    90da:	30 e0       	ldi	r19, 0x00	; 0
    90dc:	40 e0       	ldi	r20, 0x00	; 0
    90de:	5f ec       	ldi	r21, 0xCF	; 207
    90e0:	c8 01       	movw	r24, r16
    90e2:	b7 01       	movw	r22, r14
    90e4:	0e 94 ac 49 	call	0x9358 <__addsf3>
    90e8:	dc 01       	movw	r26, r24
    90ea:	cb 01       	movw	r24, r22
    90ec:	bc 01       	movw	r22, r24
    90ee:	cd 01       	movw	r24, r26
    90f0:	0e 94 77 4c 	call	0x98ee <__fixsfsi>
    90f4:	60 50       	subi	r22, 0x00	; 0
    90f6:	70 40       	sbci	r23, 0x00	; 0
    90f8:	80 40       	sbci	r24, 0x00	; 0
    90fa:	90 48       	sbci	r25, 0x80	; 128
    90fc:	04 c0       	rjmp	.+8      	; 0x9106 <__fixunssfsi+0x4a>
    90fe:	c8 01       	movw	r24, r16
    9100:	b7 01       	movw	r22, r14
    9102:	0e 94 77 4c 	call	0x98ee <__fixsfsi>
    9106:	1f 91       	pop	r17
    9108:	0f 91       	pop	r16
    910a:	ff 90       	pop	r15
    910c:	ef 90       	pop	r14
    910e:	08 95       	ret

00009110 <_fpadd_parts>:
    9110:	a0 e0       	ldi	r26, 0x00	; 0
    9112:	b0 e0       	ldi	r27, 0x00	; 0
    9114:	ee e8       	ldi	r30, 0x8E	; 142
    9116:	f8 e4       	ldi	r31, 0x48	; 72
    9118:	0c 94 ec 4f 	jmp	0x9fd8 <__prologue_saves__>
    911c:	8c 01       	movw	r16, r24
    911e:	7b 01       	movw	r14, r22
    9120:	5a 01       	movw	r10, r20
    9122:	dc 01       	movw	r26, r24
    9124:	8c 91       	ld	r24, X
    9126:	82 30       	cpi	r24, 0x02	; 2
    9128:	58 f0       	brcs	.+22     	; 0x9140 <_fpadd_parts+0x30>
    912a:	fb 01       	movw	r30, r22
    912c:	90 81       	ld	r25, Z
    912e:	92 30       	cpi	r25, 0x02	; 2
    9130:	10 f4       	brcc	.+4      	; 0x9136 <_fpadd_parts+0x26>
    9132:	a7 01       	movw	r20, r14
    9134:	0b c1       	rjmp	.+534    	; 0x934c <_fpadd_parts+0x23c>
    9136:	84 30       	cpi	r24, 0x04	; 4
    9138:	29 f4       	brne	.+10     	; 0x9144 <_fpadd_parts+0x34>
    913a:	94 30       	cpi	r25, 0x04	; 4
    913c:	09 f4       	brne	.+2      	; 0x9140 <_fpadd_parts+0x30>
    913e:	a6 c0       	rjmp	.+332    	; 0x928c <_fpadd_parts+0x17c>
    9140:	a8 01       	movw	r20, r16
    9142:	04 c1       	rjmp	.+520    	; 0x934c <_fpadd_parts+0x23c>
    9144:	94 30       	cpi	r25, 0x04	; 4
    9146:	a9 f3       	breq	.-22     	; 0x9132 <_fpadd_parts+0x22>
    9148:	92 30       	cpi	r25, 0x02	; 2
    914a:	09 f4       	brne	.+2      	; 0x914e <_fpadd_parts+0x3e>
    914c:	a9 c0       	rjmp	.+338    	; 0x92a0 <_fpadd_parts+0x190>
    914e:	82 30       	cpi	r24, 0x02	; 2
    9150:	81 f3       	breq	.-32     	; 0x9132 <_fpadd_parts+0x22>
    9152:	f8 01       	movw	r30, r16
    9154:	c2 80       	ldd	r12, Z+2	; 0x02
    9156:	d3 80       	ldd	r13, Z+3	; 0x03
    9158:	fb 01       	movw	r30, r22
    915a:	62 81       	ldd	r22, Z+2	; 0x02
    915c:	73 81       	ldd	r23, Z+3	; 0x03
    915e:	f8 01       	movw	r30, r16
    9160:	24 81       	ldd	r18, Z+4	; 0x04
    9162:	35 81       	ldd	r19, Z+5	; 0x05
    9164:	46 81       	ldd	r20, Z+6	; 0x06
    9166:	57 81       	ldd	r21, Z+7	; 0x07
    9168:	f7 01       	movw	r30, r14
    916a:	64 80       	ldd	r6, Z+4	; 0x04
    916c:	75 80       	ldd	r7, Z+5	; 0x05
    916e:	86 80       	ldd	r8, Z+6	; 0x06
    9170:	97 80       	ldd	r9, Z+7	; 0x07
    9172:	c6 01       	movw	r24, r12
    9174:	86 1b       	sub	r24, r22
    9176:	97 0b       	sbc	r25, r23
    9178:	97 fd       	sbrc	r25, 7
    917a:	d8 c0       	rjmp	.+432    	; 0x932c <_fpadd_parts+0x21c>
    917c:	80 97       	sbiw	r24, 0x20	; 32
    917e:	0c f4       	brge	.+2      	; 0x9182 <_fpadd_parts+0x72>
    9180:	6c c0       	rjmp	.+216    	; 0x925a <_fpadd_parts+0x14a>
    9182:	6c 15       	cp	r22, r12
    9184:	7d 05       	cpc	r23, r13
    9186:	0c f0       	brlt	.+2      	; 0x918a <_fpadd_parts+0x7a>
    9188:	ad c0       	rjmp	.+346    	; 0x92e4 <_fpadd_parts+0x1d4>
    918a:	66 24       	eor	r6, r6
    918c:	77 24       	eor	r7, r7
    918e:	43 01       	movw	r8, r6
    9190:	f8 01       	movw	r30, r16
    9192:	61 81       	ldd	r22, Z+1	; 0x01
    9194:	f7 01       	movw	r30, r14
    9196:	81 81       	ldd	r24, Z+1	; 0x01
    9198:	68 17       	cp	r22, r24
    919a:	09 f4       	brne	.+2      	; 0x919e <_fpadd_parts+0x8e>
    919c:	99 c0       	rjmp	.+306    	; 0x92d0 <_fpadd_parts+0x1c0>
    919e:	66 23       	and	r22, r22
    91a0:	09 f4       	brne	.+2      	; 0x91a4 <_fpadd_parts+0x94>
    91a2:	91 c0       	rjmp	.+290    	; 0x92c6 <_fpadd_parts+0x1b6>
    91a4:	62 1a       	sub	r6, r18
    91a6:	73 0a       	sbc	r7, r19
    91a8:	84 0a       	sbc	r8, r20
    91aa:	95 0a       	sbc	r9, r21
    91ac:	a4 01       	movw	r20, r8
    91ae:	93 01       	movw	r18, r6
    91b0:	57 fd       	sbrc	r21, 7
    91b2:	c0 c0       	rjmp	.+384    	; 0x9334 <_fpadd_parts+0x224>
    91b4:	f5 01       	movw	r30, r10
    91b6:	11 82       	std	Z+1, r1	; 0x01
    91b8:	b6 01       	movw	r22, r12
    91ba:	19 01       	movw	r2, r18
    91bc:	2a 01       	movw	r4, r20
    91be:	79 01       	movw	r14, r18
    91c0:	8a 01       	movw	r16, r20
    91c2:	39 01       	movw	r6, r18
    91c4:	4a 01       	movw	r8, r20
    91c6:	08 94       	sec
    91c8:	61 08       	sbc	r6, r1
    91ca:	71 08       	sbc	r7, r1
    91cc:	81 08       	sbc	r8, r1
    91ce:	91 08       	sbc	r9, r1
    91d0:	ff ef       	ldi	r31, 0xFF	; 255
    91d2:	6f 16       	cp	r6, r31
    91d4:	ff ef       	ldi	r31, 0xFF	; 255
    91d6:	7f 06       	cpc	r7, r31
    91d8:	ff ef       	ldi	r31, 0xFF	; 255
    91da:	8f 06       	cpc	r8, r31
    91dc:	ff e3       	ldi	r31, 0x3F	; 63
    91de:	9f 06       	cpc	r9, r31
    91e0:	f0 f4       	brcc	.+60     	; 0x921e <_fpadd_parts+0x10e>
    91e2:	a8 01       	movw	r20, r16
    91e4:	97 01       	movw	r18, r14
    91e6:	22 0f       	add	r18, r18
    91e8:	33 1f       	adc	r19, r19
    91ea:	44 1f       	adc	r20, r20
    91ec:	55 1f       	adc	r21, r21
    91ee:	19 01       	movw	r2, r18
    91f0:	2a 01       	movw	r4, r20
    91f2:	b6 01       	movw	r22, r12
    91f4:	61 50       	subi	r22, 0x01	; 1
    91f6:	70 40       	sbci	r23, 0x00	; 0
    91f8:	6b 01       	movw	r12, r22
    91fa:	79 01       	movw	r14, r18
    91fc:	8a 01       	movw	r16, r20
    91fe:	39 01       	movw	r6, r18
    9200:	4a 01       	movw	r8, r20
    9202:	08 94       	sec
    9204:	61 08       	sbc	r6, r1
    9206:	71 08       	sbc	r7, r1
    9208:	81 08       	sbc	r8, r1
    920a:	91 08       	sbc	r9, r1
    920c:	8f ef       	ldi	r24, 0xFF	; 255
    920e:	68 16       	cp	r6, r24
    9210:	8f ef       	ldi	r24, 0xFF	; 255
    9212:	78 06       	cpc	r7, r24
    9214:	8f ef       	ldi	r24, 0xFF	; 255
    9216:	88 06       	cpc	r8, r24
    9218:	8f e3       	ldi	r24, 0x3F	; 63
    921a:	98 06       	cpc	r9, r24
    921c:	10 f3       	brcs	.-60     	; 0x91e2 <_fpadd_parts+0xd2>
    921e:	83 e0       	ldi	r24, 0x03	; 3
    9220:	d5 01       	movw	r26, r10
    9222:	8c 93       	st	X, r24
    9224:	57 fc       	sbrc	r5, 7
    9226:	64 c0       	rjmp	.+200    	; 0x92f0 <_fpadd_parts+0x1e0>
    9228:	f5 01       	movw	r30, r10
    922a:	24 83       	std	Z+4, r18	; 0x04
    922c:	35 83       	std	Z+5, r19	; 0x05
    922e:	46 83       	std	Z+6, r20	; 0x06
    9230:	57 83       	std	Z+7, r21	; 0x07
    9232:	73 83       	std	Z+3, r23	; 0x03
    9234:	62 83       	std	Z+2, r22	; 0x02
    9236:	a5 01       	movw	r20, r10
    9238:	89 c0       	rjmp	.+274    	; 0x934c <_fpadd_parts+0x23c>
    923a:	6f 5f       	subi	r22, 0xFF	; 255
    923c:	7f 4f       	sbci	r23, 0xFF	; 255
    923e:	d4 01       	movw	r26, r8
    9240:	c3 01       	movw	r24, r6
    9242:	81 70       	andi	r24, 0x01	; 1
    9244:	90 70       	andi	r25, 0x00	; 0
    9246:	a0 70       	andi	r26, 0x00	; 0
    9248:	b0 70       	andi	r27, 0x00	; 0
    924a:	96 94       	lsr	r9
    924c:	87 94       	ror	r8
    924e:	77 94       	ror	r7
    9250:	67 94       	ror	r6
    9252:	68 2a       	or	r6, r24
    9254:	79 2a       	or	r7, r25
    9256:	8a 2a       	or	r8, r26
    9258:	9b 2a       	or	r9, r27
    925a:	6c 15       	cp	r22, r12
    925c:	7d 05       	cpc	r23, r13
    925e:	6c f3       	brlt	.-38     	; 0x923a <_fpadd_parts+0x12a>
    9260:	11 c0       	rjmp	.+34     	; 0x9284 <_fpadd_parts+0x174>
    9262:	08 94       	sec
    9264:	c1 1c       	adc	r12, r1
    9266:	d1 1c       	adc	r13, r1
    9268:	da 01       	movw	r26, r20
    926a:	c9 01       	movw	r24, r18
    926c:	81 70       	andi	r24, 0x01	; 1
    926e:	90 70       	andi	r25, 0x00	; 0
    9270:	a0 70       	andi	r26, 0x00	; 0
    9272:	b0 70       	andi	r27, 0x00	; 0
    9274:	56 95       	lsr	r21
    9276:	47 95       	ror	r20
    9278:	37 95       	ror	r19
    927a:	27 95       	ror	r18
    927c:	28 2b       	or	r18, r24
    927e:	39 2b       	or	r19, r25
    9280:	4a 2b       	or	r20, r26
    9282:	5b 2b       	or	r21, r27
    9284:	c6 16       	cp	r12, r22
    9286:	d7 06       	cpc	r13, r23
    9288:	64 f3       	brlt	.-40     	; 0x9262 <_fpadd_parts+0x152>
    928a:	82 cf       	rjmp	.-252    	; 0x9190 <_fpadd_parts+0x80>
    928c:	f8 01       	movw	r30, r16
    928e:	91 81       	ldd	r25, Z+1	; 0x01
    9290:	fb 01       	movw	r30, r22
    9292:	81 81       	ldd	r24, Z+1	; 0x01
    9294:	98 17       	cp	r25, r24
    9296:	09 f4       	brne	.+2      	; 0x929a <_fpadd_parts+0x18a>
    9298:	53 cf       	rjmp	.-346    	; 0x9140 <_fpadd_parts+0x30>
    929a:	49 e1       	ldi	r20, 0x19	; 25
    929c:	56 e0       	ldi	r21, 0x06	; 6
    929e:	56 c0       	rjmp	.+172    	; 0x934c <_fpadd_parts+0x23c>
    92a0:	82 30       	cpi	r24, 0x02	; 2
    92a2:	09 f0       	breq	.+2      	; 0x92a6 <_fpadd_parts+0x196>
    92a4:	4d cf       	rjmp	.-358    	; 0x9140 <_fpadd_parts+0x30>
    92a6:	da 01       	movw	r26, r20
    92a8:	f8 01       	movw	r30, r16
    92aa:	88 e0       	ldi	r24, 0x08	; 8
    92ac:	01 90       	ld	r0, Z+
    92ae:	0d 92       	st	X+, r0
    92b0:	81 50       	subi	r24, 0x01	; 1
    92b2:	e1 f7       	brne	.-8      	; 0x92ac <_fpadd_parts+0x19c>
    92b4:	f8 01       	movw	r30, r16
    92b6:	81 81       	ldd	r24, Z+1	; 0x01
    92b8:	f7 01       	movw	r30, r14
    92ba:	91 81       	ldd	r25, Z+1	; 0x01
    92bc:	89 23       	and	r24, r25
    92be:	f5 01       	movw	r30, r10
    92c0:	81 83       	std	Z+1, r24	; 0x01
    92c2:	a5 01       	movw	r20, r10
    92c4:	43 c0       	rjmp	.+134    	; 0x934c <_fpadd_parts+0x23c>
    92c6:	26 19       	sub	r18, r6
    92c8:	37 09       	sbc	r19, r7
    92ca:	48 09       	sbc	r20, r8
    92cc:	59 09       	sbc	r21, r9
    92ce:	70 cf       	rjmp	.-288    	; 0x91b0 <_fpadd_parts+0xa0>
    92d0:	f5 01       	movw	r30, r10
    92d2:	61 83       	std	Z+1, r22	; 0x01
    92d4:	b6 01       	movw	r22, r12
    92d6:	26 0d       	add	r18, r6
    92d8:	37 1d       	adc	r19, r7
    92da:	48 1d       	adc	r20, r8
    92dc:	59 1d       	adc	r21, r9
    92de:	19 01       	movw	r2, r18
    92e0:	2a 01       	movw	r4, r20
    92e2:	9d cf       	rjmp	.-198    	; 0x921e <_fpadd_parts+0x10e>
    92e4:	6b 01       	movw	r12, r22
    92e6:	20 e0       	ldi	r18, 0x00	; 0
    92e8:	30 e0       	ldi	r19, 0x00	; 0
    92ea:	40 e0       	ldi	r20, 0x00	; 0
    92ec:	50 e0       	ldi	r21, 0x00	; 0
    92ee:	50 cf       	rjmp	.-352    	; 0x9190 <_fpadd_parts+0x80>
    92f0:	d2 01       	movw	r26, r4
    92f2:	c1 01       	movw	r24, r2
    92f4:	b6 95       	lsr	r27
    92f6:	a7 95       	ror	r26
    92f8:	97 95       	ror	r25
    92fa:	87 95       	ror	r24
    92fc:	21 e0       	ldi	r18, 0x01	; 1
    92fe:	30 e0       	ldi	r19, 0x00	; 0
    9300:	40 e0       	ldi	r20, 0x00	; 0
    9302:	50 e0       	ldi	r21, 0x00	; 0
    9304:	22 22       	and	r2, r18
    9306:	33 22       	and	r3, r19
    9308:	44 22       	and	r4, r20
    930a:	55 22       	and	r5, r21
    930c:	28 2a       	or	r2, r24
    930e:	39 2a       	or	r3, r25
    9310:	4a 2a       	or	r4, r26
    9312:	5b 2a       	or	r5, r27
    9314:	f5 01       	movw	r30, r10
    9316:	24 82       	std	Z+4, r2	; 0x04
    9318:	35 82       	std	Z+5, r3	; 0x05
    931a:	46 82       	std	Z+6, r4	; 0x06
    931c:	57 82       	std	Z+7, r5	; 0x07
    931e:	08 94       	sec
    9320:	c1 1c       	adc	r12, r1
    9322:	d1 1c       	adc	r13, r1
    9324:	d3 82       	std	Z+3, r13	; 0x03
    9326:	c2 82       	std	Z+2, r12	; 0x02
    9328:	a5 01       	movw	r20, r10
    932a:	10 c0       	rjmp	.+32     	; 0x934c <_fpadd_parts+0x23c>
    932c:	90 95       	com	r25
    932e:	81 95       	neg	r24
    9330:	9f 4f       	sbci	r25, 0xFF	; 255
    9332:	24 cf       	rjmp	.-440    	; 0x917c <_fpadd_parts+0x6c>
    9334:	81 e0       	ldi	r24, 0x01	; 1
    9336:	f5 01       	movw	r30, r10
    9338:	81 83       	std	Z+1, r24	; 0x01
    933a:	b6 01       	movw	r22, r12
    933c:	50 95       	com	r21
    933e:	40 95       	com	r20
    9340:	30 95       	com	r19
    9342:	21 95       	neg	r18
    9344:	3f 4f       	sbci	r19, 0xFF	; 255
    9346:	4f 4f       	sbci	r20, 0xFF	; 255
    9348:	5f 4f       	sbci	r21, 0xFF	; 255
    934a:	37 cf       	rjmp	.-402    	; 0x91ba <_fpadd_parts+0xaa>
    934c:	ca 01       	movw	r24, r20
    934e:	e2 e1       	ldi	r30, 0x12	; 18
    9350:	cd b7       	in	r28, 0x3d	; 61
    9352:	de b7       	in	r29, 0x3e	; 62
    9354:	0c 94 08 50 	jmp	0xa010 <__epilogue_restores__>

00009358 <__addsf3>:
    9358:	a0 e2       	ldi	r26, 0x20	; 32
    935a:	b0 e0       	ldi	r27, 0x00	; 0
    935c:	e2 eb       	ldi	r30, 0xB2	; 178
    935e:	f9 e4       	ldi	r31, 0x49	; 73
    9360:	0c 94 fa 4f 	jmp	0x9ff4 <__prologue_saves__+0x1c>
    9364:	dc 01       	movw	r26, r24
    9366:	cb 01       	movw	r24, r22
    9368:	89 8f       	std	Y+25, r24	; 0x19
    936a:	9a 8f       	std	Y+26, r25	; 0x1a
    936c:	ab 8f       	std	Y+27, r26	; 0x1b
    936e:	bc 8f       	std	Y+28, r27	; 0x1c
    9370:	2d 8f       	std	Y+29, r18	; 0x1d
    9372:	3e 8f       	std	Y+30, r19	; 0x1e
    9374:	4f 8f       	std	Y+31, r20	; 0x1f
    9376:	58 a3       	std	Y+32, r21	; 0x20
    9378:	be 01       	movw	r22, r28
    937a:	6f 5f       	subi	r22, 0xFF	; 255
    937c:	7f 4f       	sbci	r23, 0xFF	; 255
    937e:	ce 01       	movw	r24, r28
    9380:	49 96       	adiw	r24, 0x19	; 25
    9382:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9386:	8e 01       	movw	r16, r28
    9388:	07 5f       	subi	r16, 0xF7	; 247
    938a:	1f 4f       	sbci	r17, 0xFF	; 255
    938c:	b8 01       	movw	r22, r16
    938e:	ce 01       	movw	r24, r28
    9390:	4d 96       	adiw	r24, 0x1d	; 29
    9392:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9396:	ae 01       	movw	r20, r28
    9398:	4f 5e       	subi	r20, 0xEF	; 239
    939a:	5f 4f       	sbci	r21, 0xFF	; 255
    939c:	b8 01       	movw	r22, r16
    939e:	ce 01       	movw	r24, r28
    93a0:	01 96       	adiw	r24, 0x01	; 1
    93a2:	0e 94 88 48 	call	0x9110 <_fpadd_parts>
    93a6:	0e 94 c9 4c 	call	0x9992 <__pack_f>
    93aa:	dc 01       	movw	r26, r24
    93ac:	cb 01       	movw	r24, r22
    93ae:	bc 01       	movw	r22, r24
    93b0:	cd 01       	movw	r24, r26
    93b2:	e4 e0       	ldi	r30, 0x04	; 4
    93b4:	a0 96       	adiw	r28, 0x20	; 32
    93b6:	0c 94 16 50 	jmp	0xa02c <__epilogue_restores__+0x1c>

000093ba <__subsf3>:
    93ba:	a0 e2       	ldi	r26, 0x20	; 32
    93bc:	b0 e0       	ldi	r27, 0x00	; 0
    93be:	e3 ee       	ldi	r30, 0xE3	; 227
    93c0:	f9 e4       	ldi	r31, 0x49	; 73
    93c2:	0c 94 fa 4f 	jmp	0x9ff4 <__prologue_saves__+0x1c>
    93c6:	dc 01       	movw	r26, r24
    93c8:	cb 01       	movw	r24, r22
    93ca:	89 8f       	std	Y+25, r24	; 0x19
    93cc:	9a 8f       	std	Y+26, r25	; 0x1a
    93ce:	ab 8f       	std	Y+27, r26	; 0x1b
    93d0:	bc 8f       	std	Y+28, r27	; 0x1c
    93d2:	2d 8f       	std	Y+29, r18	; 0x1d
    93d4:	3e 8f       	std	Y+30, r19	; 0x1e
    93d6:	4f 8f       	std	Y+31, r20	; 0x1f
    93d8:	58 a3       	std	Y+32, r21	; 0x20
    93da:	be 01       	movw	r22, r28
    93dc:	6f 5f       	subi	r22, 0xFF	; 255
    93de:	7f 4f       	sbci	r23, 0xFF	; 255
    93e0:	ce 01       	movw	r24, r28
    93e2:	49 96       	adiw	r24, 0x19	; 25
    93e4:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    93e8:	8e 01       	movw	r16, r28
    93ea:	07 5f       	subi	r16, 0xF7	; 247
    93ec:	1f 4f       	sbci	r17, 0xFF	; 255
    93ee:	b8 01       	movw	r22, r16
    93f0:	ce 01       	movw	r24, r28
    93f2:	4d 96       	adiw	r24, 0x1d	; 29
    93f4:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    93f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    93fa:	91 e0       	ldi	r25, 0x01	; 1
    93fc:	89 27       	eor	r24, r25
    93fe:	8a 87       	std	Y+10, r24	; 0x0a
    9400:	ae 01       	movw	r20, r28
    9402:	4f 5e       	subi	r20, 0xEF	; 239
    9404:	5f 4f       	sbci	r21, 0xFF	; 255
    9406:	b8 01       	movw	r22, r16
    9408:	ce 01       	movw	r24, r28
    940a:	01 96       	adiw	r24, 0x01	; 1
    940c:	0e 94 88 48 	call	0x9110 <_fpadd_parts>
    9410:	0e 94 c9 4c 	call	0x9992 <__pack_f>
    9414:	dc 01       	movw	r26, r24
    9416:	cb 01       	movw	r24, r22
    9418:	bc 01       	movw	r22, r24
    941a:	cd 01       	movw	r24, r26
    941c:	e4 e0       	ldi	r30, 0x04	; 4
    941e:	a0 96       	adiw	r28, 0x20	; 32
    9420:	0c 94 16 50 	jmp	0xa02c <__epilogue_restores__+0x1c>

00009424 <__mulsf3>:
    9424:	a0 e2       	ldi	r26, 0x20	; 32
    9426:	b0 e0       	ldi	r27, 0x00	; 0
    9428:	e8 e1       	ldi	r30, 0x18	; 24
    942a:	fa e4       	ldi	r31, 0x4A	; 74
    942c:	0c 94 ec 4f 	jmp	0x9fd8 <__prologue_saves__>
    9430:	dc 01       	movw	r26, r24
    9432:	cb 01       	movw	r24, r22
    9434:	89 8f       	std	Y+25, r24	; 0x19
    9436:	9a 8f       	std	Y+26, r25	; 0x1a
    9438:	ab 8f       	std	Y+27, r26	; 0x1b
    943a:	bc 8f       	std	Y+28, r27	; 0x1c
    943c:	2d 8f       	std	Y+29, r18	; 0x1d
    943e:	3e 8f       	std	Y+30, r19	; 0x1e
    9440:	4f 8f       	std	Y+31, r20	; 0x1f
    9442:	58 a3       	std	Y+32, r21	; 0x20
    9444:	be 01       	movw	r22, r28
    9446:	6f 5f       	subi	r22, 0xFF	; 255
    9448:	7f 4f       	sbci	r23, 0xFF	; 255
    944a:	ce 01       	movw	r24, r28
    944c:	49 96       	adiw	r24, 0x19	; 25
    944e:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9452:	69 e0       	ldi	r22, 0x09	; 9
    9454:	70 e0       	ldi	r23, 0x00	; 0
    9456:	6c 0f       	add	r22, r28
    9458:	7d 1f       	adc	r23, r29
    945a:	ce 01       	movw	r24, r28
    945c:	4d 96       	adiw	r24, 0x1d	; 29
    945e:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9462:	fe 01       	movw	r30, r28
    9464:	31 96       	adiw	r30, 0x01	; 1
    9466:	66 24       	eor	r6, r6
    9468:	77 24       	eor	r7, r7
    946a:	43 01       	movw	r8, r6
    946c:	13 01       	movw	r2, r6
    946e:	24 01       	movw	r4, r8
    9470:	89 81       	ldd	r24, Y+1	; 0x01
    9472:	82 30       	cpi	r24, 0x02	; 2
    9474:	98 f0       	brcs	.+38     	; 0x949c <__mulsf3+0x78>
    9476:	99 85       	ldd	r25, Y+9	; 0x09
    9478:	92 30       	cpi	r25, 0x02	; 2
    947a:	58 f4       	brcc	.+22     	; 0x9492 <__mulsf3+0x6e>
    947c:	20 e0       	ldi	r18, 0x00	; 0
    947e:	91 81       	ldd	r25, Z+1	; 0x01
    9480:	8a 85       	ldd	r24, Y+10	; 0x0a
    9482:	98 13       	cpse	r25, r24
    9484:	21 e0       	ldi	r18, 0x01	; 1
    9486:	2a 87       	std	Y+10, r18	; 0x0a
    9488:	69 e0       	ldi	r22, 0x09	; 9
    948a:	70 e0       	ldi	r23, 0x00	; 0
    948c:	6c 0f       	add	r22, r28
    948e:	7d 1f       	adc	r23, r29
    9490:	d9 c0       	rjmp	.+434    	; 0x9644 <__mulsf3+0x220>
    9492:	84 30       	cpi	r24, 0x04	; 4
    9494:	59 f4       	brne	.+22     	; 0x94ac <__mulsf3+0x88>
    9496:	92 30       	cpi	r25, 0x02	; 2
    9498:	09 f4       	brne	.+2      	; 0x949c <__mulsf3+0x78>
    949a:	5b c0       	rjmp	.+182    	; 0x9552 <__mulsf3+0x12e>
    949c:	20 e0       	ldi	r18, 0x00	; 0
    949e:	91 81       	ldd	r25, Z+1	; 0x01
    94a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    94a2:	98 13       	cpse	r25, r24
    94a4:	21 e0       	ldi	r18, 0x01	; 1
    94a6:	21 83       	std	Z+1, r18	; 0x01
    94a8:	bf 01       	movw	r22, r30
    94aa:	cc c0       	rjmp	.+408    	; 0x9644 <__mulsf3+0x220>
    94ac:	94 30       	cpi	r25, 0x04	; 4
    94ae:	09 f4       	brne	.+2      	; 0x94b2 <__mulsf3+0x8e>
    94b0:	4d c0       	rjmp	.+154    	; 0x954c <__mulsf3+0x128>
    94b2:	82 30       	cpi	r24, 0x02	; 2
    94b4:	99 f3       	breq	.-26     	; 0x949c <__mulsf3+0x78>
    94b6:	92 30       	cpi	r25, 0x02	; 2
    94b8:	09 f3       	breq	.-62     	; 0x947c <__mulsf3+0x58>
    94ba:	ed 80       	ldd	r14, Y+5	; 0x05
    94bc:	fe 80       	ldd	r15, Y+6	; 0x06
    94be:	0f 81       	ldd	r16, Y+7	; 0x07
    94c0:	18 85       	ldd	r17, Y+8	; 0x08
    94c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    94c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    94c6:	4f 85       	ldd	r20, Y+15	; 0x0f
    94c8:	58 89       	ldd	r21, Y+16	; 0x10
    94ca:	64 01       	movw	r12, r8
    94cc:	53 01       	movw	r10, r6
    94ce:	6f e1       	ldi	r22, 0x1F	; 31
    94d0:	70 e0       	ldi	r23, 0x00	; 0
    94d2:	0c c0       	rjmp	.+24     	; 0x94ec <__mulsf3+0xc8>
    94d4:	22 0f       	add	r18, r18
    94d6:	33 1f       	adc	r19, r19
    94d8:	44 1f       	adc	r20, r20
    94da:	55 1f       	adc	r21, r21
    94dc:	16 95       	lsr	r17
    94de:	07 95       	ror	r16
    94e0:	f7 94       	ror	r15
    94e2:	e7 94       	ror	r14
    94e4:	61 50       	subi	r22, 0x01	; 1
    94e6:	70 40       	sbci	r23, 0x00	; 0
    94e8:	77 fd       	sbrc	r23, 7
    94ea:	36 c0       	rjmp	.+108    	; 0x9558 <__mulsf3+0x134>
    94ec:	d8 01       	movw	r26, r16
    94ee:	c7 01       	movw	r24, r14
    94f0:	81 70       	andi	r24, 0x01	; 1
    94f2:	90 70       	andi	r25, 0x00	; 0
    94f4:	a0 70       	andi	r26, 0x00	; 0
    94f6:	b0 70       	andi	r27, 0x00	; 0
    94f8:	89 2b       	or	r24, r25
    94fa:	c9 f0       	breq	.+50     	; 0x952e <__mulsf3+0x10a>
    94fc:	80 e0       	ldi	r24, 0x00	; 0
    94fe:	90 e0       	ldi	r25, 0x00	; 0
    9500:	22 0e       	add	r2, r18
    9502:	33 1e       	adc	r3, r19
    9504:	44 1e       	adc	r4, r20
    9506:	55 1e       	adc	r5, r21
    9508:	22 16       	cp	r2, r18
    950a:	33 06       	cpc	r3, r19
    950c:	44 06       	cpc	r4, r20
    950e:	55 06       	cpc	r5, r21
    9510:	10 f4       	brcc	.+4      	; 0x9516 <__mulsf3+0xf2>
    9512:	81 e0       	ldi	r24, 0x01	; 1
    9514:	90 e0       	ldi	r25, 0x00	; 0
    9516:	aa 27       	eor	r26, r26
    9518:	97 fd       	sbrc	r25, 7
    951a:	a0 95       	com	r26
    951c:	ba 2f       	mov	r27, r26
    951e:	8a 0d       	add	r24, r10
    9520:	9b 1d       	adc	r25, r11
    9522:	ac 1d       	adc	r26, r12
    9524:	bd 1d       	adc	r27, r13
    9526:	68 0e       	add	r6, r24
    9528:	79 1e       	adc	r7, r25
    952a:	8a 1e       	adc	r8, r26
    952c:	9b 1e       	adc	r9, r27
    952e:	aa 0c       	add	r10, r10
    9530:	bb 1c       	adc	r11, r11
    9532:	cc 1c       	adc	r12, r12
    9534:	dd 1c       	adc	r13, r13
    9536:	57 ff       	sbrs	r21, 7
    9538:	cd cf       	rjmp	.-102    	; 0x94d4 <__mulsf3+0xb0>
    953a:	81 e0       	ldi	r24, 0x01	; 1
    953c:	90 e0       	ldi	r25, 0x00	; 0
    953e:	a0 e0       	ldi	r26, 0x00	; 0
    9540:	b0 e0       	ldi	r27, 0x00	; 0
    9542:	a8 2a       	or	r10, r24
    9544:	b9 2a       	or	r11, r25
    9546:	ca 2a       	or	r12, r26
    9548:	db 2a       	or	r13, r27
    954a:	c4 cf       	rjmp	.-120    	; 0x94d4 <__mulsf3+0xb0>
    954c:	82 30       	cpi	r24, 0x02	; 2
    954e:	09 f0       	breq	.+2      	; 0x9552 <__mulsf3+0x12e>
    9550:	95 cf       	rjmp	.-214    	; 0x947c <__mulsf3+0x58>
    9552:	69 e1       	ldi	r22, 0x19	; 25
    9554:	76 e0       	ldi	r23, 0x06	; 6
    9556:	76 c0       	rjmp	.+236    	; 0x9644 <__mulsf3+0x220>
    9558:	22 81       	ldd	r18, Z+2	; 0x02
    955a:	33 81       	ldd	r19, Z+3	; 0x03
    955c:	8b 85       	ldd	r24, Y+11	; 0x0b
    955e:	9c 85       	ldd	r25, Y+12	; 0x0c
    9560:	28 0f       	add	r18, r24
    9562:	39 1f       	adc	r19, r25
    9564:	2e 5f       	subi	r18, 0xFE	; 254
    9566:	3f 4f       	sbci	r19, 0xFF	; 255
    9568:	a9 01       	movw	r20, r18
    956a:	60 e0       	ldi	r22, 0x00	; 0
    956c:	91 81       	ldd	r25, Z+1	; 0x01
    956e:	8a 85       	ldd	r24, Y+10	; 0x0a
    9570:	98 13       	cpse	r25, r24
    9572:	61 e0       	ldi	r22, 0x01	; 1
    9574:	6a 8b       	std	Y+18, r22	; 0x12
    9576:	97 fe       	sbrs	r9, 7
    9578:	0f c0       	rjmp	.+30     	; 0x9598 <__mulsf3+0x174>
    957a:	2f c0       	rjmp	.+94     	; 0x95da <__mulsf3+0x1b6>
    957c:	ca 01       	movw	r24, r20
    957e:	01 97       	sbiw	r24, 0x01	; 1
    9580:	ac 01       	movw	r20, r24
    9582:	9c 01       	movw	r18, r24
    9584:	66 0c       	add	r6, r6
    9586:	77 1c       	adc	r7, r7
    9588:	88 1c       	adc	r8, r8
    958a:	99 1c       	adc	r9, r9
    958c:	57 fc       	sbrc	r5, 7
    958e:	41 c0       	rjmp	.+130    	; 0x9612 <__mulsf3+0x1ee>
    9590:	22 0c       	add	r2, r2
    9592:	33 1c       	adc	r3, r3
    9594:	44 1c       	adc	r4, r4
    9596:	55 1c       	adc	r5, r5
    9598:	90 e0       	ldi	r25, 0x00	; 0
    959a:	69 16       	cp	r6, r25
    959c:	90 e0       	ldi	r25, 0x00	; 0
    959e:	79 06       	cpc	r7, r25
    95a0:	90 e0       	ldi	r25, 0x00	; 0
    95a2:	89 06       	cpc	r8, r25
    95a4:	90 e4       	ldi	r25, 0x40	; 64
    95a6:	99 06       	cpc	r9, r25
    95a8:	48 f3       	brcs	.-46     	; 0x957c <__mulsf3+0x158>
    95aa:	3c 8b       	std	Y+20, r19	; 0x14
    95ac:	2b 8b       	std	Y+19, r18	; 0x13
    95ae:	d4 01       	movw	r26, r8
    95b0:	c3 01       	movw	r24, r6
    95b2:	8f 77       	andi	r24, 0x7F	; 127
    95b4:	90 70       	andi	r25, 0x00	; 0
    95b6:	a0 70       	andi	r26, 0x00	; 0
    95b8:	b0 70       	andi	r27, 0x00	; 0
    95ba:	80 34       	cpi	r24, 0x40	; 64
    95bc:	91 05       	cpc	r25, r1
    95be:	a1 05       	cpc	r26, r1
    95c0:	b1 05       	cpc	r27, r1
    95c2:	81 f1       	breq	.+96     	; 0x9624 <__mulsf3+0x200>
    95c4:	6d 8a       	std	Y+21, r6	; 0x15
    95c6:	7e 8a       	std	Y+22, r7	; 0x16
    95c8:	8f 8a       	std	Y+23, r8	; 0x17
    95ca:	98 8e       	std	Y+24, r9	; 0x18
    95cc:	83 e0       	ldi	r24, 0x03	; 3
    95ce:	89 8b       	std	Y+17, r24	; 0x11
    95d0:	61 e1       	ldi	r22, 0x11	; 17
    95d2:	70 e0       	ldi	r23, 0x00	; 0
    95d4:	6c 0f       	add	r22, r28
    95d6:	7d 1f       	adc	r23, r29
    95d8:	35 c0       	rjmp	.+106    	; 0x9644 <__mulsf3+0x220>
    95da:	2f 5f       	subi	r18, 0xFF	; 255
    95dc:	3f 4f       	sbci	r19, 0xFF	; 255
    95de:	a9 01       	movw	r20, r18
    95e0:	d4 01       	movw	r26, r8
    95e2:	c3 01       	movw	r24, r6
    95e4:	81 70       	andi	r24, 0x01	; 1
    95e6:	90 70       	andi	r25, 0x00	; 0
    95e8:	a0 70       	andi	r26, 0x00	; 0
    95ea:	b0 70       	andi	r27, 0x00	; 0
    95ec:	89 2b       	or	r24, r25
    95ee:	61 f0       	breq	.+24     	; 0x9608 <__mulsf3+0x1e4>
    95f0:	56 94       	lsr	r5
    95f2:	47 94       	ror	r4
    95f4:	37 94       	ror	r3
    95f6:	27 94       	ror	r2
    95f8:	80 e0       	ldi	r24, 0x00	; 0
    95fa:	90 e0       	ldi	r25, 0x00	; 0
    95fc:	a0 e0       	ldi	r26, 0x00	; 0
    95fe:	b0 e8       	ldi	r27, 0x80	; 128
    9600:	28 2a       	or	r2, r24
    9602:	39 2a       	or	r3, r25
    9604:	4a 2a       	or	r4, r26
    9606:	5b 2a       	or	r5, r27
    9608:	96 94       	lsr	r9
    960a:	87 94       	ror	r8
    960c:	77 94       	ror	r7
    960e:	67 94       	ror	r6
    9610:	c3 cf       	rjmp	.-122    	; 0x9598 <__mulsf3+0x174>
    9612:	81 e0       	ldi	r24, 0x01	; 1
    9614:	90 e0       	ldi	r25, 0x00	; 0
    9616:	a0 e0       	ldi	r26, 0x00	; 0
    9618:	b0 e0       	ldi	r27, 0x00	; 0
    961a:	68 2a       	or	r6, r24
    961c:	79 2a       	or	r7, r25
    961e:	8a 2a       	or	r8, r26
    9620:	9b 2a       	or	r9, r27
    9622:	b6 cf       	rjmp	.-148    	; 0x9590 <__mulsf3+0x16c>
    9624:	67 fc       	sbrc	r6, 7
    9626:	05 c0       	rjmp	.+10     	; 0x9632 <__mulsf3+0x20e>
    9628:	21 14       	cp	r2, r1
    962a:	31 04       	cpc	r3, r1
    962c:	41 04       	cpc	r4, r1
    962e:	51 04       	cpc	r5, r1
    9630:	49 f2       	breq	.-110    	; 0x95c4 <__mulsf3+0x1a0>
    9632:	80 e4       	ldi	r24, 0x40	; 64
    9634:	90 e0       	ldi	r25, 0x00	; 0
    9636:	a0 e0       	ldi	r26, 0x00	; 0
    9638:	b0 e0       	ldi	r27, 0x00	; 0
    963a:	68 0e       	add	r6, r24
    963c:	79 1e       	adc	r7, r25
    963e:	8a 1e       	adc	r8, r26
    9640:	9b 1e       	adc	r9, r27
    9642:	c0 cf       	rjmp	.-128    	; 0x95c4 <__mulsf3+0x1a0>
    9644:	cb 01       	movw	r24, r22
    9646:	0e 94 c9 4c 	call	0x9992 <__pack_f>
    964a:	dc 01       	movw	r26, r24
    964c:	cb 01       	movw	r24, r22
    964e:	bc 01       	movw	r22, r24
    9650:	cd 01       	movw	r24, r26
    9652:	e2 e1       	ldi	r30, 0x12	; 18
    9654:	a0 96       	adiw	r28, 0x20	; 32
    9656:	0c 94 08 50 	jmp	0xa010 <__epilogue_restores__>

0000965a <__divsf3>:
    965a:	a8 e1       	ldi	r26, 0x18	; 24
    965c:	b0 e0       	ldi	r27, 0x00	; 0
    965e:	e3 e3       	ldi	r30, 0x33	; 51
    9660:	fb e4       	ldi	r31, 0x4B	; 75
    9662:	0c 94 f4 4f 	jmp	0x9fe8 <__prologue_saves__+0x10>
    9666:	dc 01       	movw	r26, r24
    9668:	cb 01       	movw	r24, r22
    966a:	89 8b       	std	Y+17, r24	; 0x11
    966c:	9a 8b       	std	Y+18, r25	; 0x12
    966e:	ab 8b       	std	Y+19, r26	; 0x13
    9670:	bc 8b       	std	Y+20, r27	; 0x14
    9672:	2d 8b       	std	Y+21, r18	; 0x15
    9674:	3e 8b       	std	Y+22, r19	; 0x16
    9676:	4f 8b       	std	Y+23, r20	; 0x17
    9678:	58 8f       	std	Y+24, r21	; 0x18
    967a:	be 01       	movw	r22, r28
    967c:	6f 5f       	subi	r22, 0xFF	; 255
    967e:	7f 4f       	sbci	r23, 0xFF	; 255
    9680:	ce 01       	movw	r24, r28
    9682:	41 96       	adiw	r24, 0x11	; 17
    9684:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9688:	8e 01       	movw	r16, r28
    968a:	07 5f       	subi	r16, 0xF7	; 247
    968c:	1f 4f       	sbci	r17, 0xFF	; 255
    968e:	b8 01       	movw	r22, r16
    9690:	ce 01       	movw	r24, r28
    9692:	45 96       	adiw	r24, 0x15	; 21
    9694:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9698:	fe 01       	movw	r30, r28
    969a:	31 96       	adiw	r30, 0x01	; 1
    969c:	29 81       	ldd	r18, Y+1	; 0x01
    969e:	22 30       	cpi	r18, 0x02	; 2
    96a0:	08 f4       	brcc	.+2      	; 0x96a4 <__divsf3+0x4a>
    96a2:	5f c0       	rjmp	.+190    	; 0x9762 <__divsf3+0x108>
    96a4:	39 85       	ldd	r19, Y+9	; 0x09
    96a6:	32 30       	cpi	r19, 0x02	; 2
    96a8:	10 f4       	brcc	.+4      	; 0x96ae <__divsf3+0x54>
    96aa:	b8 01       	movw	r22, r16
    96ac:	7b c0       	rjmp	.+246    	; 0x97a4 <__divsf3+0x14a>
    96ae:	81 81       	ldd	r24, Z+1	; 0x01
    96b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    96b2:	89 27       	eor	r24, r25
    96b4:	81 83       	std	Z+1, r24	; 0x01
    96b6:	24 30       	cpi	r18, 0x04	; 4
    96b8:	09 f4       	brne	.+2      	; 0x96bc <__divsf3+0x62>
    96ba:	55 c0       	rjmp	.+170    	; 0x9766 <__divsf3+0x10c>
    96bc:	22 30       	cpi	r18, 0x02	; 2
    96be:	09 f4       	brne	.+2      	; 0x96c2 <__divsf3+0x68>
    96c0:	52 c0       	rjmp	.+164    	; 0x9766 <__divsf3+0x10c>
    96c2:	34 30       	cpi	r19, 0x04	; 4
    96c4:	09 f4       	brne	.+2      	; 0x96c8 <__divsf3+0x6e>
    96c6:	54 c0       	rjmp	.+168    	; 0x9770 <__divsf3+0x116>
    96c8:	32 30       	cpi	r19, 0x02	; 2
    96ca:	09 f4       	brne	.+2      	; 0x96ce <__divsf3+0x74>
    96cc:	58 c0       	rjmp	.+176    	; 0x977e <__divsf3+0x124>
    96ce:	6b 81       	ldd	r22, Y+3	; 0x03
    96d0:	7c 81       	ldd	r23, Y+4	; 0x04
    96d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    96d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    96d6:	68 1b       	sub	r22, r24
    96d8:	79 0b       	sbc	r23, r25
    96da:	2d 81       	ldd	r18, Y+5	; 0x05
    96dc:	3e 81       	ldd	r19, Y+6	; 0x06
    96de:	4f 81       	ldd	r20, Y+7	; 0x07
    96e0:	58 85       	ldd	r21, Y+8	; 0x08
    96e2:	ed 84       	ldd	r14, Y+13	; 0x0d
    96e4:	fe 84       	ldd	r15, Y+14	; 0x0e
    96e6:	0f 85       	ldd	r16, Y+15	; 0x0f
    96e8:	18 89       	ldd	r17, Y+16	; 0x10
    96ea:	2e 15       	cp	r18, r14
    96ec:	3f 05       	cpc	r19, r15
    96ee:	40 07       	cpc	r20, r16
    96f0:	51 07       	cpc	r21, r17
    96f2:	30 f4       	brcc	.+12     	; 0x9700 <__divsf3+0xa6>
    96f4:	22 0f       	add	r18, r18
    96f6:	33 1f       	adc	r19, r19
    96f8:	44 1f       	adc	r20, r20
    96fa:	55 1f       	adc	r21, r21
    96fc:	61 50       	subi	r22, 0x01	; 1
    96fe:	70 40       	sbci	r23, 0x00	; 0
    9700:	7c 83       	std	Y+4, r23	; 0x04
    9702:	6b 83       	std	Y+3, r22	; 0x03
    9704:	80 e0       	ldi	r24, 0x00	; 0
    9706:	90 e0       	ldi	r25, 0x00	; 0
    9708:	a0 e0       	ldi	r26, 0x00	; 0
    970a:	b0 e4       	ldi	r27, 0x40	; 64
    970c:	aa 24       	eor	r10, r10
    970e:	bb 24       	eor	r11, r11
    9710:	65 01       	movw	r12, r10
    9712:	2e 15       	cp	r18, r14
    9714:	3f 05       	cpc	r19, r15
    9716:	40 07       	cpc	r20, r16
    9718:	51 07       	cpc	r21, r17
    971a:	40 f0       	brcs	.+16     	; 0x972c <__divsf3+0xd2>
    971c:	a8 2a       	or	r10, r24
    971e:	b9 2a       	or	r11, r25
    9720:	ca 2a       	or	r12, r26
    9722:	db 2a       	or	r13, r27
    9724:	2e 19       	sub	r18, r14
    9726:	3f 09       	sbc	r19, r15
    9728:	40 0b       	sbc	r20, r16
    972a:	51 0b       	sbc	r21, r17
    972c:	b6 95       	lsr	r27
    972e:	a7 95       	ror	r26
    9730:	97 95       	ror	r25
    9732:	87 95       	ror	r24
    9734:	22 0f       	add	r18, r18
    9736:	33 1f       	adc	r19, r19
    9738:	44 1f       	adc	r20, r20
    973a:	55 1f       	adc	r21, r21
    973c:	00 97       	sbiw	r24, 0x00	; 0
    973e:	a1 05       	cpc	r26, r1
    9740:	b1 05       	cpc	r27, r1
    9742:	39 f7       	brne	.-50     	; 0x9712 <__divsf3+0xb8>
    9744:	d6 01       	movw	r26, r12
    9746:	c5 01       	movw	r24, r10
    9748:	8f 77       	andi	r24, 0x7F	; 127
    974a:	90 70       	andi	r25, 0x00	; 0
    974c:	a0 70       	andi	r26, 0x00	; 0
    974e:	b0 70       	andi	r27, 0x00	; 0
    9750:	80 34       	cpi	r24, 0x40	; 64
    9752:	91 05       	cpc	r25, r1
    9754:	a1 05       	cpc	r26, r1
    9756:	b1 05       	cpc	r27, r1
    9758:	a9 f0       	breq	.+42     	; 0x9784 <__divsf3+0x12a>
    975a:	a4 82       	std	Z+4, r10	; 0x04
    975c:	b5 82       	std	Z+5, r11	; 0x05
    975e:	c6 82       	std	Z+6, r12	; 0x06
    9760:	d7 82       	std	Z+7, r13	; 0x07
    9762:	bf 01       	movw	r22, r30
    9764:	1f c0       	rjmp	.+62     	; 0x97a4 <__divsf3+0x14a>
    9766:	23 17       	cp	r18, r19
    9768:	e1 f7       	brne	.-8      	; 0x9762 <__divsf3+0x108>
    976a:	69 e1       	ldi	r22, 0x19	; 25
    976c:	76 e0       	ldi	r23, 0x06	; 6
    976e:	1a c0       	rjmp	.+52     	; 0x97a4 <__divsf3+0x14a>
    9770:	1d 82       	std	Y+5, r1	; 0x05
    9772:	1e 82       	std	Y+6, r1	; 0x06
    9774:	1f 82       	std	Y+7, r1	; 0x07
    9776:	18 86       	std	Y+8, r1	; 0x08
    9778:	1c 82       	std	Y+4, r1	; 0x04
    977a:	1b 82       	std	Y+3, r1	; 0x03
    977c:	f2 cf       	rjmp	.-28     	; 0x9762 <__divsf3+0x108>
    977e:	84 e0       	ldi	r24, 0x04	; 4
    9780:	89 83       	std	Y+1, r24	; 0x01
    9782:	ef cf       	rjmp	.-34     	; 0x9762 <__divsf3+0x108>
    9784:	a7 fc       	sbrc	r10, 7
    9786:	05 c0       	rjmp	.+10     	; 0x9792 <__divsf3+0x138>
    9788:	21 15       	cp	r18, r1
    978a:	31 05       	cpc	r19, r1
    978c:	41 05       	cpc	r20, r1
    978e:	51 05       	cpc	r21, r1
    9790:	21 f3       	breq	.-56     	; 0x975a <__divsf3+0x100>
    9792:	80 e4       	ldi	r24, 0x40	; 64
    9794:	90 e0       	ldi	r25, 0x00	; 0
    9796:	a0 e0       	ldi	r26, 0x00	; 0
    9798:	b0 e0       	ldi	r27, 0x00	; 0
    979a:	a8 0e       	add	r10, r24
    979c:	b9 1e       	adc	r11, r25
    979e:	ca 1e       	adc	r12, r26
    97a0:	db 1e       	adc	r13, r27
    97a2:	db cf       	rjmp	.-74     	; 0x975a <__divsf3+0x100>
    97a4:	cb 01       	movw	r24, r22
    97a6:	0e 94 c9 4c 	call	0x9992 <__pack_f>
    97aa:	dc 01       	movw	r26, r24
    97ac:	cb 01       	movw	r24, r22
    97ae:	bc 01       	movw	r22, r24
    97b0:	cd 01       	movw	r24, r26
    97b2:	ea e0       	ldi	r30, 0x0A	; 10
    97b4:	68 96       	adiw	r28, 0x18	; 24
    97b6:	0c 94 10 50 	jmp	0xa020 <__epilogue_restores__+0x10>

000097ba <__gesf2>:
    97ba:	a8 e1       	ldi	r26, 0x18	; 24
    97bc:	b0 e0       	ldi	r27, 0x00	; 0
    97be:	e3 ee       	ldi	r30, 0xE3	; 227
    97c0:	fb e4       	ldi	r31, 0x4B	; 75
    97c2:	0c 94 fa 4f 	jmp	0x9ff4 <__prologue_saves__+0x1c>
    97c6:	dc 01       	movw	r26, r24
    97c8:	cb 01       	movw	r24, r22
    97ca:	89 8b       	std	Y+17, r24	; 0x11
    97cc:	9a 8b       	std	Y+18, r25	; 0x12
    97ce:	ab 8b       	std	Y+19, r26	; 0x13
    97d0:	bc 8b       	std	Y+20, r27	; 0x14
    97d2:	2d 8b       	std	Y+21, r18	; 0x15
    97d4:	3e 8b       	std	Y+22, r19	; 0x16
    97d6:	4f 8b       	std	Y+23, r20	; 0x17
    97d8:	58 8f       	std	Y+24, r21	; 0x18
    97da:	be 01       	movw	r22, r28
    97dc:	6f 5f       	subi	r22, 0xFF	; 255
    97de:	7f 4f       	sbci	r23, 0xFF	; 255
    97e0:	ce 01       	movw	r24, r28
    97e2:	41 96       	adiw	r24, 0x11	; 17
    97e4:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    97e8:	8e 01       	movw	r16, r28
    97ea:	07 5f       	subi	r16, 0xF7	; 247
    97ec:	1f 4f       	sbci	r17, 0xFF	; 255
    97ee:	b8 01       	movw	r22, r16
    97f0:	ce 01       	movw	r24, r28
    97f2:	45 96       	adiw	r24, 0x15	; 21
    97f4:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    97f8:	89 81       	ldd	r24, Y+1	; 0x01
    97fa:	82 30       	cpi	r24, 0x02	; 2
    97fc:	18 f0       	brcs	.+6      	; 0x9804 <__gesf2+0x4a>
    97fe:	89 85       	ldd	r24, Y+9	; 0x09
    9800:	82 30       	cpi	r24, 0x02	; 2
    9802:	18 f4       	brcc	.+6      	; 0x980a <__gesf2+0x50>
    9804:	2f ef       	ldi	r18, 0xFF	; 255
    9806:	3f ef       	ldi	r19, 0xFF	; 255
    9808:	09 c0       	rjmp	.+18     	; 0x981c <__gesf2+0x62>
    980a:	b8 01       	movw	r22, r16
    980c:	ce 01       	movw	r24, r28
    980e:	01 96       	adiw	r24, 0x01	; 1
    9810:	0e 94 2b 4e 	call	0x9c56 <__fpcmp_parts_f>
    9814:	28 2f       	mov	r18, r24
    9816:	33 27       	eor	r19, r19
    9818:	27 fd       	sbrc	r18, 7
    981a:	30 95       	com	r19
    981c:	c9 01       	movw	r24, r18
    981e:	e4 e0       	ldi	r30, 0x04	; 4
    9820:	68 96       	adiw	r28, 0x18	; 24
    9822:	0c 94 16 50 	jmp	0xa02c <__epilogue_restores__+0x1c>

00009826 <__floatsisf>:
    9826:	a8 e0       	ldi	r26, 0x08	; 8
    9828:	b0 e0       	ldi	r27, 0x00	; 0
    982a:	e9 e1       	ldi	r30, 0x19	; 25
    982c:	fc e4       	ldi	r31, 0x4C	; 76
    982e:	0c 94 f8 4f 	jmp	0x9ff0 <__prologue_saves__+0x18>
    9832:	9b 01       	movw	r18, r22
    9834:	ac 01       	movw	r20, r24
    9836:	7b 01       	movw	r14, r22
    9838:	8c 01       	movw	r16, r24
    983a:	ee 24       	eor	r14, r14
    983c:	17 fd       	sbrc	r17, 7
    983e:	e3 94       	inc	r14
    9840:	ff 24       	eor	r15, r15
    9842:	00 27       	eor	r16, r16
    9844:	11 27       	eor	r17, r17
    9846:	ea 82       	std	Y+2, r14	; 0x02
    9848:	21 15       	cp	r18, r1
    984a:	31 05       	cpc	r19, r1
    984c:	41 05       	cpc	r20, r1
    984e:	51 05       	cpc	r21, r1
    9850:	39 f4       	brne	.+14     	; 0x9860 <__floatsisf+0x3a>
    9852:	82 e0       	ldi	r24, 0x02	; 2
    9854:	89 83       	std	Y+1, r24	; 0x01
    9856:	ce 01       	movw	r24, r28
    9858:	01 96       	adiw	r24, 0x01	; 1
    985a:	0e 94 c9 4c 	call	0x9992 <__pack_f>
    985e:	43 c0       	rjmp	.+134    	; 0x98e6 <__floatsisf+0xc0>
    9860:	83 e0       	ldi	r24, 0x03	; 3
    9862:	89 83       	std	Y+1, r24	; 0x01
    9864:	6e e1       	ldi	r22, 0x1E	; 30
    9866:	70 e0       	ldi	r23, 0x00	; 0
    9868:	cb 01       	movw	r24, r22
    986a:	ee 20       	and	r14, r14
    986c:	31 f5       	brne	.+76     	; 0x98ba <__floatsisf+0x94>
    986e:	79 01       	movw	r14, r18
    9870:	8a 01       	movw	r16, r20
    9872:	a8 01       	movw	r20, r16
    9874:	97 01       	movw	r18, r14
    9876:	20 30       	cpi	r18, 0x00	; 0
    9878:	e0 e0       	ldi	r30, 0x00	; 0
    987a:	3e 07       	cpc	r19, r30
    987c:	e0 e0       	ldi	r30, 0x00	; 0
    987e:	4e 07       	cpc	r20, r30
    9880:	e0 e4       	ldi	r30, 0x40	; 64
    9882:	5e 07       	cpc	r21, r30
    9884:	98 f4       	brcc	.+38     	; 0x98ac <__floatsisf+0x86>
    9886:	79 01       	movw	r14, r18
    9888:	8a 01       	movw	r16, r20
    988a:	ee 0c       	add	r14, r14
    988c:	ff 1c       	adc	r15, r15
    988e:	00 1f       	adc	r16, r16
    9890:	11 1f       	adc	r17, r17
    9892:	01 97       	sbiw	r24, 0x01	; 1
    9894:	bc 01       	movw	r22, r24
    9896:	a8 01       	movw	r20, r16
    9898:	97 01       	movw	r18, r14
    989a:	e0 e0       	ldi	r30, 0x00	; 0
    989c:	ee 16       	cp	r14, r30
    989e:	e0 e0       	ldi	r30, 0x00	; 0
    98a0:	fe 06       	cpc	r15, r30
    98a2:	e0 e0       	ldi	r30, 0x00	; 0
    98a4:	0e 07       	cpc	r16, r30
    98a6:	e0 e4       	ldi	r30, 0x40	; 64
    98a8:	1e 07       	cpc	r17, r30
    98aa:	68 f3       	brcs	.-38     	; 0x9886 <__floatsisf+0x60>
    98ac:	ed 82       	std	Y+5, r14	; 0x05
    98ae:	fe 82       	std	Y+6, r15	; 0x06
    98b0:	0f 83       	std	Y+7, r16	; 0x07
    98b2:	18 87       	std	Y+8, r17	; 0x08
    98b4:	7c 83       	std	Y+4, r23	; 0x04
    98b6:	6b 83       	std	Y+3, r22	; 0x03
    98b8:	ce cf       	rjmp	.-100    	; 0x9856 <__floatsisf+0x30>
    98ba:	20 30       	cpi	r18, 0x00	; 0
    98bc:	e0 e0       	ldi	r30, 0x00	; 0
    98be:	3e 07       	cpc	r19, r30
    98c0:	e0 e0       	ldi	r30, 0x00	; 0
    98c2:	4e 07       	cpc	r20, r30
    98c4:	e0 e8       	ldi	r30, 0x80	; 128
    98c6:	5e 07       	cpc	r21, r30
    98c8:	41 f0       	breq	.+16     	; 0x98da <__floatsisf+0xb4>
    98ca:	ee 24       	eor	r14, r14
    98cc:	ff 24       	eor	r15, r15
    98ce:	87 01       	movw	r16, r14
    98d0:	e2 1a       	sub	r14, r18
    98d2:	f3 0a       	sbc	r15, r19
    98d4:	04 0b       	sbc	r16, r20
    98d6:	15 0b       	sbc	r17, r21
    98d8:	cc cf       	rjmp	.-104    	; 0x9872 <__floatsisf+0x4c>
    98da:	7c 83       	std	Y+4, r23	; 0x04
    98dc:	6b 83       	std	Y+3, r22	; 0x03
    98de:	60 e0       	ldi	r22, 0x00	; 0
    98e0:	70 e0       	ldi	r23, 0x00	; 0
    98e2:	80 e0       	ldi	r24, 0x00	; 0
    98e4:	9f ec       	ldi	r25, 0xCF	; 207
    98e6:	e6 e0       	ldi	r30, 0x06	; 6
    98e8:	28 96       	adiw	r28, 0x08	; 8
    98ea:	0c 94 14 50 	jmp	0xa028 <__epilogue_restores__+0x18>

000098ee <__fixsfsi>:
    98ee:	ac e0       	ldi	r26, 0x0C	; 12
    98f0:	b0 e0       	ldi	r27, 0x00	; 0
    98f2:	ed e7       	ldi	r30, 0x7D	; 125
    98f4:	fc e4       	ldi	r31, 0x4C	; 76
    98f6:	0c 94 fc 4f 	jmp	0x9ff8 <__prologue_saves__+0x20>
    98fa:	dc 01       	movw	r26, r24
    98fc:	cb 01       	movw	r24, r22
    98fe:	89 87       	std	Y+9, r24	; 0x09
    9900:	9a 87       	std	Y+10, r25	; 0x0a
    9902:	ab 87       	std	Y+11, r26	; 0x0b
    9904:	bc 87       	std	Y+12, r27	; 0x0c
    9906:	be 01       	movw	r22, r28
    9908:	6f 5f       	subi	r22, 0xFF	; 255
    990a:	7f 4f       	sbci	r23, 0xFF	; 255
    990c:	ce 01       	movw	r24, r28
    990e:	09 96       	adiw	r24, 0x09	; 9
    9910:	0e 94 b1 4d 	call	0x9b62 <__unpack_f>
    9914:	89 81       	ldd	r24, Y+1	; 0x01
    9916:	82 30       	cpi	r24, 0x02	; 2
    9918:	11 f0       	breq	.+4      	; 0x991e <__fixsfsi+0x30>
    991a:	82 30       	cpi	r24, 0x02	; 2
    991c:	28 f4       	brcc	.+10     	; 0x9928 <__fixsfsi+0x3a>
    991e:	60 e0       	ldi	r22, 0x00	; 0
    9920:	70 e0       	ldi	r23, 0x00	; 0
    9922:	80 e0       	ldi	r24, 0x00	; 0
    9924:	90 e0       	ldi	r25, 0x00	; 0
    9926:	31 c0       	rjmp	.+98     	; 0x998a <__fixsfsi+0x9c>
    9928:	84 30       	cpi	r24, 0x04	; 4
    992a:	39 f0       	breq	.+14     	; 0x993a <__fixsfsi+0x4c>
    992c:	2b 81       	ldd	r18, Y+3	; 0x03
    992e:	3c 81       	ldd	r19, Y+4	; 0x04
    9930:	37 fd       	sbrc	r19, 7
    9932:	f5 cf       	rjmp	.-22     	; 0x991e <__fixsfsi+0x30>
    9934:	2f 31       	cpi	r18, 0x1F	; 31
    9936:	31 05       	cpc	r19, r1
    9938:	6c f0       	brlt	.+26     	; 0x9954 <__fixsfsi+0x66>
    993a:	8a 81       	ldd	r24, Y+2	; 0x02
    993c:	88 23       	and	r24, r24
    993e:	29 f0       	breq	.+10     	; 0x994a <__fixsfsi+0x5c>
    9940:	60 e0       	ldi	r22, 0x00	; 0
    9942:	70 e0       	ldi	r23, 0x00	; 0
    9944:	80 e0       	ldi	r24, 0x00	; 0
    9946:	90 e8       	ldi	r25, 0x80	; 128
    9948:	20 c0       	rjmp	.+64     	; 0x998a <__fixsfsi+0x9c>
    994a:	6f ef       	ldi	r22, 0xFF	; 255
    994c:	7f ef       	ldi	r23, 0xFF	; 255
    994e:	8f ef       	ldi	r24, 0xFF	; 255
    9950:	9f e7       	ldi	r25, 0x7F	; 127
    9952:	1b c0       	rjmp	.+54     	; 0x998a <__fixsfsi+0x9c>
    9954:	8e e1       	ldi	r24, 0x1E	; 30
    9956:	90 e0       	ldi	r25, 0x00	; 0
    9958:	82 1b       	sub	r24, r18
    995a:	93 0b       	sbc	r25, r19
    995c:	2d 81       	ldd	r18, Y+5	; 0x05
    995e:	3e 81       	ldd	r19, Y+6	; 0x06
    9960:	4f 81       	ldd	r20, Y+7	; 0x07
    9962:	58 85       	ldd	r21, Y+8	; 0x08
    9964:	04 c0       	rjmp	.+8      	; 0x996e <__fixsfsi+0x80>
    9966:	56 95       	lsr	r21
    9968:	47 95       	ror	r20
    996a:	37 95       	ror	r19
    996c:	27 95       	ror	r18
    996e:	8a 95       	dec	r24
    9970:	d2 f7       	brpl	.-12     	; 0x9966 <__fixsfsi+0x78>
    9972:	8a 81       	ldd	r24, Y+2	; 0x02
    9974:	88 23       	and	r24, r24
    9976:	39 f0       	breq	.+14     	; 0x9986 <__fixsfsi+0x98>
    9978:	50 95       	com	r21
    997a:	40 95       	com	r20
    997c:	30 95       	com	r19
    997e:	21 95       	neg	r18
    9980:	3f 4f       	sbci	r19, 0xFF	; 255
    9982:	4f 4f       	sbci	r20, 0xFF	; 255
    9984:	5f 4f       	sbci	r21, 0xFF	; 255
    9986:	ca 01       	movw	r24, r20
    9988:	b9 01       	movw	r22, r18
    998a:	e2 e0       	ldi	r30, 0x02	; 2
    998c:	2c 96       	adiw	r28, 0x0c	; 12
    998e:	0c 94 18 50 	jmp	0xa030 <__epilogue_restores__+0x20>

00009992 <__pack_f>:
    9992:	a0 e0       	ldi	r26, 0x00	; 0
    9994:	b0 e0       	ldi	r27, 0x00	; 0
    9996:	ef ec       	ldi	r30, 0xCF	; 207
    9998:	fc e4       	ldi	r31, 0x4C	; 76
    999a:	0c 94 f2 4f 	jmp	0x9fe4 <__prologue_saves__+0xc>
    999e:	88 24       	eor	r8, r8
    99a0:	99 24       	eor	r9, r9
    99a2:	54 01       	movw	r10, r8
    99a4:	dc 01       	movw	r26, r24
    99a6:	fc 01       	movw	r30, r24
    99a8:	24 81       	ldd	r18, Z+4	; 0x04
    99aa:	35 81       	ldd	r19, Z+5	; 0x05
    99ac:	46 81       	ldd	r20, Z+6	; 0x06
    99ae:	57 81       	ldd	r21, Z+7	; 0x07
    99b0:	81 81       	ldd	r24, Z+1	; 0x01
    99b2:	08 2f       	mov	r16, r24
    99b4:	11 27       	eor	r17, r17
    99b6:	60 e0       	ldi	r22, 0x00	; 0
    99b8:	70 e0       	ldi	r23, 0x00	; 0
    99ba:	8c 91       	ld	r24, X
    99bc:	82 30       	cpi	r24, 0x02	; 2
    99be:	20 f4       	brcc	.+8      	; 0x99c8 <__pack_f+0x36>
    99c0:	6f ef       	ldi	r22, 0xFF	; 255
    99c2:	70 e0       	ldi	r23, 0x00	; 0
    99c4:	40 61       	ori	r20, 0x10	; 16
    99c6:	a4 c0       	rjmp	.+328    	; 0x9b10 <__pack_f+0x17e>
    99c8:	84 30       	cpi	r24, 0x04	; 4
    99ca:	09 f4       	brne	.+2      	; 0x99ce <__pack_f+0x3c>
    99cc:	64 c0       	rjmp	.+200    	; 0x9a96 <__pack_f+0x104>
    99ce:	82 30       	cpi	r24, 0x02	; 2
    99d0:	09 f4       	brne	.+2      	; 0x99d4 <__pack_f+0x42>
    99d2:	63 c0       	rjmp	.+198    	; 0x9a9a <__pack_f+0x108>
    99d4:	21 15       	cp	r18, r1
    99d6:	31 05       	cpc	r19, r1
    99d8:	41 05       	cpc	r20, r1
    99da:	51 05       	cpc	r21, r1
    99dc:	09 f4       	brne	.+2      	; 0x99e0 <__pack_f+0x4e>
    99de:	98 c0       	rjmp	.+304    	; 0x9b10 <__pack_f+0x17e>
    99e0:	fd 01       	movw	r30, r26
    99e2:	82 81       	ldd	r24, Z+2	; 0x02
    99e4:	93 81       	ldd	r25, Z+3	; 0x03
    99e6:	ff ef       	ldi	r31, 0xFF	; 255
    99e8:	82 38       	cpi	r24, 0x82	; 130
    99ea:	9f 07       	cpc	r25, r31
    99ec:	0c f0       	brlt	.+2      	; 0x99f0 <__pack_f+0x5e>
    99ee:	50 c0       	rjmp	.+160    	; 0x9a90 <__pack_f+0xfe>
    99f0:	a2 e8       	ldi	r26, 0x82	; 130
    99f2:	ea 2e       	mov	r14, r26
    99f4:	af ef       	ldi	r26, 0xFF	; 255
    99f6:	fa 2e       	mov	r15, r26
    99f8:	e8 1a       	sub	r14, r24
    99fa:	f9 0a       	sbc	r15, r25
    99fc:	8a e1       	ldi	r24, 0x1A	; 26
    99fe:	e8 16       	cp	r14, r24
    9a00:	f1 04       	cpc	r15, r1
    9a02:	0c f0       	brlt	.+2      	; 0x9a06 <__pack_f+0x74>
    9a04:	6b c0       	rjmp	.+214    	; 0x9adc <__pack_f+0x14a>
    9a06:	6b 01       	movw	r12, r22
    9a08:	81 e0       	ldi	r24, 0x01	; 1
    9a0a:	90 e0       	ldi	r25, 0x00	; 0
    9a0c:	a0 e0       	ldi	r26, 0x00	; 0
    9a0e:	b0 e0       	ldi	r27, 0x00	; 0
    9a10:	0e 2c       	mov	r0, r14
    9a12:	04 c0       	rjmp	.+8      	; 0x9a1c <__pack_f+0x8a>
    9a14:	88 0f       	add	r24, r24
    9a16:	99 1f       	adc	r25, r25
    9a18:	aa 1f       	adc	r26, r26
    9a1a:	bb 1f       	adc	r27, r27
    9a1c:	0a 94       	dec	r0
    9a1e:	d2 f7       	brpl	.-12     	; 0x9a14 <__pack_f+0x82>
    9a20:	01 97       	sbiw	r24, 0x01	; 1
    9a22:	a1 09       	sbc	r26, r1
    9a24:	b1 09       	sbc	r27, r1
    9a26:	82 23       	and	r24, r18
    9a28:	93 23       	and	r25, r19
    9a2a:	a4 23       	and	r26, r20
    9a2c:	b5 23       	and	r27, r21
    9a2e:	00 97       	sbiw	r24, 0x00	; 0
    9a30:	a1 05       	cpc	r26, r1
    9a32:	b1 05       	cpc	r27, r1
    9a34:	19 f0       	breq	.+6      	; 0x9a3c <__pack_f+0xaa>
    9a36:	f1 e0       	ldi	r31, 0x01	; 1
    9a38:	cf 2e       	mov	r12, r31
    9a3a:	d1 2c       	mov	r13, r1
    9a3c:	04 c0       	rjmp	.+8      	; 0x9a46 <__pack_f+0xb4>
    9a3e:	56 95       	lsr	r21
    9a40:	47 95       	ror	r20
    9a42:	37 95       	ror	r19
    9a44:	27 95       	ror	r18
    9a46:	ea 94       	dec	r14
    9a48:	d2 f7       	brpl	.-12     	; 0x9a3e <__pack_f+0xac>
    9a4a:	c6 01       	movw	r24, r12
    9a4c:	aa 27       	eor	r26, r26
    9a4e:	97 fd       	sbrc	r25, 7
    9a50:	a0 95       	com	r26
    9a52:	ba 2f       	mov	r27, r26
    9a54:	28 2b       	or	r18, r24
    9a56:	39 2b       	or	r19, r25
    9a58:	4a 2b       	or	r20, r26
    9a5a:	5b 2b       	or	r21, r27
    9a5c:	da 01       	movw	r26, r20
    9a5e:	c9 01       	movw	r24, r18
    9a60:	8f 77       	andi	r24, 0x7F	; 127
    9a62:	90 70       	andi	r25, 0x00	; 0
    9a64:	a0 70       	andi	r26, 0x00	; 0
    9a66:	b0 70       	andi	r27, 0x00	; 0
    9a68:	80 34       	cpi	r24, 0x40	; 64
    9a6a:	91 05       	cpc	r25, r1
    9a6c:	a1 05       	cpc	r26, r1
    9a6e:	b1 05       	cpc	r27, r1
    9a70:	d1 f1       	breq	.+116    	; 0x9ae6 <__pack_f+0x154>
    9a72:	21 5c       	subi	r18, 0xC1	; 193
    9a74:	3f 4f       	sbci	r19, 0xFF	; 255
    9a76:	4f 4f       	sbci	r20, 0xFF	; 255
    9a78:	5f 4f       	sbci	r21, 0xFF	; 255
    9a7a:	20 30       	cpi	r18, 0x00	; 0
    9a7c:	e0 e0       	ldi	r30, 0x00	; 0
    9a7e:	3e 07       	cpc	r19, r30
    9a80:	e0 e0       	ldi	r30, 0x00	; 0
    9a82:	4e 07       	cpc	r20, r30
    9a84:	e0 e4       	ldi	r30, 0x40	; 64
    9a86:	5e 07       	cpc	r21, r30
    9a88:	08 f1       	brcs	.+66     	; 0x9acc <__pack_f+0x13a>
    9a8a:	61 e0       	ldi	r22, 0x01	; 1
    9a8c:	70 e0       	ldi	r23, 0x00	; 0
    9a8e:	1e c0       	rjmp	.+60     	; 0x9acc <__pack_f+0x13a>
    9a90:	80 38       	cpi	r24, 0x80	; 128
    9a92:	91 05       	cpc	r25, r1
    9a94:	3c f0       	brlt	.+14     	; 0x9aa4 <__pack_f+0x112>
    9a96:	6f ef       	ldi	r22, 0xFF	; 255
    9a98:	70 e0       	ldi	r23, 0x00	; 0
    9a9a:	20 e0       	ldi	r18, 0x00	; 0
    9a9c:	30 e0       	ldi	r19, 0x00	; 0
    9a9e:	40 e0       	ldi	r20, 0x00	; 0
    9aa0:	50 e0       	ldi	r21, 0x00	; 0
    9aa2:	36 c0       	rjmp	.+108    	; 0x9b10 <__pack_f+0x17e>
    9aa4:	bc 01       	movw	r22, r24
    9aa6:	61 58       	subi	r22, 0x81	; 129
    9aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    9aaa:	da 01       	movw	r26, r20
    9aac:	c9 01       	movw	r24, r18
    9aae:	8f 77       	andi	r24, 0x7F	; 127
    9ab0:	90 70       	andi	r25, 0x00	; 0
    9ab2:	a0 70       	andi	r26, 0x00	; 0
    9ab4:	b0 70       	andi	r27, 0x00	; 0
    9ab6:	80 34       	cpi	r24, 0x40	; 64
    9ab8:	91 05       	cpc	r25, r1
    9aba:	a1 05       	cpc	r26, r1
    9abc:	b1 05       	cpc	r27, r1
    9abe:	d1 f0       	breq	.+52     	; 0x9af4 <__pack_f+0x162>
    9ac0:	21 5c       	subi	r18, 0xC1	; 193
    9ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    9ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    9ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    9ac8:	57 fd       	sbrc	r21, 7
    9aca:	1b c0       	rjmp	.+54     	; 0x9b02 <__pack_f+0x170>
    9acc:	97 e0       	ldi	r25, 0x07	; 7
    9ace:	56 95       	lsr	r21
    9ad0:	47 95       	ror	r20
    9ad2:	37 95       	ror	r19
    9ad4:	27 95       	ror	r18
    9ad6:	9a 95       	dec	r25
    9ad8:	d1 f7       	brne	.-12     	; 0x9ace <__pack_f+0x13c>
    9ada:	1a c0       	rjmp	.+52     	; 0x9b10 <__pack_f+0x17e>
    9adc:	20 e0       	ldi	r18, 0x00	; 0
    9ade:	30 e0       	ldi	r19, 0x00	; 0
    9ae0:	40 e0       	ldi	r20, 0x00	; 0
    9ae2:	50 e0       	ldi	r21, 0x00	; 0
    9ae4:	bb cf       	rjmp	.-138    	; 0x9a5c <__pack_f+0xca>
    9ae6:	27 ff       	sbrs	r18, 7
    9ae8:	c8 cf       	rjmp	.-112    	; 0x9a7a <__pack_f+0xe8>
    9aea:	20 5c       	subi	r18, 0xC0	; 192
    9aec:	3f 4f       	sbci	r19, 0xFF	; 255
    9aee:	4f 4f       	sbci	r20, 0xFF	; 255
    9af0:	5f 4f       	sbci	r21, 0xFF	; 255
    9af2:	c3 cf       	rjmp	.-122    	; 0x9a7a <__pack_f+0xe8>
    9af4:	27 ff       	sbrs	r18, 7
    9af6:	e8 cf       	rjmp	.-48     	; 0x9ac8 <__pack_f+0x136>
    9af8:	20 5c       	subi	r18, 0xC0	; 192
    9afa:	3f 4f       	sbci	r19, 0xFF	; 255
    9afc:	4f 4f       	sbci	r20, 0xFF	; 255
    9afe:	5f 4f       	sbci	r21, 0xFF	; 255
    9b00:	e3 cf       	rjmp	.-58     	; 0x9ac8 <__pack_f+0x136>
    9b02:	56 95       	lsr	r21
    9b04:	47 95       	ror	r20
    9b06:	37 95       	ror	r19
    9b08:	27 95       	ror	r18
    9b0a:	6f 5f       	subi	r22, 0xFF	; 255
    9b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    9b0e:	de cf       	rjmp	.-68     	; 0x9acc <__pack_f+0x13a>
    9b10:	82 2e       	mov	r8, r18
    9b12:	93 2e       	mov	r9, r19
    9b14:	94 2f       	mov	r25, r20
    9b16:	9f 77       	andi	r25, 0x7F	; 127
    9b18:	8a 2d       	mov	r24, r10
    9b1a:	80 78       	andi	r24, 0x80	; 128
    9b1c:	a8 2e       	mov	r10, r24
    9b1e:	a9 2a       	or	r10, r25
    9b20:	96 2f       	mov	r25, r22
    9b22:	97 95       	ror	r25
    9b24:	99 27       	eor	r25, r25
    9b26:	97 95       	ror	r25
    9b28:	8a 2d       	mov	r24, r10
    9b2a:	8f 77       	andi	r24, 0x7F	; 127
    9b2c:	a8 2e       	mov	r10, r24
    9b2e:	a9 2a       	or	r10, r25
    9b30:	76 95       	lsr	r23
    9b32:	67 95       	ror	r22
    9b34:	96 2f       	mov	r25, r22
    9b36:	9f 77       	andi	r25, 0x7F	; 127
    9b38:	8b 2d       	mov	r24, r11
    9b3a:	80 78       	andi	r24, 0x80	; 128
    9b3c:	b8 2e       	mov	r11, r24
    9b3e:	b9 2a       	or	r11, r25
    9b40:	90 2f       	mov	r25, r16
    9b42:	97 95       	ror	r25
    9b44:	99 27       	eor	r25, r25
    9b46:	97 95       	ror	r25
    9b48:	8b 2d       	mov	r24, r11
    9b4a:	8f 77       	andi	r24, 0x7F	; 127
    9b4c:	b8 2e       	mov	r11, r24
    9b4e:	b9 2a       	or	r11, r25
    9b50:	d5 01       	movw	r26, r10
    9b52:	c4 01       	movw	r24, r8
    9b54:	bc 01       	movw	r22, r24
    9b56:	cd 01       	movw	r24, r26
    9b58:	ec e0       	ldi	r30, 0x0C	; 12
    9b5a:	cd b7       	in	r28, 0x3d	; 61
    9b5c:	de b7       	in	r29, 0x3e	; 62
    9b5e:	0c 94 0e 50 	jmp	0xa01c <__epilogue_restores__+0xc>

00009b62 <__unpack_f>:
    9b62:	cf 93       	push	r28
    9b64:	df 93       	push	r29
    9b66:	fc 01       	movw	r30, r24
    9b68:	db 01       	movw	r26, r22
    9b6a:	40 81       	ld	r20, Z
    9b6c:	51 81       	ldd	r21, Z+1	; 0x01
    9b6e:	22 81       	ldd	r18, Z+2	; 0x02
    9b70:	62 2f       	mov	r22, r18
    9b72:	6f 77       	andi	r22, 0x7F	; 127
    9b74:	70 e0       	ldi	r23, 0x00	; 0
    9b76:	22 1f       	adc	r18, r18
    9b78:	22 27       	eor	r18, r18
    9b7a:	22 1f       	adc	r18, r18
    9b7c:	93 81       	ldd	r25, Z+3	; 0x03
    9b7e:	89 2f       	mov	r24, r25
    9b80:	88 0f       	add	r24, r24
    9b82:	82 2b       	or	r24, r18
    9b84:	28 2f       	mov	r18, r24
    9b86:	33 27       	eor	r19, r19
    9b88:	99 1f       	adc	r25, r25
    9b8a:	99 27       	eor	r25, r25
    9b8c:	99 1f       	adc	r25, r25
    9b8e:	ed 01       	movw	r28, r26
    9b90:	99 83       	std	Y+1, r25	; 0x01
    9b92:	21 15       	cp	r18, r1
    9b94:	31 05       	cpc	r19, r1
    9b96:	41 f4       	brne	.+16     	; 0x9ba8 <__unpack_f+0x46>
    9b98:	41 15       	cp	r20, r1
    9b9a:	51 05       	cpc	r21, r1
    9b9c:	61 05       	cpc	r22, r1
    9b9e:	71 05       	cpc	r23, r1
    9ba0:	e1 f4       	brne	.+56     	; 0x9bda <__unpack_f+0x78>
    9ba2:	82 e0       	ldi	r24, 0x02	; 2
    9ba4:	8c 93       	st	X, r24
    9ba6:	54 c0       	rjmp	.+168    	; 0x9c50 <__unpack_f+0xee>
    9ba8:	2f 3f       	cpi	r18, 0xFF	; 255
    9baa:	31 05       	cpc	r19, r1
    9bac:	09 f4       	brne	.+2      	; 0x9bb0 <__unpack_f+0x4e>
    9bae:	41 c0       	rjmp	.+130    	; 0x9c32 <__unpack_f+0xd0>
    9bb0:	2f 57       	subi	r18, 0x7F	; 127
    9bb2:	30 40       	sbci	r19, 0x00	; 0
    9bb4:	fd 01       	movw	r30, r26
    9bb6:	33 83       	std	Z+3, r19	; 0x03
    9bb8:	22 83       	std	Z+2, r18	; 0x02
    9bba:	83 e0       	ldi	r24, 0x03	; 3
    9bbc:	8c 93       	st	X, r24
    9bbe:	87 e0       	ldi	r24, 0x07	; 7
    9bc0:	44 0f       	add	r20, r20
    9bc2:	55 1f       	adc	r21, r21
    9bc4:	66 1f       	adc	r22, r22
    9bc6:	77 1f       	adc	r23, r23
    9bc8:	8a 95       	dec	r24
    9bca:	d1 f7       	brne	.-12     	; 0x9bc0 <__unpack_f+0x5e>
    9bcc:	70 64       	ori	r23, 0x40	; 64
    9bce:	ed 01       	movw	r28, r26
    9bd0:	4c 83       	std	Y+4, r20	; 0x04
    9bd2:	5d 83       	std	Y+5, r21	; 0x05
    9bd4:	6e 83       	std	Y+6, r22	; 0x06
    9bd6:	7f 83       	std	Y+7, r23	; 0x07
    9bd8:	3b c0       	rjmp	.+118    	; 0x9c50 <__unpack_f+0xee>
    9bda:	22 e8       	ldi	r18, 0x82	; 130
    9bdc:	3f ef       	ldi	r19, 0xFF	; 255
    9bde:	f9 01       	movw	r30, r18
    9be0:	c7 e0       	ldi	r28, 0x07	; 7
    9be2:	44 0f       	add	r20, r20
    9be4:	55 1f       	adc	r21, r21
    9be6:	66 1f       	adc	r22, r22
    9be8:	77 1f       	adc	r23, r23
    9bea:	ca 95       	dec	r28
    9bec:	d1 f7       	brne	.-12     	; 0x9be2 <__unpack_f+0x80>
    9bee:	83 e0       	ldi	r24, 0x03	; 3
    9bf0:	8c 93       	st	X, r24
    9bf2:	40 30       	cpi	r20, 0x00	; 0
    9bf4:	80 e0       	ldi	r24, 0x00	; 0
    9bf6:	58 07       	cpc	r21, r24
    9bf8:	80 e0       	ldi	r24, 0x00	; 0
    9bfa:	68 07       	cpc	r22, r24
    9bfc:	80 e4       	ldi	r24, 0x40	; 64
    9bfe:	78 07       	cpc	r23, r24
    9c00:	78 f4       	brcc	.+30     	; 0x9c20 <__unpack_f+0xbe>
    9c02:	44 0f       	add	r20, r20
    9c04:	55 1f       	adc	r21, r21
    9c06:	66 1f       	adc	r22, r22
    9c08:	77 1f       	adc	r23, r23
    9c0a:	21 50       	subi	r18, 0x01	; 1
    9c0c:	30 40       	sbci	r19, 0x00	; 0
    9c0e:	f9 01       	movw	r30, r18
    9c10:	40 30       	cpi	r20, 0x00	; 0
    9c12:	c0 e0       	ldi	r28, 0x00	; 0
    9c14:	5c 07       	cpc	r21, r28
    9c16:	c0 e0       	ldi	r28, 0x00	; 0
    9c18:	6c 07       	cpc	r22, r28
    9c1a:	c0 e4       	ldi	r28, 0x40	; 64
    9c1c:	7c 07       	cpc	r23, r28
    9c1e:	88 f3       	brcs	.-30     	; 0x9c02 <__unpack_f+0xa0>
    9c20:	ed 01       	movw	r28, r26
    9c22:	fb 83       	std	Y+3, r31	; 0x03
    9c24:	ea 83       	std	Y+2, r30	; 0x02
    9c26:	fd 01       	movw	r30, r26
    9c28:	44 83       	std	Z+4, r20	; 0x04
    9c2a:	55 83       	std	Z+5, r21	; 0x05
    9c2c:	66 83       	std	Z+6, r22	; 0x06
    9c2e:	77 83       	std	Z+7, r23	; 0x07
    9c30:	0f c0       	rjmp	.+30     	; 0x9c50 <__unpack_f+0xee>
    9c32:	41 15       	cp	r20, r1
    9c34:	51 05       	cpc	r21, r1
    9c36:	61 05       	cpc	r22, r1
    9c38:	71 05       	cpc	r23, r1
    9c3a:	19 f4       	brne	.+6      	; 0x9c42 <__unpack_f+0xe0>
    9c3c:	84 e0       	ldi	r24, 0x04	; 4
    9c3e:	8c 93       	st	X, r24
    9c40:	07 c0       	rjmp	.+14     	; 0x9c50 <__unpack_f+0xee>
    9c42:	64 ff       	sbrs	r22, 4
    9c44:	03 c0       	rjmp	.+6      	; 0x9c4c <__unpack_f+0xea>
    9c46:	81 e0       	ldi	r24, 0x01	; 1
    9c48:	8c 93       	st	X, r24
    9c4a:	c1 cf       	rjmp	.-126    	; 0x9bce <__unpack_f+0x6c>
    9c4c:	1c 92       	st	X, r1
    9c4e:	bf cf       	rjmp	.-130    	; 0x9bce <__unpack_f+0x6c>
    9c50:	df 91       	pop	r29
    9c52:	cf 91       	pop	r28
    9c54:	08 95       	ret

00009c56 <__fpcmp_parts_f>:
    9c56:	0f 93       	push	r16
    9c58:	1f 93       	push	r17
    9c5a:	cf 93       	push	r28
    9c5c:	df 93       	push	r29
    9c5e:	fc 01       	movw	r30, r24
    9c60:	db 01       	movw	r26, r22
    9c62:	80 81       	ld	r24, Z
    9c64:	82 30       	cpi	r24, 0x02	; 2
    9c66:	18 f0       	brcs	.+6      	; 0x9c6e <__fpcmp_parts_f+0x18>
    9c68:	9c 91       	ld	r25, X
    9c6a:	92 30       	cpi	r25, 0x02	; 2
    9c6c:	18 f4       	brcc	.+6      	; 0x9c74 <__fpcmp_parts_f+0x1e>
    9c6e:	61 e0       	ldi	r22, 0x01	; 1
    9c70:	70 e0       	ldi	r23, 0x00	; 0
    9c72:	5e c0       	rjmp	.+188    	; 0x9d30 <__fpcmp_parts_f+0xda>
    9c74:	84 30       	cpi	r24, 0x04	; 4
    9c76:	c1 f0       	breq	.+48     	; 0x9ca8 <__fpcmp_parts_f+0x52>
    9c78:	84 30       	cpi	r24, 0x04	; 4
    9c7a:	01 f1       	breq	.+64     	; 0x9cbc <__fpcmp_parts_f+0x66>
    9c7c:	94 30       	cpi	r25, 0x04	; 4
    9c7e:	09 f4       	brne	.+2      	; 0x9c82 <__fpcmp_parts_f+0x2c>
    9c80:	47 c0       	rjmp	.+142    	; 0x9d10 <__fpcmp_parts_f+0xba>
    9c82:	82 30       	cpi	r24, 0x02	; 2
    9c84:	09 f4       	brne	.+2      	; 0x9c88 <__fpcmp_parts_f+0x32>
    9c86:	4b c0       	rjmp	.+150    	; 0x9d1e <__fpcmp_parts_f+0xc8>
    9c88:	82 30       	cpi	r24, 0x02	; 2
    9c8a:	09 f4       	brne	.+2      	; 0x9c8e <__fpcmp_parts_f+0x38>
    9c8c:	4e c0       	rjmp	.+156    	; 0x9d2a <__fpcmp_parts_f+0xd4>
    9c8e:	92 30       	cpi	r25, 0x02	; 2
    9c90:	a9 f0       	breq	.+42     	; 0x9cbc <__fpcmp_parts_f+0x66>
    9c92:	41 81       	ldd	r20, Z+1	; 0x01
    9c94:	ed 01       	movw	r28, r26
    9c96:	89 81       	ldd	r24, Y+1	; 0x01
    9c98:	48 17       	cp	r20, r24
    9c9a:	b9 f0       	breq	.+46     	; 0x9cca <__fpcmp_parts_f+0x74>
    9c9c:	44 23       	and	r20, r20
    9c9e:	89 f0       	breq	.+34     	; 0x9cc2 <__fpcmp_parts_f+0x6c>
    9ca0:	8f ef       	ldi	r24, 0xFF	; 255
    9ca2:	9f ef       	ldi	r25, 0xFF	; 255
    9ca4:	bc 01       	movw	r22, r24
    9ca6:	44 c0       	rjmp	.+136    	; 0x9d30 <__fpcmp_parts_f+0xda>
    9ca8:	94 30       	cpi	r25, 0x04	; 4
    9caa:	31 f7       	brne	.-52     	; 0x9c78 <__fpcmp_parts_f+0x22>
    9cac:	eb 01       	movw	r28, r22
    9cae:	89 81       	ldd	r24, Y+1	; 0x01
    9cb0:	68 2f       	mov	r22, r24
    9cb2:	77 27       	eor	r23, r23
    9cb4:	81 81       	ldd	r24, Z+1	; 0x01
    9cb6:	68 1b       	sub	r22, r24
    9cb8:	71 09       	sbc	r23, r1
    9cba:	3a c0       	rjmp	.+116    	; 0x9d30 <__fpcmp_parts_f+0xda>
    9cbc:	81 81       	ldd	r24, Z+1	; 0x01
    9cbe:	88 23       	and	r24, r24
    9cc0:	79 f7       	brne	.-34     	; 0x9ca0 <__fpcmp_parts_f+0x4a>
    9cc2:	81 e0       	ldi	r24, 0x01	; 1
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	bc 01       	movw	r22, r24
    9cc8:	33 c0       	rjmp	.+102    	; 0x9d30 <__fpcmp_parts_f+0xda>
    9cca:	22 81       	ldd	r18, Z+2	; 0x02
    9ccc:	33 81       	ldd	r19, Z+3	; 0x03
    9cce:	ed 01       	movw	r28, r26
    9cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    9cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    9cd4:	82 17       	cp	r24, r18
    9cd6:	93 07       	cpc	r25, r19
    9cd8:	0c f3       	brlt	.-62     	; 0x9c9c <__fpcmp_parts_f+0x46>
    9cda:	28 17       	cp	r18, r24
    9cdc:	39 07       	cpc	r19, r25
    9cde:	9c f0       	brlt	.+38     	; 0x9d06 <__fpcmp_parts_f+0xb0>
    9ce0:	04 81       	ldd	r16, Z+4	; 0x04
    9ce2:	15 81       	ldd	r17, Z+5	; 0x05
    9ce4:	26 81       	ldd	r18, Z+6	; 0x06
    9ce6:	37 81       	ldd	r19, Z+7	; 0x07
    9ce8:	fd 01       	movw	r30, r26
    9cea:	64 81       	ldd	r22, Z+4	; 0x04
    9cec:	75 81       	ldd	r23, Z+5	; 0x05
    9cee:	86 81       	ldd	r24, Z+6	; 0x06
    9cf0:	97 81       	ldd	r25, Z+7	; 0x07
    9cf2:	60 17       	cp	r22, r16
    9cf4:	71 07       	cpc	r23, r17
    9cf6:	82 07       	cpc	r24, r18
    9cf8:	93 07       	cpc	r25, r19
    9cfa:	80 f2       	brcs	.-96     	; 0x9c9c <__fpcmp_parts_f+0x46>
    9cfc:	06 17       	cp	r16, r22
    9cfe:	17 07       	cpc	r17, r23
    9d00:	28 07       	cpc	r18, r24
    9d02:	39 07       	cpc	r19, r25
    9d04:	78 f4       	brcc	.+30     	; 0x9d24 <__fpcmp_parts_f+0xce>
    9d06:	44 23       	and	r20, r20
    9d08:	59 f2       	breq	.-106    	; 0x9ca0 <__fpcmp_parts_f+0x4a>
    9d0a:	81 e0       	ldi	r24, 0x01	; 1
    9d0c:	90 e0       	ldi	r25, 0x00	; 0
    9d0e:	db cf       	rjmp	.-74     	; 0x9cc6 <__fpcmp_parts_f+0x70>
    9d10:	fd 01       	movw	r30, r26
    9d12:	81 81       	ldd	r24, Z+1	; 0x01
    9d14:	88 23       	and	r24, r24
    9d16:	21 f2       	breq	.-120    	; 0x9ca0 <__fpcmp_parts_f+0x4a>
    9d18:	81 e0       	ldi	r24, 0x01	; 1
    9d1a:	90 e0       	ldi	r25, 0x00	; 0
    9d1c:	d4 cf       	rjmp	.-88     	; 0x9cc6 <__fpcmp_parts_f+0x70>
    9d1e:	92 30       	cpi	r25, 0x02	; 2
    9d20:	09 f0       	breq	.+2      	; 0x9d24 <__fpcmp_parts_f+0xce>
    9d22:	b2 cf       	rjmp	.-156    	; 0x9c88 <__fpcmp_parts_f+0x32>
    9d24:	60 e0       	ldi	r22, 0x00	; 0
    9d26:	70 e0       	ldi	r23, 0x00	; 0
    9d28:	03 c0       	rjmp	.+6      	; 0x9d30 <__fpcmp_parts_f+0xda>
    9d2a:	ed 01       	movw	r28, r26
    9d2c:	89 81       	ldd	r24, Y+1	; 0x01
    9d2e:	f2 cf       	rjmp	.-28     	; 0x9d14 <__fpcmp_parts_f+0xbe>
    9d30:	cb 01       	movw	r24, r22
    9d32:	df 91       	pop	r29
    9d34:	cf 91       	pop	r28
    9d36:	1f 91       	pop	r17
    9d38:	0f 91       	pop	r16
    9d3a:	08 95       	ret

00009d3c <atoi>:
    9d3c:	fc 01       	movw	r30, r24
    9d3e:	88 27       	eor	r24, r24
    9d40:	99 27       	eor	r25, r25
    9d42:	e8 94       	clt
    9d44:	21 91       	ld	r18, Z+
    9d46:	22 23       	and	r18, r18
    9d48:	f1 f0       	breq	.+60     	; 0x9d86 <atoi+0x4a>
    9d4a:	20 32       	cpi	r18, 0x20	; 32
    9d4c:	d9 f3       	breq	.-10     	; 0x9d44 <atoi+0x8>
    9d4e:	29 30       	cpi	r18, 0x09	; 9
    9d50:	c9 f3       	breq	.-14     	; 0x9d44 <atoi+0x8>
    9d52:	2a 30       	cpi	r18, 0x0A	; 10
    9d54:	b9 f3       	breq	.-18     	; 0x9d44 <atoi+0x8>
    9d56:	2c 30       	cpi	r18, 0x0C	; 12
    9d58:	a9 f3       	breq	.-22     	; 0x9d44 <atoi+0x8>
    9d5a:	2d 30       	cpi	r18, 0x0D	; 13
    9d5c:	99 f3       	breq	.-26     	; 0x9d44 <atoi+0x8>
    9d5e:	26 37       	cpi	r18, 0x76	; 118
    9d60:	89 f3       	breq	.-30     	; 0x9d44 <atoi+0x8>
    9d62:	2b 32       	cpi	r18, 0x2B	; 43
    9d64:	19 f0       	breq	.+6      	; 0x9d6c <atoi+0x30>
    9d66:	2d 32       	cpi	r18, 0x2D	; 45
    9d68:	21 f4       	brne	.+8      	; 0x9d72 <atoi+0x36>
    9d6a:	68 94       	set
    9d6c:	21 91       	ld	r18, Z+
    9d6e:	22 23       	and	r18, r18
    9d70:	51 f0       	breq	.+20     	; 0x9d86 <atoi+0x4a>
    9d72:	20 33       	cpi	r18, 0x30	; 48
    9d74:	44 f0       	brlt	.+16     	; 0x9d86 <atoi+0x4a>
    9d76:	2a 33       	cpi	r18, 0x3A	; 58
    9d78:	34 f4       	brge	.+12     	; 0x9d86 <atoi+0x4a>
    9d7a:	20 53       	subi	r18, 0x30	; 48
    9d7c:	0e 94 d4 4f 	call	0x9fa8 <__mulhi_const_10>
    9d80:	82 0f       	add	r24, r18
    9d82:	91 1d       	adc	r25, r1
    9d84:	f3 cf       	rjmp	.-26     	; 0x9d6c <atoi+0x30>
    9d86:	81 15       	cp	r24, r1
    9d88:	91 05       	cpc	r25, r1
    9d8a:	21 f0       	breq	.+8      	; 0x9d94 <atoi+0x58>
    9d8c:	1e f4       	brtc	.+6      	; 0x9d94 <atoi+0x58>
    9d8e:	80 95       	com	r24
    9d90:	90 95       	com	r25
    9d92:	01 96       	adiw	r24, 0x01	; 1
    9d94:	08 95       	ret

00009d96 <atol>:
    9d96:	1f 93       	push	r17
    9d98:	fc 01       	movw	r30, r24
    9d9a:	99 27       	eor	r25, r25
    9d9c:	88 27       	eor	r24, r24
    9d9e:	77 27       	eor	r23, r23
    9da0:	66 27       	eor	r22, r22
    9da2:	e8 94       	clt
    9da4:	11 91       	ld	r17, Z+
    9da6:	11 23       	and	r17, r17
    9da8:	01 f1       	breq	.+64     	; 0x9dea <atol+0x54>
    9daa:	10 32       	cpi	r17, 0x20	; 32
    9dac:	d9 f3       	breq	.-10     	; 0x9da4 <atol+0xe>
    9dae:	19 30       	cpi	r17, 0x09	; 9
    9db0:	c9 f3       	breq	.-14     	; 0x9da4 <atol+0xe>
    9db2:	1a 30       	cpi	r17, 0x0A	; 10
    9db4:	b9 f3       	breq	.-18     	; 0x9da4 <atol+0xe>
    9db6:	1c 30       	cpi	r17, 0x0C	; 12
    9db8:	a9 f3       	breq	.-22     	; 0x9da4 <atol+0xe>
    9dba:	1d 30       	cpi	r17, 0x0D	; 13
    9dbc:	99 f3       	breq	.-26     	; 0x9da4 <atol+0xe>
    9dbe:	16 37       	cpi	r17, 0x76	; 118
    9dc0:	89 f3       	breq	.-30     	; 0x9da4 <atol+0xe>
    9dc2:	1b 32       	cpi	r17, 0x2B	; 43
    9dc4:	19 f0       	breq	.+6      	; 0x9dcc <atol+0x36>
    9dc6:	1d 32       	cpi	r17, 0x2D	; 45
    9dc8:	21 f4       	brne	.+8      	; 0x9dd2 <atol+0x3c>
    9dca:	68 94       	set
    9dcc:	11 91       	ld	r17, Z+
    9dce:	11 23       	and	r17, r17
    9dd0:	61 f0       	breq	.+24     	; 0x9dea <atol+0x54>
    9dd2:	10 33       	cpi	r17, 0x30	; 48
    9dd4:	54 f0       	brlt	.+20     	; 0x9dea <atol+0x54>
    9dd6:	1a 33       	cpi	r17, 0x3A	; 58
    9dd8:	44 f4       	brge	.+16     	; 0x9dea <atol+0x54>
    9dda:	10 53       	subi	r17, 0x30	; 48
    9ddc:	0e 94 bf 4f 	call	0x9f7e <__mulsi_const_10>
    9de0:	61 0f       	add	r22, r17
    9de2:	71 1d       	adc	r23, r1
    9de4:	81 1d       	adc	r24, r1
    9de6:	91 1d       	adc	r25, r1
    9de8:	f1 cf       	rjmp	.-30     	; 0x9dcc <atol+0x36>
    9dea:	61 15       	cp	r22, r1
    9dec:	71 05       	cpc	r23, r1
    9dee:	81 05       	cpc	r24, r1
    9df0:	91 05       	cpc	r25, r1
    9df2:	41 f0       	breq	.+16     	; 0x9e04 <atol+0x6e>
    9df4:	3e f4       	brtc	.+14     	; 0x9e04 <atol+0x6e>
    9df6:	90 95       	com	r25
    9df8:	80 95       	com	r24
    9dfa:	70 95       	com	r23
    9dfc:	61 95       	neg	r22
    9dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    9e00:	8f 4f       	sbci	r24, 0xFF	; 255
    9e02:	9f 4f       	sbci	r25, 0xFF	; 255
    9e04:	1f 91       	pop	r17
    9e06:	08 95       	ret

00009e08 <memcpy>:
    9e08:	fb 01       	movw	r30, r22
    9e0a:	dc 01       	movw	r26, r24
    9e0c:	40 ff       	sbrs	r20, 0
    9e0e:	05 c0       	rjmp	.+10     	; 0x9e1a <memcpy+0x12>
    9e10:	02 c0       	rjmp	.+4      	; 0x9e16 <memcpy+0xe>
    9e12:	01 90       	ld	r0, Z+
    9e14:	0d 92       	st	X+, r0
    9e16:	01 90       	ld	r0, Z+
    9e18:	0d 92       	st	X+, r0
    9e1a:	42 50       	subi	r20, 0x02	; 2
    9e1c:	50 40       	sbci	r21, 0x00	; 0
    9e1e:	c8 f7       	brcc	.-14     	; 0x9e12 <memcpy+0xa>
    9e20:	08 95       	ret

00009e22 <memset>:
    9e22:	dc 01       	movw	r26, r24
    9e24:	40 ff       	sbrs	r20, 0
    9e26:	03 c0       	rjmp	.+6      	; 0x9e2e <memset+0xc>
    9e28:	01 c0       	rjmp	.+2      	; 0x9e2c <memset+0xa>
    9e2a:	6d 93       	st	X+, r22
    9e2c:	6d 93       	st	X+, r22
    9e2e:	42 50       	subi	r20, 0x02	; 2
    9e30:	50 40       	sbci	r21, 0x00	; 0
    9e32:	d8 f7       	brcc	.-10     	; 0x9e2a <memset+0x8>
    9e34:	08 95       	ret

00009e36 <strcat>:
    9e36:	fb 01       	movw	r30, r22
    9e38:	dc 01       	movw	r26, r24
    9e3a:	0d 90       	ld	r0, X+
    9e3c:	00 20       	and	r0, r0
    9e3e:	e9 f7       	brne	.-6      	; 0x9e3a <strcat+0x4>
    9e40:	11 97       	sbiw	r26, 0x01	; 1
    9e42:	01 90       	ld	r0, Z+
    9e44:	0d 92       	st	X+, r0
    9e46:	00 20       	and	r0, r0
    9e48:	e1 f7       	brne	.-8      	; 0x9e42 <strcat+0xc>
    9e4a:	08 95       	ret

00009e4c <strcmp>:
    9e4c:	fb 01       	movw	r30, r22
    9e4e:	dc 01       	movw	r26, r24
    9e50:	8d 91       	ld	r24, X+
    9e52:	01 90       	ld	r0, Z+
    9e54:	80 19       	sub	r24, r0
    9e56:	11 f4       	brne	.+4      	; 0x9e5c <strcmp+0x10>
    9e58:	00 20       	and	r0, r0
    9e5a:	d1 f7       	brne	.-12     	; 0x9e50 <strcmp+0x4>
    9e5c:	99 0b       	sbc	r25, r25
    9e5e:	08 95       	ret

00009e60 <strcpy>:
    9e60:	fb 01       	movw	r30, r22
    9e62:	dc 01       	movw	r26, r24
    9e64:	01 90       	ld	r0, Z+
    9e66:	0d 92       	st	X+, r0
    9e68:	00 20       	and	r0, r0
    9e6a:	e1 f7       	brne	.-8      	; 0x9e64 <strcpy+0x4>
    9e6c:	08 95       	ret

00009e6e <strlen>:
    9e6e:	fc 01       	movw	r30, r24
    9e70:	01 90       	ld	r0, Z+
    9e72:	00 20       	and	r0, r0
    9e74:	e9 f7       	brne	.-6      	; 0x9e70 <strlen+0x2>
    9e76:	80 95       	com	r24
    9e78:	90 95       	com	r25
    9e7a:	8e 0f       	add	r24, r30
    9e7c:	9f 1f       	adc	r25, r31
    9e7e:	08 95       	ret

00009e80 <strncmp>:
    9e80:	fb 01       	movw	r30, r22
    9e82:	dc 01       	movw	r26, r24
    9e84:	41 50       	subi	r20, 0x01	; 1
    9e86:	50 40       	sbci	r21, 0x00	; 0
    9e88:	30 f0       	brcs	.+12     	; 0x9e96 <strncmp+0x16>
    9e8a:	8d 91       	ld	r24, X+
    9e8c:	01 90       	ld	r0, Z+
    9e8e:	80 19       	sub	r24, r0
    9e90:	19 f4       	brne	.+6      	; 0x9e98 <strncmp+0x18>
    9e92:	00 20       	and	r0, r0
    9e94:	b9 f7       	brne	.-18     	; 0x9e84 <strncmp+0x4>
    9e96:	88 1b       	sub	r24, r24
    9e98:	99 0b       	sbc	r25, r25
    9e9a:	08 95       	ret

00009e9c <strncpy>:
    9e9c:	fb 01       	movw	r30, r22
    9e9e:	dc 01       	movw	r26, r24
    9ea0:	41 50       	subi	r20, 0x01	; 1
    9ea2:	50 40       	sbci	r21, 0x00	; 0
    9ea4:	48 f0       	brcs	.+18     	; 0x9eb8 <strncpy+0x1c>
    9ea6:	01 90       	ld	r0, Z+
    9ea8:	0d 92       	st	X+, r0
    9eaa:	00 20       	and	r0, r0
    9eac:	c9 f7       	brne	.-14     	; 0x9ea0 <strncpy+0x4>
    9eae:	01 c0       	rjmp	.+2      	; 0x9eb2 <strncpy+0x16>
    9eb0:	1d 92       	st	X+, r1
    9eb2:	41 50       	subi	r20, 0x01	; 1
    9eb4:	50 40       	sbci	r21, 0x00	; 0
    9eb6:	e0 f7       	brcc	.-8      	; 0x9eb0 <strncpy+0x14>
    9eb8:	08 95       	ret

00009eba <strupr>:
    9eba:	dc 01       	movw	r26, r24
    9ebc:	5c 91       	ld	r21, X
    9ebe:	55 23       	and	r21, r21
    9ec0:	41 f0       	breq	.+16     	; 0x9ed2 <strupr+0x18>
    9ec2:	5f 7d       	andi	r21, 0xDF	; 223
    9ec4:	51 34       	cpi	r21, 0x41	; 65
    9ec6:	1c f0       	brlt	.+6      	; 0x9ece <strupr+0x14>
    9ec8:	5b 35       	cpi	r21, 0x5B	; 91
    9eca:	0c f4       	brge	.+2      	; 0x9ece <strupr+0x14>
    9ecc:	5c 93       	st	X, r21
    9ece:	11 96       	adiw	r26, 0x01	; 1
    9ed0:	f5 cf       	rjmp	.-22     	; 0x9ebc <strupr+0x2>
    9ed2:	08 95       	ret

00009ed4 <itoa>:
    9ed4:	fb 01       	movw	r30, r22
    9ed6:	9f 01       	movw	r18, r30
    9ed8:	e8 94       	clt
    9eda:	42 30       	cpi	r20, 0x02	; 2
    9edc:	c4 f0       	brlt	.+48     	; 0x9f0e <itoa+0x3a>
    9ede:	45 32       	cpi	r20, 0x25	; 37
    9ee0:	b4 f4       	brge	.+44     	; 0x9f0e <itoa+0x3a>
    9ee2:	4a 30       	cpi	r20, 0x0A	; 10
    9ee4:	29 f4       	brne	.+10     	; 0x9ef0 <itoa+0x1c>
    9ee6:	97 fb       	bst	r25, 7
    9ee8:	1e f4       	brtc	.+6      	; 0x9ef0 <itoa+0x1c>
    9eea:	90 95       	com	r25
    9eec:	81 95       	neg	r24
    9eee:	9f 4f       	sbci	r25, 0xFF	; 255
    9ef0:	64 2f       	mov	r22, r20
    9ef2:	77 27       	eor	r23, r23
    9ef4:	0e 94 41 50 	call	0xa082 <__udivmodhi4>
    9ef8:	80 5d       	subi	r24, 0xD0	; 208
    9efa:	8a 33       	cpi	r24, 0x3A	; 58
    9efc:	0c f0       	brlt	.+2      	; 0x9f00 <itoa+0x2c>
    9efe:	89 5d       	subi	r24, 0xD9	; 217
    9f00:	81 93       	st	Z+, r24
    9f02:	cb 01       	movw	r24, r22
    9f04:	00 97       	sbiw	r24, 0x00	; 0
    9f06:	a1 f7       	brne	.-24     	; 0x9ef0 <itoa+0x1c>
    9f08:	16 f4       	brtc	.+4      	; 0x9f0e <itoa+0x3a>
    9f0a:	5d e2       	ldi	r21, 0x2D	; 45
    9f0c:	51 93       	st	Z+, r21
    9f0e:	10 82       	st	Z, r1
    9f10:	c9 01       	movw	r24, r18
    9f12:	0c 94 dc 4f 	jmp	0x9fb8 <strrev>

00009f16 <ltoa>:
    9f16:	fa 01       	movw	r30, r20
    9f18:	cf 93       	push	r28
    9f1a:	ff 93       	push	r31
    9f1c:	ef 93       	push	r30
    9f1e:	22 30       	cpi	r18, 0x02	; 2
    9f20:	44 f1       	brlt	.+80     	; 0x9f72 <ltoa+0x5c>
    9f22:	25 32       	cpi	r18, 0x25	; 37
    9f24:	34 f5       	brge	.+76     	; 0x9f72 <ltoa+0x5c>
    9f26:	c2 2f       	mov	r28, r18
    9f28:	e8 94       	clt
    9f2a:	ca 30       	cpi	r28, 0x0A	; 10
    9f2c:	49 f4       	brne	.+18     	; 0x9f40 <ltoa+0x2a>
    9f2e:	97 fb       	bst	r25, 7
    9f30:	3e f4       	brtc	.+14     	; 0x9f40 <ltoa+0x2a>
    9f32:	90 95       	com	r25
    9f34:	80 95       	com	r24
    9f36:	70 95       	com	r23
    9f38:	61 95       	neg	r22
    9f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    9f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    9f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    9f40:	2c 2f       	mov	r18, r28
    9f42:	33 27       	eor	r19, r19
    9f44:	44 27       	eor	r20, r20
    9f46:	55 27       	eor	r21, r21
    9f48:	ff 93       	push	r31
    9f4a:	ef 93       	push	r30
    9f4c:	0e 94 55 50 	call	0xa0aa <__udivmodsi4>
    9f50:	ef 91       	pop	r30
    9f52:	ff 91       	pop	r31
    9f54:	60 5d       	subi	r22, 0xD0	; 208
    9f56:	6a 33       	cpi	r22, 0x3A	; 58
    9f58:	0c f0       	brlt	.+2      	; 0x9f5c <ltoa+0x46>
    9f5a:	69 5d       	subi	r22, 0xD9	; 217
    9f5c:	61 93       	st	Z+, r22
    9f5e:	b9 01       	movw	r22, r18
    9f60:	ca 01       	movw	r24, r20
    9f62:	60 50       	subi	r22, 0x00	; 0
    9f64:	70 40       	sbci	r23, 0x00	; 0
    9f66:	80 40       	sbci	r24, 0x00	; 0
    9f68:	90 40       	sbci	r25, 0x00	; 0
    9f6a:	51 f7       	brne	.-44     	; 0x9f40 <ltoa+0x2a>
    9f6c:	16 f4       	brtc	.+4      	; 0x9f72 <ltoa+0x5c>
    9f6e:	cd e2       	ldi	r28, 0x2D	; 45
    9f70:	c1 93       	st	Z+, r28
    9f72:	10 82       	st	Z, r1
    9f74:	8f 91       	pop	r24
    9f76:	9f 91       	pop	r25
    9f78:	cf 91       	pop	r28
    9f7a:	0c 94 dc 4f 	jmp	0x9fb8 <strrev>

00009f7e <__mulsi_const_10>:
    9f7e:	59 2f       	mov	r21, r25
    9f80:	48 2f       	mov	r20, r24
    9f82:	37 2f       	mov	r19, r23
    9f84:	26 2f       	mov	r18, r22
    9f86:	66 0f       	add	r22, r22
    9f88:	77 1f       	adc	r23, r23
    9f8a:	88 1f       	adc	r24, r24
    9f8c:	99 1f       	adc	r25, r25
    9f8e:	66 0f       	add	r22, r22
    9f90:	77 1f       	adc	r23, r23
    9f92:	88 1f       	adc	r24, r24
    9f94:	99 1f       	adc	r25, r25
    9f96:	62 0f       	add	r22, r18
    9f98:	73 1f       	adc	r23, r19
    9f9a:	84 1f       	adc	r24, r20
    9f9c:	95 1f       	adc	r25, r21
    9f9e:	66 0f       	add	r22, r22
    9fa0:	77 1f       	adc	r23, r23
    9fa2:	88 1f       	adc	r24, r24
    9fa4:	99 1f       	adc	r25, r25
    9fa6:	08 95       	ret

00009fa8 <__mulhi_const_10>:
    9fa8:	7a e0       	ldi	r23, 0x0A	; 10
    9faa:	97 9f       	mul	r25, r23
    9fac:	90 2d       	mov	r25, r0
    9fae:	87 9f       	mul	r24, r23
    9fb0:	80 2d       	mov	r24, r0
    9fb2:	91 0d       	add	r25, r1
    9fb4:	11 24       	eor	r1, r1
    9fb6:	08 95       	ret

00009fb8 <strrev>:
    9fb8:	dc 01       	movw	r26, r24
    9fba:	fc 01       	movw	r30, r24
    9fbc:	01 90       	ld	r0, Z+
    9fbe:	00 20       	and	r0, r0
    9fc0:	e9 f7       	brne	.-6      	; 0x9fbc <strrev+0x4>
    9fc2:	32 97       	sbiw	r30, 0x02	; 2
    9fc4:	ae 17       	cp	r26, r30
    9fc6:	bf 07       	cpc	r27, r31
    9fc8:	30 f4       	brcc	.+12     	; 0x9fd6 <strrev+0x1e>
    9fca:	7c 91       	ld	r23, X
    9fcc:	60 81       	ld	r22, Z
    9fce:	70 83       	st	Z, r23
    9fd0:	31 97       	sbiw	r30, 0x01	; 1
    9fd2:	6d 93       	st	X+, r22
    9fd4:	f7 cf       	rjmp	.-18     	; 0x9fc4 <strrev+0xc>
    9fd6:	08 95       	ret

00009fd8 <__prologue_saves__>:
    9fd8:	2f 92       	push	r2
    9fda:	3f 92       	push	r3
    9fdc:	4f 92       	push	r4
    9fde:	5f 92       	push	r5
    9fe0:	6f 92       	push	r6
    9fe2:	7f 92       	push	r7
    9fe4:	8f 92       	push	r8
    9fe6:	9f 92       	push	r9
    9fe8:	af 92       	push	r10
    9fea:	bf 92       	push	r11
    9fec:	cf 92       	push	r12
    9fee:	df 92       	push	r13
    9ff0:	ef 92       	push	r14
    9ff2:	ff 92       	push	r15
    9ff4:	0f 93       	push	r16
    9ff6:	1f 93       	push	r17
    9ff8:	cf 93       	push	r28
    9ffa:	df 93       	push	r29
    9ffc:	cd b7       	in	r28, 0x3d	; 61
    9ffe:	de b7       	in	r29, 0x3e	; 62
    a000:	ca 1b       	sub	r28, r26
    a002:	db 0b       	sbc	r29, r27
    a004:	0f b6       	in	r0, 0x3f	; 63
    a006:	f8 94       	cli
    a008:	de bf       	out	0x3e, r29	; 62
    a00a:	0f be       	out	0x3f, r0	; 63
    a00c:	cd bf       	out	0x3d, r28	; 61
    a00e:	09 94       	ijmp

0000a010 <__epilogue_restores__>:
    a010:	2a 88       	ldd	r2, Y+18	; 0x12
    a012:	39 88       	ldd	r3, Y+17	; 0x11
    a014:	48 88       	ldd	r4, Y+16	; 0x10
    a016:	5f 84       	ldd	r5, Y+15	; 0x0f
    a018:	6e 84       	ldd	r6, Y+14	; 0x0e
    a01a:	7d 84       	ldd	r7, Y+13	; 0x0d
    a01c:	8c 84       	ldd	r8, Y+12	; 0x0c
    a01e:	9b 84       	ldd	r9, Y+11	; 0x0b
    a020:	aa 84       	ldd	r10, Y+10	; 0x0a
    a022:	b9 84       	ldd	r11, Y+9	; 0x09
    a024:	c8 84       	ldd	r12, Y+8	; 0x08
    a026:	df 80       	ldd	r13, Y+7	; 0x07
    a028:	ee 80       	ldd	r14, Y+6	; 0x06
    a02a:	fd 80       	ldd	r15, Y+5	; 0x05
    a02c:	0c 81       	ldd	r16, Y+4	; 0x04
    a02e:	1b 81       	ldd	r17, Y+3	; 0x03
    a030:	aa 81       	ldd	r26, Y+2	; 0x02
    a032:	b9 81       	ldd	r27, Y+1	; 0x01
    a034:	ce 0f       	add	r28, r30
    a036:	d1 1d       	adc	r29, r1
    a038:	0f b6       	in	r0, 0x3f	; 63
    a03a:	f8 94       	cli
    a03c:	de bf       	out	0x3e, r29	; 62
    a03e:	0f be       	out	0x3f, r0	; 63
    a040:	cd bf       	out	0x3d, r28	; 61
    a042:	ed 01       	movw	r28, r26
    a044:	08 95       	ret

0000a046 <__eeprom_read_byte_1C1D1E>:
    a046:	e1 99       	sbic	0x1c, 1	; 28
    a048:	fe cf       	rjmp	.-4      	; 0xa046 <__eeprom_read_byte_1C1D1E>
    a04a:	bf bb       	out	0x1f, r27	; 31
    a04c:	ae bb       	out	0x1e, r26	; 30
    a04e:	e0 9a       	sbi	0x1c, 0	; 28
    a050:	11 96       	adiw	r26, 0x01	; 1
    a052:	0d b2       	in	r0, 0x1d	; 29
    a054:	08 95       	ret

0000a056 <__eeprom_read_word_1C1D1E>:
    a056:	f7 df       	rcall	.-18     	; 0xa046 <__eeprom_read_byte_1C1D1E>
    a058:	e0 2d       	mov	r30, r0
    a05a:	f5 df       	rcall	.-22     	; 0xa046 <__eeprom_read_byte_1C1D1E>
    a05c:	f0 2d       	mov	r31, r0
    a05e:	08 95       	ret

0000a060 <__eeprom_write_byte_1C1D1E>:
    a060:	e1 99       	sbic	0x1c, 1	; 28
    a062:	fe cf       	rjmp	.-4      	; 0xa060 <__eeprom_write_byte_1C1D1E>
    a064:	bf bb       	out	0x1f, r27	; 31
    a066:	ae bb       	out	0x1e, r26	; 30
    a068:	0d ba       	out	0x1d, r0	; 29
    a06a:	11 96       	adiw	r26, 0x01	; 1
    a06c:	0f b6       	in	r0, 0x3f	; 63
    a06e:	f8 94       	cli
    a070:	e2 9a       	sbi	0x1c, 2	; 28
    a072:	e1 9a       	sbi	0x1c, 1	; 28
    a074:	0f be       	out	0x3f, r0	; 63
    a076:	08 95       	ret

0000a078 <__eeprom_write_word_1C1D1E>:
    a078:	f3 df       	rcall	.-26     	; 0xa060 <__eeprom_write_byte_1C1D1E>
    a07a:	01 2c       	mov	r0, r1
    a07c:	f1 df       	rcall	.-30     	; 0xa060 <__eeprom_write_byte_1C1D1E>
    a07e:	11 24       	eor	r1, r1
    a080:	08 95       	ret

0000a082 <__udivmodhi4>:
    a082:	aa 1b       	sub	r26, r26
    a084:	bb 1b       	sub	r27, r27
    a086:	51 e1       	ldi	r21, 0x11	; 17
    a088:	07 c0       	rjmp	.+14     	; 0xa098 <__udivmodhi4_ep>

0000a08a <__udivmodhi4_loop>:
    a08a:	aa 1f       	adc	r26, r26
    a08c:	bb 1f       	adc	r27, r27
    a08e:	a6 17       	cp	r26, r22
    a090:	b7 07       	cpc	r27, r23
    a092:	10 f0       	brcs	.+4      	; 0xa098 <__udivmodhi4_ep>
    a094:	a6 1b       	sub	r26, r22
    a096:	b7 0b       	sbc	r27, r23

0000a098 <__udivmodhi4_ep>:
    a098:	88 1f       	adc	r24, r24
    a09a:	99 1f       	adc	r25, r25
    a09c:	5a 95       	dec	r21
    a09e:	a9 f7       	brne	.-22     	; 0xa08a <__udivmodhi4_loop>
    a0a0:	80 95       	com	r24
    a0a2:	90 95       	com	r25
    a0a4:	bc 01       	movw	r22, r24
    a0a6:	cd 01       	movw	r24, r26
    a0a8:	08 95       	ret

0000a0aa <__udivmodsi4>:
    a0aa:	a1 e2       	ldi	r26, 0x21	; 33
    a0ac:	1a 2e       	mov	r1, r26
    a0ae:	aa 1b       	sub	r26, r26
    a0b0:	bb 1b       	sub	r27, r27
    a0b2:	fd 01       	movw	r30, r26
    a0b4:	0d c0       	rjmp	.+26     	; 0xa0d0 <__udivmodsi4_ep>

0000a0b6 <__udivmodsi4_loop>:
    a0b6:	aa 1f       	adc	r26, r26
    a0b8:	bb 1f       	adc	r27, r27
    a0ba:	ee 1f       	adc	r30, r30
    a0bc:	ff 1f       	adc	r31, r31
    a0be:	a2 17       	cp	r26, r18
    a0c0:	b3 07       	cpc	r27, r19
    a0c2:	e4 07       	cpc	r30, r20
    a0c4:	f5 07       	cpc	r31, r21
    a0c6:	20 f0       	brcs	.+8      	; 0xa0d0 <__udivmodsi4_ep>
    a0c8:	a2 1b       	sub	r26, r18
    a0ca:	b3 0b       	sbc	r27, r19
    a0cc:	e4 0b       	sbc	r30, r20
    a0ce:	f5 0b       	sbc	r31, r21

0000a0d0 <__udivmodsi4_ep>:
    a0d0:	66 1f       	adc	r22, r22
    a0d2:	77 1f       	adc	r23, r23
    a0d4:	88 1f       	adc	r24, r24
    a0d6:	99 1f       	adc	r25, r25
    a0d8:	1a 94       	dec	r1
    a0da:	69 f7       	brne	.-38     	; 0xa0b6 <__udivmodsi4_loop>
    a0dc:	60 95       	com	r22
    a0de:	70 95       	com	r23
    a0e0:	80 95       	com	r24
    a0e2:	90 95       	com	r25
    a0e4:	9b 01       	movw	r18, r22
    a0e6:	ac 01       	movw	r20, r24
    a0e8:	bd 01       	movw	r22, r26
    a0ea:	cf 01       	movw	r24, r30
    a0ec:	08 95       	ret
